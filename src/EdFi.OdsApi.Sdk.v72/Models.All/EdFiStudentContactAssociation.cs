/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentContactAssociation
    /// </summary>
    [DataContract(Name = "edFi_studentContactAssociation")]
    public partial class EdFiStudentContactAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentContactAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentContactAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentContactAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="contactReference">contactReference (required).</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="contactPriority">The numeric order of the preferred sequence or priority of contact..</param>
        /// <param name="contactRestrictions">Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual)..</param>
        /// <param name="emergencyContactStatus">Indicator of whether the person is a designated emergency contact for the student..</param>
        /// <param name="legalGuardian">Indicator of whether the person is a legal guardian for the student..</param>
        /// <param name="livesWith">Indicator of whether the student lives with the associated contact..</param>
        /// <param name="primaryContactStatus">Indicator of whether the person is a primary contact for the student..</param>
        /// <param name="relationDescriptor">The nature of an individual&#39;s relationship to a student, primarily used to capture family relationships..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the StudentContactAssociation entity..</param>
        public EdFiStudentContactAssociation(string id = default, EdFiContactReference contactReference = default, EdFiStudentReference studentReference = default, int? contactPriority = default, string contactRestrictions = default, bool? emergencyContactStatus = default, bool? legalGuardian = default, bool? livesWith = default, bool? primaryContactStatus = default, string relationDescriptor = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "contactReference" is required (not null)
            if (contactReference == null)
            {
                throw new ArgumentNullException("contactReference is a required property for EdFiStudentContactAssociation and cannot be null");
            }
            this.ContactReference = contactReference;
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new ArgumentNullException("studentReference is a required property for EdFiStudentContactAssociation and cannot be null");
            }
            this.StudentReference = studentReference;
            this.Id = id;
            this.ContactPriority = contactPriority;
            this.ContactRestrictions = contactRestrictions;
            this.EmergencyContactStatus = emergencyContactStatus;
            this.LegalGuardian = legalGuardian;
            this.LivesWith = livesWith;
            this.PrimaryContactStatus = primaryContactStatus;
            this.RelationDescriptor = relationDescriptor;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ContactReference
        /// </summary>
        [DataMember(Name = "contactReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiContactReference ContactReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name = "studentReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// The numeric order of the preferred sequence or priority of contact.
        /// </summary>
        /// <value>The numeric order of the preferred sequence or priority of contact.</value>
        [DataMember(Name = "contactPriority", EmitDefaultValue = true)]
        public int? ContactPriority { get; set; }

        /// <summary>
        /// Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).
        /// </summary>
        /// <value>Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).</value>
        [DataMember(Name = "contactRestrictions", EmitDefaultValue = true)]
        public string ContactRestrictions { get; set; }

        /// <summary>
        /// Indicator of whether the person is a designated emergency contact for the student.
        /// </summary>
        /// <value>Indicator of whether the person is a designated emergency contact for the student.</value>
        [DataMember(Name = "emergencyContactStatus", EmitDefaultValue = true)]
        public bool? EmergencyContactStatus { get; set; }

        /// <summary>
        /// Indicator of whether the person is a legal guardian for the student.
        /// </summary>
        /// <value>Indicator of whether the person is a legal guardian for the student.</value>
        [DataMember(Name = "legalGuardian", EmitDefaultValue = true)]
        public bool? LegalGuardian { get; set; }

        /// <summary>
        /// Indicator of whether the student lives with the associated contact.
        /// </summary>
        /// <value>Indicator of whether the student lives with the associated contact.</value>
        [DataMember(Name = "livesWith", EmitDefaultValue = true)]
        public bool? LivesWith { get; set; }

        /// <summary>
        /// Indicator of whether the person is a primary contact for the student.
        /// </summary>
        /// <value>Indicator of whether the person is a primary contact for the student.</value>
        [DataMember(Name = "primaryContactStatus", EmitDefaultValue = true)]
        public bool? PrimaryContactStatus { get; set; }

        /// <summary>
        /// The nature of an individual&#39;s relationship to a student, primarily used to capture family relationships.
        /// </summary>
        /// <value>The nature of an individual&#39;s relationship to a student, primarily used to capture family relationships.</value>
        [DataMember(Name = "relationDescriptor", EmitDefaultValue = true)]
        public string RelationDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the StudentContactAssociation entity.
        /// </summary>
        /// <value>Extensions to the StudentContactAssociation entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentContactAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContactReference: ").Append(ContactReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  ContactPriority: ").Append(ContactPriority).Append("\n");
            sb.Append("  ContactRestrictions: ").Append(ContactRestrictions).Append("\n");
            sb.Append("  EmergencyContactStatus: ").Append(EmergencyContactStatus).Append("\n");
            sb.Append("  LegalGuardian: ").Append(LegalGuardian).Append("\n");
            sb.Append("  LivesWith: ").Append(LivesWith).Append("\n");
            sb.Append("  PrimaryContactStatus: ").Append(PrimaryContactStatus).Append("\n");
            sb.Append("  RelationDescriptor: ").Append(RelationDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContactRestrictions (string) maxLength
            if (this.ContactRestrictions != null && this.ContactRestrictions.Length > 250)
            {
                yield return new ValidationResult("Invalid value for ContactRestrictions, length must be less than 250.", new [] { "ContactRestrictions" });
            }

            // RelationDescriptor (string) maxLength
            if (this.RelationDescriptor != null && this.RelationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for RelationDescriptor, length must be less than 306.", new [] { "RelationDescriptor" });
            }

            yield break;
        }
    }

}
