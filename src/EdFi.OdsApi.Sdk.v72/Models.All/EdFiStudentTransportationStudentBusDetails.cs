/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentTransportationStudentBusDetails
    /// </summary>
    [DataContract(Name = "edFi_studentTransportationStudentBusDetails")]
    public partial class EdFiStudentTransportationStudentBusDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentTransportationStudentBusDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentTransportationStudentBusDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentTransportationStudentBusDetails" /> class.
        /// </summary>
        /// <param name="busRouteDescriptor">Identifies the specific route taken by a bus for student transportation. (required).</param>
        /// <param name="busNumber">The unique identifier assigned to the bus used for transporting the student. (required).</param>
        /// <param name="mileage">The distance, typically measured in miles, that a student was transported along the route of the bus during a single trip..</param>
        /// <param name="travelDayofWeeks">An unordered collection of studentTransportationStudentBusDetailsTravelDayofWeeks. Specifies the day(s) of the week on which student transportation occurs..</param>
        /// <param name="travelDirections">An unordered collection of studentTransportationStudentBusDetailsTravelDirections. Indicates the direction of travel for the student transportation route (e.g., to school, from school)..</param>
        /// <param name="ext">Extensions to the StudentTransportationStudentBusDetails entity..</param>
        public EdFiStudentTransportationStudentBusDetails(string busRouteDescriptor = default, string busNumber = default, double? mileage = default, List<EdFiStudentTransportationStudentBusDetailsTravelDayofWeek> travelDayofWeeks = default, List<EdFiStudentTransportationStudentBusDetailsTravelDirection> travelDirections = default, Object ext = default)
        {
            // to ensure "busRouteDescriptor" is required (not null)
            if (busRouteDescriptor == null)
            {
                throw new ArgumentNullException("busRouteDescriptor is a required property for EdFiStudentTransportationStudentBusDetails and cannot be null");
            }
            this.BusRouteDescriptor = busRouteDescriptor;
            // to ensure "busNumber" is required (not null)
            if (busNumber == null)
            {
                throw new ArgumentNullException("busNumber is a required property for EdFiStudentTransportationStudentBusDetails and cannot be null");
            }
            this.BusNumber = busNumber;
            this.Mileage = mileage;
            this.TravelDayofWeeks = travelDayofWeeks;
            this.TravelDirections = travelDirections;
            this.Ext = ext;
        }

        /// <summary>
        /// Identifies the specific route taken by a bus for student transportation.
        /// </summary>
        /// <value>Identifies the specific route taken by a bus for student transportation.</value>
        [DataMember(Name = "busRouteDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string BusRouteDescriptor { get; set; }

        /// <summary>
        /// The unique identifier assigned to the bus used for transporting the student.
        /// </summary>
        /// <value>The unique identifier assigned to the bus used for transporting the student.</value>
        [DataMember(Name = "busNumber", IsRequired = true, EmitDefaultValue = true)]
        public string BusNumber { get; set; }

        /// <summary>
        /// The distance, typically measured in miles, that a student was transported along the route of the bus during a single trip.
        /// </summary>
        /// <value>The distance, typically measured in miles, that a student was transported along the route of the bus during a single trip.</value>
        [DataMember(Name = "mileage", EmitDefaultValue = true)]
        public double? Mileage { get; set; }

        /// <summary>
        /// An unordered collection of studentTransportationStudentBusDetailsTravelDayofWeeks. Specifies the day(s) of the week on which student transportation occurs.
        /// </summary>
        /// <value>An unordered collection of studentTransportationStudentBusDetailsTravelDayofWeeks. Specifies the day(s) of the week on which student transportation occurs.</value>
        [DataMember(Name = "travelDayofWeeks", EmitDefaultValue = false)]
        public List<EdFiStudentTransportationStudentBusDetailsTravelDayofWeek> TravelDayofWeeks { get; set; }

        /// <summary>
        /// An unordered collection of studentTransportationStudentBusDetailsTravelDirections. Indicates the direction of travel for the student transportation route (e.g., to school, from school).
        /// </summary>
        /// <value>An unordered collection of studentTransportationStudentBusDetailsTravelDirections. Indicates the direction of travel for the student transportation route (e.g., to school, from school).</value>
        [DataMember(Name = "travelDirections", EmitDefaultValue = false)]
        public List<EdFiStudentTransportationStudentBusDetailsTravelDirection> TravelDirections { get; set; }

        /// <summary>
        /// Extensions to the StudentTransportationStudentBusDetails entity.
        /// </summary>
        /// <value>Extensions to the StudentTransportationStudentBusDetails entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentTransportationStudentBusDetails {\n");
            sb.Append("  BusRouteDescriptor: ").Append(BusRouteDescriptor).Append("\n");
            sb.Append("  BusNumber: ").Append(BusNumber).Append("\n");
            sb.Append("  Mileage: ").Append(Mileage).Append("\n");
            sb.Append("  TravelDayofWeeks: ").Append(TravelDayofWeeks).Append("\n");
            sb.Append("  TravelDirections: ").Append(TravelDirections).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BusRouteDescriptor (string) maxLength
            if (this.BusRouteDescriptor != null && this.BusRouteDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for BusRouteDescriptor, length must be less than 306.", new [] { "BusRouteDescriptor" });
            }

            // BusNumber (string) maxLength
            if (this.BusNumber != null && this.BusNumber.Length > 36)
            {
                yield return new ValidationResult("Invalid value for BusNumber, length must be less than 36.", new [] { "BusNumber" });
            }

            // Mileage (double?) maximum
            if (this.Mileage > (double?)999.99)
            {
                yield return new ValidationResult("Invalid value for Mileage, must be a value less than or equal to 999.99.", new [] { "Mileage" });
            }

            // Mileage (double?) minimum
            if (this.Mileage < (double?)-999.99)
            {
                yield return new ValidationResult("Invalid value for Mileage, must be a value greater than or equal to -999.99.", new [] { "Mileage" });
            }

            yield break;
        }
    }

}
