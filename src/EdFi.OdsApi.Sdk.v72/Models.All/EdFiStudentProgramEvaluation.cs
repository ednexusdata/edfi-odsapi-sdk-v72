/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentProgramEvaluation
    /// </summary>
    [DataContract(Name = "edFi_studentProgramEvaluation")]
    public partial class EdFiStudentProgramEvaluation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentProgramEvaluation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentProgramEvaluation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentProgramEvaluation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="evaluationDate">The month, day, and year on which the evaluation was conducted. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference.</param>
        /// <param name="programEvaluationReference">programEvaluationReference (required).</param>
        /// <param name="staffEvaluatorStaffReference">staffEvaluatorStaffReference.</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="evaluationDuration">The actual or estimated number of clock minutes during which the evaluation was conducted..</param>
        /// <param name="externalEvaluators">An unordered collection of studentProgramEvaluationExternalEvaluators. The external person(s) - not staff - that conducted the evaluation..</param>
        /// <param name="studentEvaluationElements">An unordered collection of studentProgramEvaluationStudentEvaluationElements. The student&#39;s rating and/or rating levels earned for a program evaluation element..</param>
        /// <param name="studentEvaluationObjectives">An unordered collection of studentProgramEvaluationStudentEvaluationObjectives. The student&#39;s rating and/or rating levels earned for a program evaluation objective..</param>
        /// <param name="summaryEvaluationComment">Any comments about the summary evaluation to be captured..</param>
        /// <param name="summaryEvaluationNumericRating">The numerical summary rating or score for the evaluation..</param>
        /// <param name="summaryEvaluationRatingLevelDescriptor">The summary rating level achieved based upon the rating or score..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the StudentProgramEvaluation entity..</param>
        public EdFiStudentProgramEvaluation(string id = default, DateOnly evaluationDate = default, EdFiEducationOrganizationReference educationOrganizationReference = default, EdFiProgramEvaluationReference programEvaluationReference = default, EdFiStaffReference staffEvaluatorStaffReference = default, EdFiStudentReference studentReference = default, int? evaluationDuration = default, List<EdFiStudentProgramEvaluationExternalEvaluator> externalEvaluators = default, List<EdFiStudentProgramEvaluationStudentEvaluationElement> studentEvaluationElements = default, List<EdFiStudentProgramEvaluationStudentEvaluationObjective> studentEvaluationObjectives = default, string summaryEvaluationComment = default, double? summaryEvaluationNumericRating = default, string summaryEvaluationRatingLevelDescriptor = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            this.EvaluationDate = evaluationDate;
            // to ensure "programEvaluationReference" is required (not null)
            if (programEvaluationReference == null)
            {
                throw new ArgumentNullException("programEvaluationReference is a required property for EdFiStudentProgramEvaluation and cannot be null");
            }
            this.ProgramEvaluationReference = programEvaluationReference;
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new ArgumentNullException("studentReference is a required property for EdFiStudentProgramEvaluation and cannot be null");
            }
            this.StudentReference = studentReference;
            this.Id = id;
            this.EducationOrganizationReference = educationOrganizationReference;
            this.StaffEvaluatorStaffReference = staffEvaluatorStaffReference;
            this.EvaluationDuration = evaluationDuration;
            this.ExternalEvaluators = externalEvaluators;
            this.StudentEvaluationElements = studentEvaluationElements;
            this.StudentEvaluationObjectives = studentEvaluationObjectives;
            this.SummaryEvaluationComment = summaryEvaluationComment;
            this.SummaryEvaluationNumericRating = summaryEvaluationNumericRating;
            this.SummaryEvaluationRatingLevelDescriptor = summaryEvaluationRatingLevelDescriptor;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The month, day, and year on which the evaluation was conducted.
        /// </summary>
        /// <value>The month, day, and year on which the evaluation was conducted.</value>
        [DataMember(Name = "evaluationDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly EvaluationDate { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", EmitDefaultValue = false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets ProgramEvaluationReference
        /// </summary>
        [DataMember(Name = "programEvaluationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiProgramEvaluationReference ProgramEvaluationReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffEvaluatorStaffReference
        /// </summary>
        [DataMember(Name = "staffEvaluatorStaffReference", EmitDefaultValue = false)]
        public EdFiStaffReference StaffEvaluatorStaffReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name = "studentReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// The actual or estimated number of clock minutes during which the evaluation was conducted.
        /// </summary>
        /// <value>The actual or estimated number of clock minutes during which the evaluation was conducted.</value>
        [DataMember(Name = "evaluationDuration", EmitDefaultValue = true)]
        public int? EvaluationDuration { get; set; }

        /// <summary>
        /// An unordered collection of studentProgramEvaluationExternalEvaluators. The external person(s) - not staff - that conducted the evaluation.
        /// </summary>
        /// <value>An unordered collection of studentProgramEvaluationExternalEvaluators. The external person(s) - not staff - that conducted the evaluation.</value>
        [DataMember(Name = "externalEvaluators", EmitDefaultValue = false)]
        public List<EdFiStudentProgramEvaluationExternalEvaluator> ExternalEvaluators { get; set; }

        /// <summary>
        /// An unordered collection of studentProgramEvaluationStudentEvaluationElements. The student&#39;s rating and/or rating levels earned for a program evaluation element.
        /// </summary>
        /// <value>An unordered collection of studentProgramEvaluationStudentEvaluationElements. The student&#39;s rating and/or rating levels earned for a program evaluation element.</value>
        [DataMember(Name = "studentEvaluationElements", EmitDefaultValue = false)]
        public List<EdFiStudentProgramEvaluationStudentEvaluationElement> StudentEvaluationElements { get; set; }

        /// <summary>
        /// An unordered collection of studentProgramEvaluationStudentEvaluationObjectives. The student&#39;s rating and/or rating levels earned for a program evaluation objective.
        /// </summary>
        /// <value>An unordered collection of studentProgramEvaluationStudentEvaluationObjectives. The student&#39;s rating and/or rating levels earned for a program evaluation objective.</value>
        [DataMember(Name = "studentEvaluationObjectives", EmitDefaultValue = false)]
        public List<EdFiStudentProgramEvaluationStudentEvaluationObjective> StudentEvaluationObjectives { get; set; }

        /// <summary>
        /// Any comments about the summary evaluation to be captured.
        /// </summary>
        /// <value>Any comments about the summary evaluation to be captured.</value>
        [DataMember(Name = "summaryEvaluationComment", EmitDefaultValue = true)]
        public string SummaryEvaluationComment { get; set; }

        /// <summary>
        /// The numerical summary rating or score for the evaluation.
        /// </summary>
        /// <value>The numerical summary rating or score for the evaluation.</value>
        [DataMember(Name = "summaryEvaluationNumericRating", EmitDefaultValue = true)]
        public double? SummaryEvaluationNumericRating { get; set; }

        /// <summary>
        /// The summary rating level achieved based upon the rating or score.
        /// </summary>
        /// <value>The summary rating level achieved based upon the rating or score.</value>
        [DataMember(Name = "summaryEvaluationRatingLevelDescriptor", EmitDefaultValue = true)]
        public string SummaryEvaluationRatingLevelDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the StudentProgramEvaluation entity.
        /// </summary>
        /// <value>Extensions to the StudentProgramEvaluation entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentProgramEvaluation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EvaluationDate: ").Append(EvaluationDate).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  ProgramEvaluationReference: ").Append(ProgramEvaluationReference).Append("\n");
            sb.Append("  StaffEvaluatorStaffReference: ").Append(StaffEvaluatorStaffReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  EvaluationDuration: ").Append(EvaluationDuration).Append("\n");
            sb.Append("  ExternalEvaluators: ").Append(ExternalEvaluators).Append("\n");
            sb.Append("  StudentEvaluationElements: ").Append(StudentEvaluationElements).Append("\n");
            sb.Append("  StudentEvaluationObjectives: ").Append(StudentEvaluationObjectives).Append("\n");
            sb.Append("  SummaryEvaluationComment: ").Append(SummaryEvaluationComment).Append("\n");
            sb.Append("  SummaryEvaluationNumericRating: ").Append(SummaryEvaluationNumericRating).Append("\n");
            sb.Append("  SummaryEvaluationRatingLevelDescriptor: ").Append(SummaryEvaluationRatingLevelDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EvaluationDuration (int?) minimum
            if (this.EvaluationDuration < (int?)1)
            {
                yield return new ValidationResult("Invalid value for EvaluationDuration, must be a value greater than or equal to 1.", new [] { "EvaluationDuration" });
            }

            // SummaryEvaluationComment (string) maxLength
            if (this.SummaryEvaluationComment != null && this.SummaryEvaluationComment.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for SummaryEvaluationComment, length must be less than 1024.", new [] { "SummaryEvaluationComment" });
            }

            // SummaryEvaluationNumericRating (double?) maximum
            if (this.SummaryEvaluationNumericRating > (double?)999.999)
            {
                yield return new ValidationResult("Invalid value for SummaryEvaluationNumericRating, must be a value less than or equal to 999.999.", new [] { "SummaryEvaluationNumericRating" });
            }

            // SummaryEvaluationNumericRating (double?) minimum
            if (this.SummaryEvaluationNumericRating < (double?)-999.999)
            {
                yield return new ValidationResult("Invalid value for SummaryEvaluationNumericRating, must be a value greater than or equal to -999.999.", new [] { "SummaryEvaluationNumericRating" });
            }

            // SummaryEvaluationRatingLevelDescriptor (string) maxLength
            if (this.SummaryEvaluationRatingLevelDescriptor != null && this.SummaryEvaluationRatingLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SummaryEvaluationRatingLevelDescriptor, length must be less than 306.", new [] { "SummaryEvaluationRatingLevelDescriptor" });
            }

            yield break;
        }
    }

}
