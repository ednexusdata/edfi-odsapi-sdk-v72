/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiGradingPeriodReference
    /// </summary>
    [DataContract(Name = "edFi_gradingPeriodReference")]
    public partial class EdFiGradingPeriodReference : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradingPeriodReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGradingPeriodReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradingPeriodReference" /> class.
        /// </summary>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported. (required).</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period. (required).</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (required).</param>
        /// <param name="schoolYear">The identifier for the grading period school year. (required).</param>
        /// <param name="link">link.</param>
        public EdFiGradingPeriodReference(string gradingPeriodDescriptor = default, string gradingPeriodName = default, long schoolId = default, int schoolYear = default, Link link = default)
        {
            // to ensure "gradingPeriodDescriptor" is required (not null)
            if (gradingPeriodDescriptor == null)
            {
                throw new ArgumentNullException("gradingPeriodDescriptor is a required property for EdFiGradingPeriodReference and cannot be null");
            }
            this.GradingPeriodDescriptor = gradingPeriodDescriptor;
            // to ensure "gradingPeriodName" is required (not null)
            if (gradingPeriodName == null)
            {
                throw new ArgumentNullException("gradingPeriodName is a required property for EdFiGradingPeriodReference and cannot be null");
            }
            this.GradingPeriodName = gradingPeriodName;
            this.SchoolId = schoolId;
            this.SchoolYear = schoolYear;
            this.Link = link;
        }

        /// <summary>
        /// The state&#39;s name of the period for which grades are reported.
        /// </summary>
        /// <value>The state&#39;s name of the period for which grades are reported.</value>
        [DataMember(Name = "gradingPeriodDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string GradingPeriodDescriptor { get; set; }

        /// <summary>
        /// The school&#39;s descriptive name of the grading period.
        /// </summary>
        /// <value>The school&#39;s descriptive name of the grading period.</value>
        [DataMember(Name = "gradingPeriodName", IsRequired = true, EmitDefaultValue = true)]
        public string GradingPeriodName { get; set; }

        /// <summary>
        /// The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.
        /// </summary>
        /// <value>The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.</value>
        [DataMember(Name = "schoolId", IsRequired = true, EmitDefaultValue = true)]
        public long SchoolId { get; set; }

        /// <summary>
        /// The identifier for the grading period school year.
        /// </summary>
        /// <value>The identifier for the grading period school year.</value>
        [DataMember(Name = "schoolYear", IsRequired = true, EmitDefaultValue = true)]
        public int SchoolYear { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public Link Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGradingPeriodReference {\n");
            sb.Append("  GradingPeriodDescriptor: ").Append(GradingPeriodDescriptor).Append("\n");
            sb.Append("  GradingPeriodName: ").Append(GradingPeriodName).Append("\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("  SchoolYear: ").Append(SchoolYear).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GradingPeriodDescriptor (string) maxLength
            if (this.GradingPeriodDescriptor != null && this.GradingPeriodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradingPeriodDescriptor, length must be less than 306.", new [] { "GradingPeriodDescriptor" });
            }

            // GradingPeriodName (string) maxLength
            if (this.GradingPeriodName != null && this.GradingPeriodName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for GradingPeriodName, length must be less than 60.", new [] { "GradingPeriodName" });
            }

            yield break;
        }
    }

}
