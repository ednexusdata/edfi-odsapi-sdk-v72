/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiSectionCourseLevelCharacteristic
    /// </summary>
    [DataContract(Name = "edFi_sectionCourseLevelCharacteristic")]
    public partial class EdFiSectionCourseLevelCharacteristic : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSectionCourseLevelCharacteristic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSectionCourseLevelCharacteristic() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSectionCourseLevelCharacteristic" /> class.
        /// </summary>
        /// <param name="courseLevelCharacteristicDescriptor">The type of specific program or designation with which the section is associated. This collection should only be populated if it differs from the course level characteristics identified at the course offering level. (required).</param>
        /// <param name="ext">Extensions to the SectionCourseLevelCharacteristic entity..</param>
        public EdFiSectionCourseLevelCharacteristic(string courseLevelCharacteristicDescriptor = default, Object ext = default)
        {
            // to ensure "courseLevelCharacteristicDescriptor" is required (not null)
            if (courseLevelCharacteristicDescriptor == null)
            {
                throw new ArgumentNullException("courseLevelCharacteristicDescriptor is a required property for EdFiSectionCourseLevelCharacteristic and cannot be null");
            }
            this.CourseLevelCharacteristicDescriptor = courseLevelCharacteristicDescriptor;
            this.Ext = ext;
        }

        /// <summary>
        /// The type of specific program or designation with which the section is associated. This collection should only be populated if it differs from the course level characteristics identified at the course offering level.
        /// </summary>
        /// <value>The type of specific program or designation with which the section is associated. This collection should only be populated if it differs from the course level characteristics identified at the course offering level.</value>
        [DataMember(Name = "courseLevelCharacteristicDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string CourseLevelCharacteristicDescriptor { get; set; }

        /// <summary>
        /// Extensions to the SectionCourseLevelCharacteristic entity.
        /// </summary>
        /// <value>Extensions to the SectionCourseLevelCharacteristic entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSectionCourseLevelCharacteristic {\n");
            sb.Append("  CourseLevelCharacteristicDescriptor: ").Append(CourseLevelCharacteristicDescriptor).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CourseLevelCharacteristicDescriptor (string) maxLength
            if (this.CourseLevelCharacteristicDescriptor != null && this.CourseLevelCharacteristicDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CourseLevelCharacteristicDescriptor, length must be less than 306.", new [] { "CourseLevelCharacteristicDescriptor" });
            }

            yield break;
        }
    }

}
