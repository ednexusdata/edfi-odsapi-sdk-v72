/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStaffEducationOrganizationEmploymentAssociation
    /// </summary>
    [DataContract(Name = "edFi_staffEducationOrganizationEmploymentAssociation")]
    public partial class EdFiStaffEducationOrganizationEmploymentAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffEducationOrganizationEmploymentAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaffEducationOrganizationEmploymentAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffEducationOrganizationEmploymentAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract. (required).</param>
        /// <param name="hireDate">The month, day, and year on which an individual was hired for a position. (required).</param>
        /// <param name="credentialReference">credentialReference.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="staffReference">staffReference (required).</param>
        /// <param name="annualWage">Annual wage associated with the employment position being reported..</param>
        /// <param name="department">The department or suborganization the employee/contractor is associated with in the education organization..</param>
        /// <param name="endDate">The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid)..</param>
        /// <param name="fullTimeEquivalency">The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting..</param>
        /// <param name="hourlyWage">Hourly wage associated with the employment position being reported..</param>
        /// <param name="offerDate">Date at which the staff member was made an official offer for this employment..</param>
        /// <param name="separationDescriptor">Type of employment separation..</param>
        /// <param name="separationReasonDescriptor">Reason for terminating the employment..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the StaffEducationOrganizationEmploymentAssociation entity..</param>
        public EdFiStaffEducationOrganizationEmploymentAssociation(string id = default, string employmentStatusDescriptor = default, DateOnly hireDate = default, EdFiCredentialReference credentialReference = default, EdFiEducationOrganizationReference educationOrganizationReference = default, EdFiStaffReference staffReference = default, double? annualWage = default, string department = default, DateOnly? endDate = default, double? fullTimeEquivalency = default, double? hourlyWage = default, DateOnly? offerDate = default, string separationDescriptor = default, string separationReasonDescriptor = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "employmentStatusDescriptor" is required (not null)
            if (employmentStatusDescriptor == null)
            {
                throw new ArgumentNullException("employmentStatusDescriptor is a required property for EdFiStaffEducationOrganizationEmploymentAssociation and cannot be null");
            }
            this.EmploymentStatusDescriptor = employmentStatusDescriptor;
            this.HireDate = hireDate;
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new ArgumentNullException("educationOrganizationReference is a required property for EdFiStaffEducationOrganizationEmploymentAssociation and cannot be null");
            }
            this.EducationOrganizationReference = educationOrganizationReference;
            // to ensure "staffReference" is required (not null)
            if (staffReference == null)
            {
                throw new ArgumentNullException("staffReference is a required property for EdFiStaffEducationOrganizationEmploymentAssociation and cannot be null");
            }
            this.StaffReference = staffReference;
            this.Id = id;
            this.CredentialReference = credentialReference;
            this.AnnualWage = annualWage;
            this.Department = department;
            this.EndDate = endDate;
            this.FullTimeEquivalency = fullTimeEquivalency;
            this.HourlyWage = hourlyWage;
            this.OfferDate = offerDate;
            this.SeparationDescriptor = separationDescriptor;
            this.SeparationReasonDescriptor = separationReasonDescriptor;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Reflects the type of employment or contract.
        /// </summary>
        /// <value>Reflects the type of employment or contract.</value>
        [DataMember(Name = "employmentStatusDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string EmploymentStatusDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was hired for a position.
        /// </summary>
        /// <value>The month, day, and year on which an individual was hired for a position.</value>
        [DataMember(Name = "hireDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly HireDate { get; set; }

        /// <summary>
        /// Gets or Sets CredentialReference
        /// </summary>
        [DataMember(Name = "credentialReference", EmitDefaultValue = false)]
        public EdFiCredentialReference CredentialReference { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name = "staffReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// Annual wage associated with the employment position being reported.
        /// </summary>
        /// <value>Annual wage associated with the employment position being reported.</value>
        [DataMember(Name = "annualWage", EmitDefaultValue = true)]
        public double? AnnualWage { get; set; }

        /// <summary>
        /// The department or suborganization the employee/contractor is associated with in the education organization.
        /// </summary>
        /// <value>The department or suborganization the employee/contractor is associated with in the education organization.</value>
        [DataMember(Name = "department", EmitDefaultValue = true)]
        public string Department { get; set; }

        /// <summary>
        /// The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).
        /// </summary>
        /// <value>The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateOnly? EndDate { get; set; }

        /// <summary>
        /// The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.
        /// </summary>
        /// <value>The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.</value>
        [DataMember(Name = "fullTimeEquivalency", EmitDefaultValue = true)]
        public double? FullTimeEquivalency { get; set; }

        /// <summary>
        /// Hourly wage associated with the employment position being reported.
        /// </summary>
        /// <value>Hourly wage associated with the employment position being reported.</value>
        [DataMember(Name = "hourlyWage", EmitDefaultValue = true)]
        public double? HourlyWage { get; set; }

        /// <summary>
        /// Date at which the staff member was made an official offer for this employment.
        /// </summary>
        /// <value>Date at which the staff member was made an official offer for this employment.</value>
        [DataMember(Name = "offerDate", EmitDefaultValue = true)]
        public DateOnly? OfferDate { get; set; }

        /// <summary>
        /// Type of employment separation.
        /// </summary>
        /// <value>Type of employment separation.</value>
        [DataMember(Name = "separationDescriptor", EmitDefaultValue = true)]
        public string SeparationDescriptor { get; set; }

        /// <summary>
        /// Reason for terminating the employment.
        /// </summary>
        /// <value>Reason for terminating the employment.</value>
        [DataMember(Name = "separationReasonDescriptor", EmitDefaultValue = true)]
        public string SeparationReasonDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the StaffEducationOrganizationEmploymentAssociation entity.
        /// </summary>
        /// <value>Extensions to the StaffEducationOrganizationEmploymentAssociation entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffEducationOrganizationEmploymentAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmploymentStatusDescriptor: ").Append(EmploymentStatusDescriptor).Append("\n");
            sb.Append("  HireDate: ").Append(HireDate).Append("\n");
            sb.Append("  CredentialReference: ").Append(CredentialReference).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  AnnualWage: ").Append(AnnualWage).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FullTimeEquivalency: ").Append(FullTimeEquivalency).Append("\n");
            sb.Append("  HourlyWage: ").Append(HourlyWage).Append("\n");
            sb.Append("  OfferDate: ").Append(OfferDate).Append("\n");
            sb.Append("  SeparationDescriptor: ").Append(SeparationDescriptor).Append("\n");
            sb.Append("  SeparationReasonDescriptor: ").Append(SeparationReasonDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EmploymentStatusDescriptor (string) maxLength
            if (this.EmploymentStatusDescriptor != null && this.EmploymentStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EmploymentStatusDescriptor, length must be less than 306.", new [] { "EmploymentStatusDescriptor" });
            }

            // AnnualWage (double?) maximum
            if (this.AnnualWage > (double?)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for AnnualWage, must be a value less than or equal to 922337203685477.6.", new [] { "AnnualWage" });
            }

            // AnnualWage (double?) minimum
            if (this.AnnualWage < (double?)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for AnnualWage, must be a value greater than or equal to -922337203685477.6.", new [] { "AnnualWage" });
            }

            // Department (string) maxLength
            if (this.Department != null && this.Department.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Department, length must be less than 60.", new [] { "Department" });
            }

            // FullTimeEquivalency (double?) maximum
            if (this.FullTimeEquivalency > (double?)9.9999)
            {
                yield return new ValidationResult("Invalid value for FullTimeEquivalency, must be a value less than or equal to 9.9999.", new [] { "FullTimeEquivalency" });
            }

            // FullTimeEquivalency (double?) minimum
            if (this.FullTimeEquivalency < (double?)0.0)
            {
                yield return new ValidationResult("Invalid value for FullTimeEquivalency, must be a value greater than or equal to 0.0.", new [] { "FullTimeEquivalency" });
            }

            // HourlyWage (double?) maximum
            if (this.HourlyWage > (double?)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for HourlyWage, must be a value less than or equal to 922337203685477.6.", new [] { "HourlyWage" });
            }

            // HourlyWage (double?) minimum
            if (this.HourlyWage < (double?)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for HourlyWage, must be a value greater than or equal to -922337203685477.6.", new [] { "HourlyWage" });
            }

            // SeparationDescriptor (string) maxLength
            if (this.SeparationDescriptor != null && this.SeparationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SeparationDescriptor, length must be less than 306.", new [] { "SeparationDescriptor" });
            }

            // SeparationReasonDescriptor (string) maxLength
            if (this.SeparationReasonDescriptor != null && this.SeparationReasonDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SeparationReasonDescriptor, length must be less than 306.", new [] { "SeparationReasonDescriptor" });
            }

            yield break;
        }
    }

}
