/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiGradebookEntry
    /// </summary>
    [DataContract(Name = "edFi_gradebookEntry")]
    public partial class EdFiGradebookEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradebookEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGradebookEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradebookEntry" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (required).</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (required).</param>
        /// <param name="gradingPeriodReference">gradingPeriodReference.</param>
        /// <param name="sectionReference">sectionReference.</param>
        /// <param name="dateAssigned">The date the assignment, homework, or assessment was assigned or executed. (required).</param>
        /// <param name="description">A description of the assignment, homework, or classroom assessment..</param>
        /// <param name="dueDate">The date the assignment, homework, or assessment is due..</param>
        /// <param name="dueTime">The time the assignment, homework, or assessment is due..</param>
        /// <param name="gradebookEntryTypeDescriptor">The type of the gradebook entry..</param>
        /// <param name="learningStandards">An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the gradebook entry..</param>
        /// <param name="maxPoints">The maximum number of points  that can be earned for the submission..</param>
        /// <param name="sourceSectionIdentifier">The local identifier assigned to a section. (required).</param>
        /// <param name="title">The name or title of the activity to be recorded in the gradebook entry. (required).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the GradebookEntry entity..</param>
        public EdFiGradebookEntry(string id = default, string gradebookEntryIdentifier = default, string varNamespace = default, EdFiGradingPeriodReference gradingPeriodReference = default, EdFiSectionReference sectionReference = default, DateOnly dateAssigned = default, string description = default, DateOnly? dueDate = default, string dueTime = default, string gradebookEntryTypeDescriptor = default, List<EdFiGradebookEntryLearningStandard> learningStandards = default, double? maxPoints = default, string sourceSectionIdentifier = default, string title = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "gradebookEntryIdentifier" is required (not null)
            if (gradebookEntryIdentifier == null)
            {
                throw new ArgumentNullException("gradebookEntryIdentifier is a required property for EdFiGradebookEntry and cannot be null");
            }
            this.GradebookEntryIdentifier = gradebookEntryIdentifier;
            // to ensure "varNamespace" is required (not null)
            if (varNamespace == null)
            {
                throw new ArgumentNullException("varNamespace is a required property for EdFiGradebookEntry and cannot be null");
            }
            this.Namespace = varNamespace;
            this.DateAssigned = dateAssigned;
            // to ensure "sourceSectionIdentifier" is required (not null)
            if (sourceSectionIdentifier == null)
            {
                throw new ArgumentNullException("sourceSectionIdentifier is a required property for EdFiGradebookEntry and cannot be null");
            }
            this.SourceSectionIdentifier = sourceSectionIdentifier;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for EdFiGradebookEntry and cannot be null");
            }
            this.Title = title;
            this.Id = id;
            this.GradingPeriodReference = gradingPeriodReference;
            this.SectionReference = sectionReference;
            this.Description = description;
            this.DueDate = dueDate;
            this.DueTime = dueTime;
            this.GradebookEntryTypeDescriptor = gradebookEntryTypeDescriptor;
            this.LearningStandards = learningStandards;
            this.MaxPoints = maxPoints;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a gradebook entry by the source system.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to a gradebook entry by the source system.</value>
        [DataMember(Name = "gradebookEntryIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string GradebookEntryIdentifier { get; set; }

        /// <summary>
        /// Namespace URI for the source of the gradebook entry.
        /// </summary>
        /// <value>Namespace URI for the source of the gradebook entry.</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// Gets or Sets GradingPeriodReference
        /// </summary>
        [DataMember(Name = "gradingPeriodReference", EmitDefaultValue = false)]
        public EdFiGradingPeriodReference GradingPeriodReference { get; set; }

        /// <summary>
        /// Gets or Sets SectionReference
        /// </summary>
        [DataMember(Name = "sectionReference", EmitDefaultValue = false)]
        public EdFiSectionReference SectionReference { get; set; }

        /// <summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        /// </summary>
        /// <value>The date the assignment, homework, or assessment was assigned or executed.</value>
        [DataMember(Name = "dateAssigned", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly DateAssigned { get; set; }

        /// <summary>
        /// A description of the assignment, homework, or classroom assessment.
        /// </summary>
        /// <value>A description of the assignment, homework, or classroom assessment.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The date the assignment, homework, or assessment is due.
        /// </summary>
        /// <value>The date the assignment, homework, or assessment is due.</value>
        [DataMember(Name = "dueDate", EmitDefaultValue = true)]
        public DateOnly? DueDate { get; set; }

        /// <summary>
        /// The time the assignment, homework, or assessment is due.
        /// </summary>
        /// <value>The time the assignment, homework, or assessment is due.</value>
        [DataMember(Name = "dueTime", EmitDefaultValue = true)]
        public string DueTime { get; set; }

        /// <summary>
        /// The type of the gradebook entry.
        /// </summary>
        /// <value>The type of the gradebook entry.</value>
        [DataMember(Name = "gradebookEntryTypeDescriptor", EmitDefaultValue = true)]
        public string GradebookEntryTypeDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the gradebook entry.
        /// </summary>
        /// <value>An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the gradebook entry.</value>
        [DataMember(Name = "learningStandards", EmitDefaultValue = false)]
        public List<EdFiGradebookEntryLearningStandard> LearningStandards { get; set; }

        /// <summary>
        /// The maximum number of points  that can be earned for the submission.
        /// </summary>
        /// <value>The maximum number of points  that can be earned for the submission.</value>
        [DataMember(Name = "maxPoints", EmitDefaultValue = true)]
        public double? MaxPoints { get; set; }

        /// <summary>
        /// The local identifier assigned to a section.
        /// </summary>
        /// <value>The local identifier assigned to a section.</value>
        [DataMember(Name = "sourceSectionIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string SourceSectionIdentifier { get; set; }

        /// <summary>
        /// The name or title of the activity to be recorded in the gradebook entry.
        /// </summary>
        /// <value>The name or title of the activity to be recorded in the gradebook entry.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the GradebookEntry entity.
        /// </summary>
        /// <value>Extensions to the GradebookEntry entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGradebookEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GradebookEntryIdentifier: ").Append(GradebookEntryIdentifier).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  GradingPeriodReference: ").Append(GradingPeriodReference).Append("\n");
            sb.Append("  SectionReference: ").Append(SectionReference).Append("\n");
            sb.Append("  DateAssigned: ").Append(DateAssigned).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DueTime: ").Append(DueTime).Append("\n");
            sb.Append("  GradebookEntryTypeDescriptor: ").Append(GradebookEntryTypeDescriptor).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  MaxPoints: ").Append(MaxPoints).Append("\n");
            sb.Append("  SourceSectionIdentifier: ").Append(SourceSectionIdentifier).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GradebookEntryIdentifier (string) maxLength
            if (this.GradebookEntryIdentifier != null && this.GradebookEntryIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for GradebookEntryIdentifier, length must be less than 60.", new [] { "GradebookEntryIdentifier" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // GradebookEntryTypeDescriptor (string) maxLength
            if (this.GradebookEntryTypeDescriptor != null && this.GradebookEntryTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradebookEntryTypeDescriptor, length must be less than 306.", new [] { "GradebookEntryTypeDescriptor" });
            }

            // MaxPoints (double?) maximum
            if (this.MaxPoints > (double?)9999999.99)
            {
                yield return new ValidationResult("Invalid value for MaxPoints, must be a value less than or equal to 9999999.99.", new [] { "MaxPoints" });
            }

            // MaxPoints (double?) minimum
            if (this.MaxPoints < (double?)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for MaxPoints, must be a value greater than or equal to -9999999.99.", new [] { "MaxPoints" });
            }

            // SourceSectionIdentifier (string) maxLength
            if (this.SourceSectionIdentifier != null && this.SourceSectionIdentifier.Length > 255)
            {
                yield return new ValidationResult("Invalid value for SourceSectionIdentifier, length must be less than 255.", new [] { "SourceSectionIdentifier" });
            }

            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 100.", new [] { "Title" });
            }

            yield break;
        }
    }

}
