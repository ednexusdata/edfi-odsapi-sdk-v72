/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiLocalAccount
    /// </summary>
    [DataContract(Name = "edFi_localAccount")]
    public partial class EdFiLocalAccount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLocalAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiLocalAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLocalAccount" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="accountIdentifier">Code value for the valid combination of account dimensions by LEA under which financials are reported. (required).</param>
        /// <param name="fiscalYear">The fiscal year for the account. (required).</param>
        /// <param name="chartOfAccountReference">chartOfAccountReference (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="accountName">A descriptive name for the account..</param>
        /// <param name="reportingTags">An unordered collection of localAccountReportingTags. Optional tag for accountability reporting..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the LocalAccount entity..</param>
        public EdFiLocalAccount(string id = default, string accountIdentifier = default, int fiscalYear = default, EdFiChartOfAccountReference chartOfAccountReference = default, EdFiEducationOrganizationReference educationOrganizationReference = default, string accountName = default, List<EdFiLocalAccountReportingTag> reportingTags = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "accountIdentifier" is required (not null)
            if (accountIdentifier == null)
            {
                throw new ArgumentNullException("accountIdentifier is a required property for EdFiLocalAccount and cannot be null");
            }
            this.AccountIdentifier = accountIdentifier;
            this.FiscalYear = fiscalYear;
            // to ensure "chartOfAccountReference" is required (not null)
            if (chartOfAccountReference == null)
            {
                throw new ArgumentNullException("chartOfAccountReference is a required property for EdFiLocalAccount and cannot be null");
            }
            this.ChartOfAccountReference = chartOfAccountReference;
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new ArgumentNullException("educationOrganizationReference is a required property for EdFiLocalAccount and cannot be null");
            }
            this.EducationOrganizationReference = educationOrganizationReference;
            this.Id = id;
            this.AccountName = accountName;
            this.ReportingTags = reportingTags;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Code value for the valid combination of account dimensions by LEA under which financials are reported.
        /// </summary>
        /// <value>Code value for the valid combination of account dimensions by LEA under which financials are reported.</value>
        [DataMember(Name = "accountIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string AccountIdentifier { get; set; }

        /// <summary>
        /// The fiscal year for the account.
        /// </summary>
        /// <value>The fiscal year for the account.</value>
        [DataMember(Name = "fiscalYear", IsRequired = true, EmitDefaultValue = true)]
        public int FiscalYear { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccountReference
        /// </summary>
        [DataMember(Name = "chartOfAccountReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiChartOfAccountReference ChartOfAccountReference { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// A descriptive name for the account.
        /// </summary>
        /// <value>A descriptive name for the account.</value>
        [DataMember(Name = "accountName", EmitDefaultValue = true)]
        public string AccountName { get; set; }

        /// <summary>
        /// An unordered collection of localAccountReportingTags. Optional tag for accountability reporting.
        /// </summary>
        /// <value>An unordered collection of localAccountReportingTags. Optional tag for accountability reporting.</value>
        [DataMember(Name = "reportingTags", EmitDefaultValue = false)]
        public List<EdFiLocalAccountReportingTag> ReportingTags { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the LocalAccount entity.
        /// </summary>
        /// <value>Extensions to the LocalAccount entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLocalAccount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountIdentifier: ").Append(AccountIdentifier).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  ChartOfAccountReference: ").Append(ChartOfAccountReference).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  ReportingTags: ").Append(ReportingTags).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountIdentifier (string) maxLength
            if (this.AccountIdentifier != null && this.AccountIdentifier.Length > 50)
            {
                yield return new ValidationResult("Invalid value for AccountIdentifier, length must be less than 50.", new [] { "AccountIdentifier" });
            }

            // FiscalYear (int) maximum
            if (this.FiscalYear > (int)2040)
            {
                yield return new ValidationResult("Invalid value for FiscalYear, must be a value less than or equal to 2040.", new [] { "FiscalYear" });
            }

            // FiscalYear (int) minimum
            if (this.FiscalYear < (int)2020)
            {
                yield return new ValidationResult("Invalid value for FiscalYear, must be a value greater than or equal to 2020.", new [] { "FiscalYear" });
            }

            // AccountName (string) maxLength
            if (this.AccountName != null && this.AccountName.Length > 100)
            {
                yield return new ValidationResult("Invalid value for AccountName, length must be less than 100.", new [] { "AccountName" });
            }

            yield break;
        }
    }

}
