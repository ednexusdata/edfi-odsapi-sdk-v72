/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentSectionAssociation
    /// </summary>
    [DataContract(Name = "edFi_studentSectionAssociation")]
    public partial class EdFiStudentSectionAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentSectionAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentSectionAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentSectionAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="beginDate">Month, day, and year of the student&#39;s entry or assignment to the section. (required).</param>
        /// <param name="sectionReference">sectionReference (required).</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="attemptStatusDescriptor">An indication of the student&#39;s completion status for the section..</param>
        /// <param name="endDate">Month, day, and year of the withdrawal or exit of the student from the section..</param>
        /// <param name="homeroomIndicator">Indicates the section is the student&#39;s homeroom. Homeroom period may the convention for taking daily attendance..</param>
        /// <param name="programs">An unordered collection of studentSectionAssociationPrograms. The program(s) that the student is participating in the context of the course..</param>
        /// <param name="repeatIdentifierDescriptor">An indication as to whether a student has previously taken a given course..</param>
        /// <param name="teacherStudentDataLinkExclusion">Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the StudentSectionAssociation entity..</param>
        public EdFiStudentSectionAssociation(string id = default, DateOnly beginDate = default, EdFiSectionReference sectionReference = default, EdFiStudentReference studentReference = default, string attemptStatusDescriptor = default, DateOnly? endDate = default, bool? homeroomIndicator = default, List<EdFiStudentSectionAssociationProgram> programs = default, string repeatIdentifierDescriptor = default, bool? teacherStudentDataLinkExclusion = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            this.BeginDate = beginDate;
            // to ensure "sectionReference" is required (not null)
            if (sectionReference == null)
            {
                throw new ArgumentNullException("sectionReference is a required property for EdFiStudentSectionAssociation and cannot be null");
            }
            this.SectionReference = sectionReference;
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new ArgumentNullException("studentReference is a required property for EdFiStudentSectionAssociation and cannot be null");
            }
            this.StudentReference = studentReference;
            this.Id = id;
            this.AttemptStatusDescriptor = attemptStatusDescriptor;
            this.EndDate = endDate;
            this.HomeroomIndicator = homeroomIndicator;
            this.Programs = programs;
            this.RepeatIdentifierDescriptor = repeatIdentifierDescriptor;
            this.TeacherStudentDataLinkExclusion = teacherStudentDataLinkExclusion;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Month, day, and year of the student&#39;s entry or assignment to the section.
        /// </summary>
        /// <value>Month, day, and year of the student&#39;s entry or assignment to the section.</value>
        [DataMember(Name = "beginDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets SectionReference
        /// </summary>
        [DataMember(Name = "sectionReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSectionReference SectionReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name = "studentReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// An indication of the student&#39;s completion status for the section.
        /// </summary>
        /// <value>An indication of the student&#39;s completion status for the section.</value>
        [DataMember(Name = "attemptStatusDescriptor", EmitDefaultValue = true)]
        public string AttemptStatusDescriptor { get; set; }

        /// <summary>
        /// Month, day, and year of the withdrawal or exit of the student from the section.
        /// </summary>
        /// <value>Month, day, and year of the withdrawal or exit of the student from the section.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateOnly? EndDate { get; set; }

        /// <summary>
        /// Indicates the section is the student&#39;s homeroom. Homeroom period may the convention for taking daily attendance.
        /// </summary>
        /// <value>Indicates the section is the student&#39;s homeroom. Homeroom period may the convention for taking daily attendance.</value>
        [DataMember(Name = "homeroomIndicator", EmitDefaultValue = true)]
        public bool? HomeroomIndicator { get; set; }

        /// <summary>
        /// An unordered collection of studentSectionAssociationPrograms. The program(s) that the student is participating in the context of the course.
        /// </summary>
        /// <value>An unordered collection of studentSectionAssociationPrograms. The program(s) that the student is participating in the context of the course.</value>
        [DataMember(Name = "programs", EmitDefaultValue = false)]
        public List<EdFiStudentSectionAssociationProgram> Programs { get; set; }

        /// <summary>
        /// An indication as to whether a student has previously taken a given course.
        /// </summary>
        /// <value>An indication as to whether a student has previously taken a given course.</value>
        [DataMember(Name = "repeatIdentifierDescriptor", EmitDefaultValue = true)]
        public string RepeatIdentifierDescriptor { get; set; }

        /// <summary>
        /// Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.
        /// </summary>
        /// <value>Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.</value>
        [DataMember(Name = "teacherStudentDataLinkExclusion", EmitDefaultValue = true)]
        public bool? TeacherStudentDataLinkExclusion { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the StudentSectionAssociation entity.
        /// </summary>
        /// <value>Extensions to the StudentSectionAssociation entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentSectionAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  SectionReference: ").Append(SectionReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  AttemptStatusDescriptor: ").Append(AttemptStatusDescriptor).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  HomeroomIndicator: ").Append(HomeroomIndicator).Append("\n");
            sb.Append("  Programs: ").Append(Programs).Append("\n");
            sb.Append("  RepeatIdentifierDescriptor: ").Append(RepeatIdentifierDescriptor).Append("\n");
            sb.Append("  TeacherStudentDataLinkExclusion: ").Append(TeacherStudentDataLinkExclusion).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AttemptStatusDescriptor (string) maxLength
            if (this.AttemptStatusDescriptor != null && this.AttemptStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AttemptStatusDescriptor, length must be less than 306.", new [] { "AttemptStatusDescriptor" });
            }

            // RepeatIdentifierDescriptor (string) maxLength
            if (this.RepeatIdentifierDescriptor != null && this.RepeatIdentifierDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for RepeatIdentifierDescriptor, length must be less than 306.", new [] { "RepeatIdentifierDescriptor" });
            }

            yield break;
        }
    }

}
