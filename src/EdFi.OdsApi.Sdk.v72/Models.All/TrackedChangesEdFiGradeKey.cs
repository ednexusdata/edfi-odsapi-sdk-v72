/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiGradeKey
    /// </summary>
    [DataContract(Name = "trackedChanges_edFi_gradeKey")]
    public partial class TrackedChangesEdFiGradeKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiGradeKey" /> class.
        /// </summary>
        /// <param name="gradeTypeDescriptor">The type of grade reported (e.g., exam, final, grading period)..</param>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported..</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period..</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication..</param>
        /// <param name="gradingPeriodSchoolYear">The identifier for the grading period school year..</param>
        /// <param name="beginDate">Month, day, and year of the student&#39;s entry or assignment to the section..</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students..</param>
        /// <param name="schoolYear">The identifier for the school year..</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section..</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session..</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student..</param>
        public TrackedChangesEdFiGradeKey(string gradeTypeDescriptor = default, string gradingPeriodDescriptor = default, string gradingPeriodName = default, long schoolId = default, int gradingPeriodSchoolYear = default, DateOnly beginDate = default, string localCourseCode = default, int schoolYear = default, string sectionIdentifier = default, string sessionName = default, string studentUniqueId = default)
        {
            this.GradeTypeDescriptor = gradeTypeDescriptor;
            this.GradingPeriodDescriptor = gradingPeriodDescriptor;
            this.GradingPeriodName = gradingPeriodName;
            this.SchoolId = schoolId;
            this.GradingPeriodSchoolYear = gradingPeriodSchoolYear;
            this.BeginDate = beginDate;
            this.LocalCourseCode = localCourseCode;
            this.SchoolYear = schoolYear;
            this.SectionIdentifier = sectionIdentifier;
            this.SessionName = sessionName;
            this.StudentUniqueId = studentUniqueId;
        }

        /// <summary>
        /// The type of grade reported (e.g., exam, final, grading period).
        /// </summary>
        /// <value>The type of grade reported (e.g., exam, final, grading period).</value>
        [DataMember(Name = "gradeTypeDescriptor", EmitDefaultValue = false)]
        public string GradeTypeDescriptor { get; set; }

        /// <summary>
        /// The state&#39;s name of the period for which grades are reported.
        /// </summary>
        /// <value>The state&#39;s name of the period for which grades are reported.</value>
        [DataMember(Name = "gradingPeriodDescriptor", EmitDefaultValue = false)]
        public string GradingPeriodDescriptor { get; set; }

        /// <summary>
        /// The school&#39;s descriptive name of the grading period.
        /// </summary>
        /// <value>The school&#39;s descriptive name of the grading period.</value>
        [DataMember(Name = "gradingPeriodName", EmitDefaultValue = false)]
        public string GradingPeriodName { get; set; }

        /// <summary>
        /// The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.
        /// </summary>
        /// <value>The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.</value>
        [DataMember(Name = "schoolId", EmitDefaultValue = false)]
        public long SchoolId { get; set; }

        /// <summary>
        /// The identifier for the grading period school year.
        /// </summary>
        /// <value>The identifier for the grading period school year.</value>
        [DataMember(Name = "gradingPeriodSchoolYear", EmitDefaultValue = false)]
        public int GradingPeriodSchoolYear { get; set; }

        /// <summary>
        /// Month, day, and year of the student&#39;s entry or assignment to the section.
        /// </summary>
        /// <value>Month, day, and year of the student&#39;s entry or assignment to the section.</value>
        [DataMember(Name = "beginDate", EmitDefaultValue = false)]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        /// <value>The local code assigned by the School that identifies the course offering provided for the instruction of students.</value>
        [DataMember(Name = "localCourseCode", EmitDefaultValue = false)]
        public string LocalCourseCode { get; set; }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        /// <value>The identifier for the school year.</value>
        [DataMember(Name = "schoolYear", EmitDefaultValue = false)]
        public int SchoolYear { get; set; }

        /// <summary>
        /// The local identifier assigned to a section.
        /// </summary>
        /// <value>The local identifier assigned to a section.</value>
        [DataMember(Name = "sectionIdentifier", EmitDefaultValue = false)]
        public string SectionIdentifier { get; set; }

        /// <summary>
        /// The identifier for the calendar for the academic session.
        /// </summary>
        /// <value>The identifier for the calendar for the academic session.</value>
        [DataMember(Name = "sessionName", EmitDefaultValue = false)]
        public string SessionName { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [DataMember(Name = "studentUniqueId", EmitDefaultValue = false)]
        public string StudentUniqueId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiGradeKey {\n");
            sb.Append("  GradeTypeDescriptor: ").Append(GradeTypeDescriptor).Append("\n");
            sb.Append("  GradingPeriodDescriptor: ").Append(GradingPeriodDescriptor).Append("\n");
            sb.Append("  GradingPeriodName: ").Append(GradingPeriodName).Append("\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("  GradingPeriodSchoolYear: ").Append(GradingPeriodSchoolYear).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  LocalCourseCode: ").Append(LocalCourseCode).Append("\n");
            sb.Append("  SchoolYear: ").Append(SchoolYear).Append("\n");
            sb.Append("  SectionIdentifier: ").Append(SectionIdentifier).Append("\n");
            sb.Append("  SessionName: ").Append(SessionName).Append("\n");
            sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GradeTypeDescriptor (string) maxLength
            if (this.GradeTypeDescriptor != null && this.GradeTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradeTypeDescriptor, length must be less than 306.", new [] { "GradeTypeDescriptor" });
            }

            // GradingPeriodDescriptor (string) maxLength
            if (this.GradingPeriodDescriptor != null && this.GradingPeriodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradingPeriodDescriptor, length must be less than 306.", new [] { "GradingPeriodDescriptor" });
            }

            // GradingPeriodName (string) maxLength
            if (this.GradingPeriodName != null && this.GradingPeriodName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for GradingPeriodName, length must be less than 60.", new [] { "GradingPeriodName" });
            }

            // LocalCourseCode (string) maxLength
            if (this.LocalCourseCode != null && this.LocalCourseCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LocalCourseCode, length must be less than 60.", new [] { "LocalCourseCode" });
            }

            // SectionIdentifier (string) maxLength
            if (this.SectionIdentifier != null && this.SectionIdentifier.Length > 255)
            {
                yield return new ValidationResult("Invalid value for SectionIdentifier, length must be less than 255.", new [] { "SectionIdentifier" });
            }

            // SessionName (string) maxLength
            if (this.SessionName != null && this.SessionName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SessionName, length must be less than 60.", new [] { "SessionName" });
            }

            // StudentUniqueId (string) maxLength
            if (this.StudentUniqueId != null && this.StudentUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new [] { "StudentUniqueId" });
            }

            yield break;
        }
    }

}
