/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiSurveyQuestionResponseChoice
    /// </summary>
    [DataContract(Name = "edFi_surveyQuestionResponseChoice")]
    public partial class EdFiSurveyQuestionResponseChoice : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestionResponseChoice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurveyQuestionResponseChoice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestionResponseChoice" /> class.
        /// </summary>
        /// <param name="sortOrder">Sort order of this ResponseChoice within the complete list of choices attached to a SurveyQuestion. If sort order doesn&#39;t apply, the value of NumericValue or a unique, possibly sequential numeric value. (required).</param>
        /// <param name="numericValue">A valid numeric response. If paired with a TextValue, the numeric equivalent of the TextValue..</param>
        /// <param name="textValue">A valid text response. If paired with a NumericValue, the text equivalent of the NumericValue..</param>
        /// <param name="ext">Extensions to the SurveyQuestionResponseChoice entity..</param>
        public EdFiSurveyQuestionResponseChoice(int sortOrder = default, int? numericValue = default, string textValue = default, Object ext = default)
        {
            this.SortOrder = sortOrder;
            this.NumericValue = numericValue;
            this.TextValue = textValue;
            this.Ext = ext;
        }

        /// <summary>
        /// Sort order of this ResponseChoice within the complete list of choices attached to a SurveyQuestion. If sort order doesn&#39;t apply, the value of NumericValue or a unique, possibly sequential numeric value.
        /// </summary>
        /// <value>Sort order of this ResponseChoice within the complete list of choices attached to a SurveyQuestion. If sort order doesn&#39;t apply, the value of NumericValue or a unique, possibly sequential numeric value.</value>
        [DataMember(Name = "sortOrder", IsRequired = true, EmitDefaultValue = true)]
        public int SortOrder { get; set; }

        /// <summary>
        /// A valid numeric response. If paired with a TextValue, the numeric equivalent of the TextValue.
        /// </summary>
        /// <value>A valid numeric response. If paired with a TextValue, the numeric equivalent of the TextValue.</value>
        [DataMember(Name = "numericValue", EmitDefaultValue = true)]
        public int? NumericValue { get; set; }

        /// <summary>
        /// A valid text response. If paired with a NumericValue, the text equivalent of the NumericValue.
        /// </summary>
        /// <value>A valid text response. If paired with a NumericValue, the text equivalent of the NumericValue.</value>
        [DataMember(Name = "textValue", EmitDefaultValue = true)]
        public string TextValue { get; set; }

        /// <summary>
        /// Extensions to the SurveyQuestionResponseChoice entity.
        /// </summary>
        /// <value>Extensions to the SurveyQuestionResponseChoice entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveyQuestionResponseChoice {\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  NumericValue: ").Append(NumericValue).Append("\n");
            sb.Append("  TextValue: ").Append(TextValue).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumericValue (int?) maximum
            if (this.NumericValue > (int?)100)
            {
                yield return new ValidationResult("Invalid value for NumericValue, must be a value less than or equal to 100.", new [] { "NumericValue" });
            }

            // NumericValue (int?) minimum
            if (this.NumericValue < (int?)0)
            {
                yield return new ValidationResult("Invalid value for NumericValue, must be a value greater than or equal to 0.", new [] { "NumericValue" });
            }

            // TextValue (string) maxLength
            if (this.TextValue != null && this.TextValue.Length > 255)
            {
                yield return new ValidationResult("Invalid value for TextValue, length must be less than 255.", new [] { "TextValue" });
            }

            yield break;
        }
    }

}
