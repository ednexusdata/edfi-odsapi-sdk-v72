/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiClassPeriod
    /// </summary>
    [DataContract(Name = "edFi_classPeriod")]
    public partial class EdFiClassPeriod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiClassPeriod" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiClassPeriod() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiClassPeriod" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="classPeriodName">An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules). (required).</param>
        /// <param name="schoolReference">schoolReference (required).</param>
        /// <param name="meetingTimes">An unordered collection of classPeriodMeetingTimes. The meeting time(s) for a class period..</param>
        /// <param name="officialAttendancePeriod">Indicator of whether this class period is used for official daily attendance. Alternatively, official daily attendance may be tied to a section..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the ClassPeriod entity..</param>
        public EdFiClassPeriod(string id = default, string classPeriodName = default, EdFiSchoolReference schoolReference = default, List<EdFiClassPeriodMeetingTime> meetingTimes = default, bool? officialAttendancePeriod = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "classPeriodName" is required (not null)
            if (classPeriodName == null)
            {
                throw new ArgumentNullException("classPeriodName is a required property for EdFiClassPeriod and cannot be null");
            }
            this.ClassPeriodName = classPeriodName;
            // to ensure "schoolReference" is required (not null)
            if (schoolReference == null)
            {
                throw new ArgumentNullException("schoolReference is a required property for EdFiClassPeriod and cannot be null");
            }
            this.SchoolReference = schoolReference;
            this.Id = id;
            this.MeetingTimes = meetingTimes;
            this.OfficialAttendancePeriod = officialAttendancePeriod;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        /// <value>An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).</value>
        [DataMember(Name = "classPeriodName", IsRequired = true, EmitDefaultValue = true)]
        public string ClassPeriodName { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [DataMember(Name = "schoolReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// An unordered collection of classPeriodMeetingTimes. The meeting time(s) for a class period.
        /// </summary>
        /// <value>An unordered collection of classPeriodMeetingTimes. The meeting time(s) for a class period.</value>
        [DataMember(Name = "meetingTimes", EmitDefaultValue = false)]
        public List<EdFiClassPeriodMeetingTime> MeetingTimes { get; set; }

        /// <summary>
        /// Indicator of whether this class period is used for official daily attendance. Alternatively, official daily attendance may be tied to a section.
        /// </summary>
        /// <value>Indicator of whether this class period is used for official daily attendance. Alternatively, official daily attendance may be tied to a section.</value>
        [DataMember(Name = "officialAttendancePeriod", EmitDefaultValue = true)]
        public bool? OfficialAttendancePeriod { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the ClassPeriod entity.
        /// </summary>
        /// <value>Extensions to the ClassPeriod entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiClassPeriod {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ClassPeriodName: ").Append(ClassPeriodName).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  MeetingTimes: ").Append(MeetingTimes).Append("\n");
            sb.Append("  OfficialAttendancePeriod: ").Append(OfficialAttendancePeriod).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClassPeriodName (string) maxLength
            if (this.ClassPeriodName != null && this.ClassPeriodName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ClassPeriodName, length must be less than 60.", new [] { "ClassPeriodName" });
            }

            yield break;
        }
    }

}
