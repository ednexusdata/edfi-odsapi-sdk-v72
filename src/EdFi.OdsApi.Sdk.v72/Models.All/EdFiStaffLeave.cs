/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStaffLeave
    /// </summary>
    [DataContract(Name = "edFi_staffLeave")]
    public partial class EdFiStaffLeave : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffLeave" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaffLeave() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffLeave" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="beginDate">The begin date of the staff leave. (required).</param>
        /// <param name="staffLeaveEventCategoryDescriptor">The code describing the type of leave taken. (required).</param>
        /// <param name="staffReference">staffReference (required).</param>
        /// <param name="endDate">The end date of the staff leave..</param>
        /// <param name="reason">Expanded reason for the staff leave..</param>
        /// <param name="substituteAssigned">Indicator of whether a substitute was assigned during the period of staff leave..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the StaffLeave entity..</param>
        public EdFiStaffLeave(string id = default, DateOnly beginDate = default, string staffLeaveEventCategoryDescriptor = default, EdFiStaffReference staffReference = default, DateOnly? endDate = default, string reason = default, bool? substituteAssigned = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            this.BeginDate = beginDate;
            // to ensure "staffLeaveEventCategoryDescriptor" is required (not null)
            if (staffLeaveEventCategoryDescriptor == null)
            {
                throw new ArgumentNullException("staffLeaveEventCategoryDescriptor is a required property for EdFiStaffLeave and cannot be null");
            }
            this.StaffLeaveEventCategoryDescriptor = staffLeaveEventCategoryDescriptor;
            // to ensure "staffReference" is required (not null)
            if (staffReference == null)
            {
                throw new ArgumentNullException("staffReference is a required property for EdFiStaffLeave and cannot be null");
            }
            this.StaffReference = staffReference;
            this.Id = id;
            this.EndDate = endDate;
            this.Reason = reason;
            this.SubstituteAssigned = substituteAssigned;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The begin date of the staff leave.
        /// </summary>
        /// <value>The begin date of the staff leave.</value>
        [DataMember(Name = "beginDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// The code describing the type of leave taken.
        /// </summary>
        /// <value>The code describing the type of leave taken.</value>
        [DataMember(Name = "staffLeaveEventCategoryDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string StaffLeaveEventCategoryDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name = "staffReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// The end date of the staff leave.
        /// </summary>
        /// <value>The end date of the staff leave.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateOnly? EndDate { get; set; }

        /// <summary>
        /// Expanded reason for the staff leave.
        /// </summary>
        /// <value>Expanded reason for the staff leave.</value>
        [DataMember(Name = "reason", EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Indicator of whether a substitute was assigned during the period of staff leave.
        /// </summary>
        /// <value>Indicator of whether a substitute was assigned during the period of staff leave.</value>
        [DataMember(Name = "substituteAssigned", EmitDefaultValue = true)]
        public bool? SubstituteAssigned { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the StaffLeave entity.
        /// </summary>
        /// <value>Extensions to the StaffLeave entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffLeave {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  StaffLeaveEventCategoryDescriptor: ").Append(StaffLeaveEventCategoryDescriptor).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  SubstituteAssigned: ").Append(SubstituteAssigned).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StaffLeaveEventCategoryDescriptor (string) maxLength
            if (this.StaffLeaveEventCategoryDescriptor != null && this.StaffLeaveEventCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for StaffLeaveEventCategoryDescriptor, length must be less than 306.", new [] { "StaffLeaveEventCategoryDescriptor" });
            }

            // Reason (string) maxLength
            if (this.Reason != null && this.Reason.Length > 40)
            {
                yield return new ValidationResult("Invalid value for Reason, length must be less than 40.", new [] { "Reason" });
            }

            yield break;
        }
    }

}
