/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentGradebookEntry
    /// </summary>
    [DataContract(Name = "edFi_studentGradebookEntry")]
    public partial class EdFiStudentGradebookEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentGradebookEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentGradebookEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentGradebookEntry" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="gradebookEntryReference">gradebookEntryReference (required).</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="assignmentLateStatusDescriptor">Status of whether the assignment was submitted after the due date and/or marked as..</param>
        /// <param name="competencyLevelDescriptor">The competency level assessed for the student for the referenced learning objective..</param>
        /// <param name="dateFulfilled">The date an assignment was turned in or the date of an assessment..</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score..</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor..</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor..</param>
        /// <param name="pointsEarned">The points earned for the submission. With extra credit, the points earned may exceed the max points..</param>
        /// <param name="submissionStatusDescriptor">The status of the student&#39;s submission..</param>
        /// <param name="timeFulfilled">The time an assignment was turned in on the date fulfilled..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the StudentGradebookEntry entity..</param>
        public EdFiStudentGradebookEntry(string id = default, EdFiGradebookEntryReference gradebookEntryReference = default, EdFiStudentReference studentReference = default, string assignmentLateStatusDescriptor = default, string competencyLevelDescriptor = default, DateOnly? dateFulfilled = default, string diagnosticStatement = default, string letterGradeEarned = default, double? numericGradeEarned = default, double? pointsEarned = default, string submissionStatusDescriptor = default, string timeFulfilled = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "gradebookEntryReference" is required (not null)
            if (gradebookEntryReference == null)
            {
                throw new ArgumentNullException("gradebookEntryReference is a required property for EdFiStudentGradebookEntry and cannot be null");
            }
            this.GradebookEntryReference = gradebookEntryReference;
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new ArgumentNullException("studentReference is a required property for EdFiStudentGradebookEntry and cannot be null");
            }
            this.StudentReference = studentReference;
            this.Id = id;
            this.AssignmentLateStatusDescriptor = assignmentLateStatusDescriptor;
            this.CompetencyLevelDescriptor = competencyLevelDescriptor;
            this.DateFulfilled = dateFulfilled;
            this.DiagnosticStatement = diagnosticStatement;
            this.LetterGradeEarned = letterGradeEarned;
            this.NumericGradeEarned = numericGradeEarned;
            this.PointsEarned = pointsEarned;
            this.SubmissionStatusDescriptor = submissionStatusDescriptor;
            this.TimeFulfilled = timeFulfilled;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets GradebookEntryReference
        /// </summary>
        [DataMember(Name = "gradebookEntryReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiGradebookEntryReference GradebookEntryReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name = "studentReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Status of whether the assignment was submitted after the due date and/or marked as.
        /// </summary>
        /// <value>Status of whether the assignment was submitted after the due date and/or marked as.</value>
        [DataMember(Name = "assignmentLateStatusDescriptor", EmitDefaultValue = true)]
        public string AssignmentLateStatusDescriptor { get; set; }

        /// <summary>
        /// The competency level assessed for the student for the referenced learning objective.
        /// </summary>
        /// <value>The competency level assessed for the student for the referenced learning objective.</value>
        [DataMember(Name = "competencyLevelDescriptor", EmitDefaultValue = true)]
        public string CompetencyLevelDescriptor { get; set; }

        /// <summary>
        /// The date an assignment was turned in or the date of an assessment.
        /// </summary>
        /// <value>The date an assignment was turned in or the date of an assessment.</value>
        [DataMember(Name = "dateFulfilled", EmitDefaultValue = true)]
        public DateOnly? DateFulfilled { get; set; }

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        /// <value>A statement provided by the teacher that provides information in addition to the grade or assessment score.</value>
        [DataMember(Name = "diagnosticStatement", EmitDefaultValue = true)]
        public string DiagnosticStatement { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</value>
        [DataMember(Name = "letterGradeEarned", EmitDefaultValue = true)]
        public string LetterGradeEarned { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</value>
        [DataMember(Name = "numericGradeEarned", EmitDefaultValue = true)]
        public double? NumericGradeEarned { get; set; }

        /// <summary>
        /// The points earned for the submission. With extra credit, the points earned may exceed the max points.
        /// </summary>
        /// <value>The points earned for the submission. With extra credit, the points earned may exceed the max points.</value>
        [DataMember(Name = "pointsEarned", EmitDefaultValue = true)]
        public double? PointsEarned { get; set; }

        /// <summary>
        /// The status of the student&#39;s submission.
        /// </summary>
        /// <value>The status of the student&#39;s submission.</value>
        [DataMember(Name = "submissionStatusDescriptor", EmitDefaultValue = true)]
        public string SubmissionStatusDescriptor { get; set; }

        /// <summary>
        /// The time an assignment was turned in on the date fulfilled.
        /// </summary>
        /// <value>The time an assignment was turned in on the date fulfilled.</value>
        [DataMember(Name = "timeFulfilled", EmitDefaultValue = true)]
        public string TimeFulfilled { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the StudentGradebookEntry entity.
        /// </summary>
        /// <value>Extensions to the StudentGradebookEntry entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentGradebookEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GradebookEntryReference: ").Append(GradebookEntryReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  AssignmentLateStatusDescriptor: ").Append(AssignmentLateStatusDescriptor).Append("\n");
            sb.Append("  CompetencyLevelDescriptor: ").Append(CompetencyLevelDescriptor).Append("\n");
            sb.Append("  DateFulfilled: ").Append(DateFulfilled).Append("\n");
            sb.Append("  DiagnosticStatement: ").Append(DiagnosticStatement).Append("\n");
            sb.Append("  LetterGradeEarned: ").Append(LetterGradeEarned).Append("\n");
            sb.Append("  NumericGradeEarned: ").Append(NumericGradeEarned).Append("\n");
            sb.Append("  PointsEarned: ").Append(PointsEarned).Append("\n");
            sb.Append("  SubmissionStatusDescriptor: ").Append(SubmissionStatusDescriptor).Append("\n");
            sb.Append("  TimeFulfilled: ").Append(TimeFulfilled).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssignmentLateStatusDescriptor (string) maxLength
            if (this.AssignmentLateStatusDescriptor != null && this.AssignmentLateStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AssignmentLateStatusDescriptor, length must be less than 306.", new [] { "AssignmentLateStatusDescriptor" });
            }

            // CompetencyLevelDescriptor (string) maxLength
            if (this.CompetencyLevelDescriptor != null && this.CompetencyLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CompetencyLevelDescriptor, length must be less than 306.", new [] { "CompetencyLevelDescriptor" });
            }

            // DiagnosticStatement (string) maxLength
            if (this.DiagnosticStatement != null && this.DiagnosticStatement.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for DiagnosticStatement, length must be less than 1024.", new [] { "DiagnosticStatement" });
            }

            // LetterGradeEarned (string) maxLength
            if (this.LetterGradeEarned != null && this.LetterGradeEarned.Length > 20)
            {
                yield return new ValidationResult("Invalid value for LetterGradeEarned, length must be less than 20.", new [] { "LetterGradeEarned" });
            }

            // NumericGradeEarned (double?) maximum
            if (this.NumericGradeEarned > (double?)9999999.99)
            {
                yield return new ValidationResult("Invalid value for NumericGradeEarned, must be a value less than or equal to 9999999.99.", new [] { "NumericGradeEarned" });
            }

            // NumericGradeEarned (double?) minimum
            if (this.NumericGradeEarned < (double?)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for NumericGradeEarned, must be a value greater than or equal to -9999999.99.", new [] { "NumericGradeEarned" });
            }

            // PointsEarned (double?) maximum
            if (this.PointsEarned > (double?)9999999.99)
            {
                yield return new ValidationResult("Invalid value for PointsEarned, must be a value less than or equal to 9999999.99.", new [] { "PointsEarned" });
            }

            // PointsEarned (double?) minimum
            if (this.PointsEarned < (double?)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for PointsEarned, must be a value greater than or equal to -9999999.99.", new [] { "PointsEarned" });
            }

            // SubmissionStatusDescriptor (string) maxLength
            if (this.SubmissionStatusDescriptor != null && this.SubmissionStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SubmissionStatusDescriptor, length must be less than 306.", new [] { "SubmissionStatusDescriptor" });
            }

            yield break;
        }
    }

}
