/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiLearningStandard
    /// </summary>
    [DataContract(Name = "edFi_learningStandard")]
    public partial class EdFiLearningStandard : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningStandard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiLearningStandard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningStandard" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="academicSubjects">An unordered collection of learningStandardAcademicSubjects. Subject area for the learning standard. (required).</param>
        /// <param name="gradeLevels">An unordered collection of learningStandardGradeLevels. The grade levels for the specific learning standard. (required).</param>
        /// <param name="learningStandardId">The identifier for the specific learning standard (e.g., 111.15.3.1.A). (required).</param>
        /// <param name="parentLearningStandardReference">parentLearningStandardReference.</param>
        /// <param name="contentStandard">contentStandard (required).</param>
        /// <param name="courseTitle">The official course title with which this learning standard is associated..</param>
        /// <param name="description">The text of the statement. The textual content that either describes a specific competency such as \&quot;Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.\&quot; or describes a less granular group of competencies within the taxonomy of the standards document, e.g. \&quot;Understand and apply the Pythagorean Theorem,\&quot; or \&quot;Geometry\&quot;. (required).</param>
        /// <param name="identificationCodes">An unordered collection of learningStandardIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard..</param>
        /// <param name="learningStandardCategoryDescriptor">An additional classification of the type of a specific learning standard..</param>
        /// <param name="learningStandardItemCode">A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique)..</param>
        /// <param name="learningStandardScopeDescriptor">Signals the scope of usage the standard. Does not necessarily relate the standard to the governing body..</param>
        /// <param name="varNamespace">The namespace of the organization or entity who governs the standard. It is recommended the namespaces observe a URI format and begin with a domain name under the governing organization or entity control. (required).</param>
        /// <param name="successCriteria">One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning standard..</param>
        /// <param name="uri">An unambiguous reference to the statement using a network-resolvable URI..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the LearningStandard entity..</param>
        public EdFiLearningStandard(string id = default, List<EdFiLearningStandardAcademicSubject> academicSubjects = default, List<EdFiLearningStandardGradeLevel> gradeLevels = default, string learningStandardId = default, EdFiLearningStandardReference parentLearningStandardReference = default, EdFiLearningStandardContentStandard contentStandard = default, string courseTitle = default, string description = default, List<EdFiLearningStandardIdentificationCode> identificationCodes = default, string learningStandardCategoryDescriptor = default, string learningStandardItemCode = default, string learningStandardScopeDescriptor = default, string varNamespace = default, string successCriteria = default, string uri = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "academicSubjects" is required (not null)
            if (academicSubjects == null)
            {
                throw new ArgumentNullException("academicSubjects is a required property for EdFiLearningStandard and cannot be null");
            }
            this.AcademicSubjects = academicSubjects;
            // to ensure "gradeLevels" is required (not null)
            if (gradeLevels == null)
            {
                throw new ArgumentNullException("gradeLevels is a required property for EdFiLearningStandard and cannot be null");
            }
            this.GradeLevels = gradeLevels;
            // to ensure "learningStandardId" is required (not null)
            if (learningStandardId == null)
            {
                throw new ArgumentNullException("learningStandardId is a required property for EdFiLearningStandard and cannot be null");
            }
            this.LearningStandardId = learningStandardId;
            // to ensure "contentStandard" is required (not null)
            if (contentStandard == null)
            {
                throw new ArgumentNullException("contentStandard is a required property for EdFiLearningStandard and cannot be null");
            }
            this.ContentStandard = contentStandard;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for EdFiLearningStandard and cannot be null");
            }
            this.Description = description;
            // to ensure "varNamespace" is required (not null)
            if (varNamespace == null)
            {
                throw new ArgumentNullException("varNamespace is a required property for EdFiLearningStandard and cannot be null");
            }
            this.Namespace = varNamespace;
            this.Id = id;
            this.ParentLearningStandardReference = parentLearningStandardReference;
            this.CourseTitle = courseTitle;
            this.IdentificationCodes = identificationCodes;
            this.LearningStandardCategoryDescriptor = learningStandardCategoryDescriptor;
            this.LearningStandardItemCode = learningStandardItemCode;
            this.LearningStandardScopeDescriptor = learningStandardScopeDescriptor;
            this.SuccessCriteria = successCriteria;
            this.Uri = uri;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// An unordered collection of learningStandardAcademicSubjects. Subject area for the learning standard.
        /// </summary>
        /// <value>An unordered collection of learningStandardAcademicSubjects. Subject area for the learning standard.</value>
        [DataMember(Name = "academicSubjects", IsRequired = true, EmitDefaultValue = true)]
        public List<EdFiLearningStandardAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// An unordered collection of learningStandardGradeLevels. The grade levels for the specific learning standard.
        /// </summary>
        /// <value>An unordered collection of learningStandardGradeLevels. The grade levels for the specific learning standard.</value>
        [DataMember(Name = "gradeLevels", IsRequired = true, EmitDefaultValue = true)]
        public List<EdFiLearningStandardGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        /// <value>The identifier for the specific learning standard (e.g., 111.15.3.1.A).</value>
        [DataMember(Name = "learningStandardId", IsRequired = true, EmitDefaultValue = true)]
        public string LearningStandardId { get; set; }

        /// <summary>
        /// Gets or Sets ParentLearningStandardReference
        /// </summary>
        [DataMember(Name = "parentLearningStandardReference", EmitDefaultValue = false)]
        public EdFiLearningStandardReference ParentLearningStandardReference { get; set; }

        /// <summary>
        /// Gets or Sets ContentStandard
        /// </summary>
        [DataMember(Name = "contentStandard", IsRequired = true, EmitDefaultValue = true)]
        public EdFiLearningStandardContentStandard ContentStandard { get; set; }

        /// <summary>
        /// The official course title with which this learning standard is associated.
        /// </summary>
        /// <value>The official course title with which this learning standard is associated.</value>
        [DataMember(Name = "courseTitle", EmitDefaultValue = true)]
        public string CourseTitle { get; set; }

        /// <summary>
        /// The text of the statement. The textual content that either describes a specific competency such as \&quot;Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.\&quot; or describes a less granular group of competencies within the taxonomy of the standards document, e.g. \&quot;Understand and apply the Pythagorean Theorem,\&quot; or \&quot;Geometry\&quot;.
        /// </summary>
        /// <value>The text of the statement. The textual content that either describes a specific competency such as \&quot;Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.\&quot; or describes a less granular group of competencies within the taxonomy of the standards document, e.g. \&quot;Understand and apply the Pythagorean Theorem,\&quot; or \&quot;Geometry\&quot;.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// An unordered collection of learningStandardIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard.
        /// </summary>
        /// <value>An unordered collection of learningStandardIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard.</value>
        [DataMember(Name = "identificationCodes", EmitDefaultValue = false)]
        public List<EdFiLearningStandardIdentificationCode> IdentificationCodes { get; set; }

        /// <summary>
        /// An additional classification of the type of a specific learning standard.
        /// </summary>
        /// <value>An additional classification of the type of a specific learning standard.</value>
        [DataMember(Name = "learningStandardCategoryDescriptor", EmitDefaultValue = true)]
        public string LearningStandardCategoryDescriptor { get; set; }

        /// <summary>
        /// A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).
        /// </summary>
        /// <value>A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).</value>
        [DataMember(Name = "learningStandardItemCode", EmitDefaultValue = true)]
        public string LearningStandardItemCode { get; set; }

        /// <summary>
        /// Signals the scope of usage the standard. Does not necessarily relate the standard to the governing body.
        /// </summary>
        /// <value>Signals the scope of usage the standard. Does not necessarily relate the standard to the governing body.</value>
        [DataMember(Name = "learningStandardScopeDescriptor", EmitDefaultValue = true)]
        public string LearningStandardScopeDescriptor { get; set; }

        /// <summary>
        /// The namespace of the organization or entity who governs the standard. It is recommended the namespaces observe a URI format and begin with a domain name under the governing organization or entity control.
        /// </summary>
        /// <value>The namespace of the organization or entity who governs the standard. It is recommended the namespaces observe a URI format and begin with a domain name under the governing organization or entity control.</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning standard.
        /// </summary>
        /// <value>One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning standard.</value>
        [DataMember(Name = "successCriteria", EmitDefaultValue = true)]
        public string SuccessCriteria { get; set; }

        /// <summary>
        /// An unambiguous reference to the statement using a network-resolvable URI.
        /// </summary>
        /// <value>An unambiguous reference to the statement using a network-resolvable URI.</value>
        [DataMember(Name = "uri", EmitDefaultValue = true)]
        public string Uri { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the LearningStandard entity.
        /// </summary>
        /// <value>Extensions to the LearningStandard entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLearningStandard {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  LearningStandardId: ").Append(LearningStandardId).Append("\n");
            sb.Append("  ParentLearningStandardReference: ").Append(ParentLearningStandardReference).Append("\n");
            sb.Append("  ContentStandard: ").Append(ContentStandard).Append("\n");
            sb.Append("  CourseTitle: ").Append(CourseTitle).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  LearningStandardCategoryDescriptor: ").Append(LearningStandardCategoryDescriptor).Append("\n");
            sb.Append("  LearningStandardItemCode: ").Append(LearningStandardItemCode).Append("\n");
            sb.Append("  LearningStandardScopeDescriptor: ").Append(LearningStandardScopeDescriptor).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  SuccessCriteria: ").Append(SuccessCriteria).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LearningStandardId (string) maxLength
            if (this.LearningStandardId != null && this.LearningStandardId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LearningStandardId, length must be less than 60.", new [] { "LearningStandardId" });
            }

            // CourseTitle (string) maxLength
            if (this.CourseTitle != null && this.CourseTitle.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CourseTitle, length must be less than 60.", new [] { "CourseTitle" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // LearningStandardCategoryDescriptor (string) maxLength
            if (this.LearningStandardCategoryDescriptor != null && this.LearningStandardCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LearningStandardCategoryDescriptor, length must be less than 306.", new [] { "LearningStandardCategoryDescriptor" });
            }

            // LearningStandardItemCode (string) maxLength
            if (this.LearningStandardItemCode != null && this.LearningStandardItemCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LearningStandardItemCode, length must be less than 60.", new [] { "LearningStandardItemCode" });
            }

            // LearningStandardScopeDescriptor (string) maxLength
            if (this.LearningStandardScopeDescriptor != null && this.LearningStandardScopeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LearningStandardScopeDescriptor, length must be less than 306.", new [] { "LearningStandardScopeDescriptor" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // SuccessCriteria (string) maxLength
            if (this.SuccessCriteria != null && this.SuccessCriteria.Length > 150)
            {
                yield return new ValidationResult("Invalid value for SuccessCriteria, length must be less than 150.", new [] { "SuccessCriteria" });
            }

            // Uri (string) maxLength
            if (this.Uri != null && this.Uri.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Uri, length must be less than 255.", new [] { "Uri" });
            }

            // Uri (string) minLength
            if (this.Uri != null && this.Uri.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Uri, length must be greater than 5.", new [] { "Uri" });
            }

            yield break;
        }
    }

}
