/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentCTEProgramAssociationCTEProgramService
    /// </summary>
    [DataContract(Name = "edFi_studentCTEProgramAssociationCTEProgramService")]
    public partial class EdFiStudentCTEProgramAssociationCTEProgramService : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentCTEProgramAssociationCTEProgramService" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentCTEProgramAssociationCTEProgramService() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentCTEProgramAssociationCTEProgramService" /> class.
        /// </summary>
        /// <param name="cteProgramServiceDescriptor">Indicates the service being provided to the student by the CTE program. (required).</param>
        /// <param name="cipCode">Number and description of the CIP code associated with the student&#39;s CTE program..</param>
        /// <param name="primaryIndicator">True if service is a primary service..</param>
        /// <param name="serviceBeginDate">First date the student was in this option for the current school year..</param>
        /// <param name="serviceEndDate">Last date the student was in this option for the current school year..</param>
        /// <param name="ext">Extensions to the StudentCTEProgramAssociationCTEProgramService entity..</param>
        public EdFiStudentCTEProgramAssociationCTEProgramService(string cteProgramServiceDescriptor = default, string cipCode = default, bool? primaryIndicator = default, DateOnly? serviceBeginDate = default, DateOnly? serviceEndDate = default, Object ext = default)
        {
            // to ensure "cteProgramServiceDescriptor" is required (not null)
            if (cteProgramServiceDescriptor == null)
            {
                throw new ArgumentNullException("cteProgramServiceDescriptor is a required property for EdFiStudentCTEProgramAssociationCTEProgramService and cannot be null");
            }
            this.CteProgramServiceDescriptor = cteProgramServiceDescriptor;
            this.CipCode = cipCode;
            this.PrimaryIndicator = primaryIndicator;
            this.ServiceBeginDate = serviceBeginDate;
            this.ServiceEndDate = serviceEndDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Indicates the service being provided to the student by the CTE program.
        /// </summary>
        /// <value>Indicates the service being provided to the student by the CTE program.</value>
        [DataMember(Name = "cteProgramServiceDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string CteProgramServiceDescriptor { get; set; }

        /// <summary>
        /// Number and description of the CIP code associated with the student&#39;s CTE program.
        /// </summary>
        /// <value>Number and description of the CIP code associated with the student&#39;s CTE program.</value>
        [DataMember(Name = "cipCode", EmitDefaultValue = true)]
        public string CipCode { get; set; }

        /// <summary>
        /// True if service is a primary service.
        /// </summary>
        /// <value>True if service is a primary service.</value>
        [DataMember(Name = "primaryIndicator", EmitDefaultValue = true)]
        public bool? PrimaryIndicator { get; set; }

        /// <summary>
        /// First date the student was in this option for the current school year.
        /// </summary>
        /// <value>First date the student was in this option for the current school year.</value>
        [DataMember(Name = "serviceBeginDate", EmitDefaultValue = true)]
        public DateOnly? ServiceBeginDate { get; set; }

        /// <summary>
        /// Last date the student was in this option for the current school year.
        /// </summary>
        /// <value>Last date the student was in this option for the current school year.</value>
        [DataMember(Name = "serviceEndDate", EmitDefaultValue = true)]
        public DateOnly? ServiceEndDate { get; set; }

        /// <summary>
        /// Extensions to the StudentCTEProgramAssociationCTEProgramService entity.
        /// </summary>
        /// <value>Extensions to the StudentCTEProgramAssociationCTEProgramService entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentCTEProgramAssociationCTEProgramService {\n");
            sb.Append("  CteProgramServiceDescriptor: ").Append(CteProgramServiceDescriptor).Append("\n");
            sb.Append("  CipCode: ").Append(CipCode).Append("\n");
            sb.Append("  PrimaryIndicator: ").Append(PrimaryIndicator).Append("\n");
            sb.Append("  ServiceBeginDate: ").Append(ServiceBeginDate).Append("\n");
            sb.Append("  ServiceEndDate: ").Append(ServiceEndDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CteProgramServiceDescriptor (string) maxLength
            if (this.CteProgramServiceDescriptor != null && this.CteProgramServiceDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CteProgramServiceDescriptor, length must be less than 306.", new [] { "CteProgramServiceDescriptor" });
            }

            // CipCode (string) maxLength
            if (this.CipCode != null && this.CipCode.Length > 120)
            {
                yield return new ValidationResult("Invalid value for CipCode, length must be less than 120.", new [] { "CipCode" });
            }

            yield break;
        }
    }

}
