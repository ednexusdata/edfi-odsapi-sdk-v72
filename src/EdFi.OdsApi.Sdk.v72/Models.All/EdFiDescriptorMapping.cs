/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiDescriptorMapping
    /// </summary>
    [DataContract(Name = "edFi_descriptorMapping")]
    public partial class EdFiDescriptorMapping : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiDescriptorMapping" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiDescriptorMapping() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiDescriptorMapping" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="mappedNamespace">The namespace of the descriptor value to which the from descriptor value is mapped to. (required).</param>
        /// <param name="mappedValue">The descriptor value to which the from descriptor value is being mapped to. (required).</param>
        /// <param name="varNamespace">The namespace of the descriptor value that is being mapped to another value. (required).</param>
        /// <param name="value">The descriptor value that is being mapped to another value. (required).</param>
        /// <param name="modelEntities">An unordered collection of descriptorMappingModelEntities. The resources for which the descriptor mapping applies. If empty, the mapping is assumed to be applicable to all resources in which the descriptor appears..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the DescriptorMapping entity..</param>
        public EdFiDescriptorMapping(string id = default, string mappedNamespace = default, string mappedValue = default, string varNamespace = default, string value = default, List<EdFiDescriptorMappingModelEntity> modelEntities = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "mappedNamespace" is required (not null)
            if (mappedNamespace == null)
            {
                throw new ArgumentNullException("mappedNamespace is a required property for EdFiDescriptorMapping and cannot be null");
            }
            this.MappedNamespace = mappedNamespace;
            // to ensure "mappedValue" is required (not null)
            if (mappedValue == null)
            {
                throw new ArgumentNullException("mappedValue is a required property for EdFiDescriptorMapping and cannot be null");
            }
            this.MappedValue = mappedValue;
            // to ensure "varNamespace" is required (not null)
            if (varNamespace == null)
            {
                throw new ArgumentNullException("varNamespace is a required property for EdFiDescriptorMapping and cannot be null");
            }
            this.Namespace = varNamespace;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for EdFiDescriptorMapping and cannot be null");
            }
            this.Value = value;
            this.Id = id;
            this.ModelEntities = modelEntities;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The namespace of the descriptor value to which the from descriptor value is mapped to.
        /// </summary>
        /// <value>The namespace of the descriptor value to which the from descriptor value is mapped to.</value>
        [DataMember(Name = "mappedNamespace", IsRequired = true, EmitDefaultValue = true)]
        public string MappedNamespace { get; set; }

        /// <summary>
        /// The descriptor value to which the from descriptor value is being mapped to.
        /// </summary>
        /// <value>The descriptor value to which the from descriptor value is being mapped to.</value>
        [DataMember(Name = "mappedValue", IsRequired = true, EmitDefaultValue = true)]
        public string MappedValue { get; set; }

        /// <summary>
        /// The namespace of the descriptor value that is being mapped to another value.
        /// </summary>
        /// <value>The namespace of the descriptor value that is being mapped to another value.</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// The descriptor value that is being mapped to another value.
        /// </summary>
        /// <value>The descriptor value that is being mapped to another value.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// An unordered collection of descriptorMappingModelEntities. The resources for which the descriptor mapping applies. If empty, the mapping is assumed to be applicable to all resources in which the descriptor appears.
        /// </summary>
        /// <value>An unordered collection of descriptorMappingModelEntities. The resources for which the descriptor mapping applies. If empty, the mapping is assumed to be applicable to all resources in which the descriptor appears.</value>
        [DataMember(Name = "modelEntities", EmitDefaultValue = false)]
        public List<EdFiDescriptorMappingModelEntity> ModelEntities { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the DescriptorMapping entity.
        /// </summary>
        /// <value>Extensions to the DescriptorMapping entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiDescriptorMapping {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MappedNamespace: ").Append(MappedNamespace).Append("\n");
            sb.Append("  MappedValue: ").Append(MappedValue).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ModelEntities: ").Append(ModelEntities).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MappedNamespace (string) maxLength
            if (this.MappedNamespace != null && this.MappedNamespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for MappedNamespace, length must be less than 255.", new [] { "MappedNamespace" });
            }

            // MappedNamespace (string) minLength
            if (this.MappedNamespace != null && this.MappedNamespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for MappedNamespace, length must be greater than 5.", new [] { "MappedNamespace" });
            }

            // MappedValue (string) maxLength
            if (this.MappedValue != null && this.MappedValue.Length > 50)
            {
                yield return new ValidationResult("Invalid value for MappedValue, length must be less than 50.", new [] { "MappedValue" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // Value (string) maxLength
            if (this.Value != null && this.Value.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Value, length must be less than 50.", new [] { "Value" });
            }

            yield break;
        }
    }

}
