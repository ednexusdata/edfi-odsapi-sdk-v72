/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse
    /// </summary>
    [DataContract(Name = "edFi_surveyQuestionResponseSurveyQuestionMatrixElementResponse")]
    public partial class EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse" /> class.
        /// </summary>
        /// <param name="matrixElement">For matrix questions, the text identifying each row of the matrix. (required).</param>
        /// <param name="maxNumericResponse">The maximum score response to the question..</param>
        /// <param name="minNumericResponse">The minimum score response to the question..</param>
        /// <param name="noResponse">Indicates there was no response to the question..</param>
        /// <param name="numericResponse">The numeric response to the question..</param>
        /// <param name="textResponse">The text response(s) for the question..</param>
        /// <param name="ext">Extensions to the SurveyQuestionResponseSurveyQuestionMatrixElementResponse entity..</param>
        public EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse(string matrixElement = default, int? maxNumericResponse = default, int? minNumericResponse = default, bool? noResponse = default, int? numericResponse = default, string textResponse = default, Object ext = default)
        {
            // to ensure "matrixElement" is required (not null)
            if (matrixElement == null)
            {
                throw new ArgumentNullException("matrixElement is a required property for EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse and cannot be null");
            }
            this.MatrixElement = matrixElement;
            this.MaxNumericResponse = maxNumericResponse;
            this.MinNumericResponse = minNumericResponse;
            this.NoResponse = noResponse;
            this.NumericResponse = numericResponse;
            this.TextResponse = textResponse;
            this.Ext = ext;
        }

        /// <summary>
        /// For matrix questions, the text identifying each row of the matrix.
        /// </summary>
        /// <value>For matrix questions, the text identifying each row of the matrix.</value>
        [DataMember(Name = "matrixElement", IsRequired = true, EmitDefaultValue = true)]
        public string MatrixElement { get; set; }

        /// <summary>
        /// The maximum score response to the question.
        /// </summary>
        /// <value>The maximum score response to the question.</value>
        [DataMember(Name = "maxNumericResponse", EmitDefaultValue = true)]
        public int? MaxNumericResponse { get; set; }

        /// <summary>
        /// The minimum score response to the question.
        /// </summary>
        /// <value>The minimum score response to the question.</value>
        [DataMember(Name = "minNumericResponse", EmitDefaultValue = true)]
        public int? MinNumericResponse { get; set; }

        /// <summary>
        /// Indicates there was no response to the question.
        /// </summary>
        /// <value>Indicates there was no response to the question.</value>
        [DataMember(Name = "noResponse", EmitDefaultValue = true)]
        public bool? NoResponse { get; set; }

        /// <summary>
        /// The numeric response to the question.
        /// </summary>
        /// <value>The numeric response to the question.</value>
        [DataMember(Name = "numericResponse", EmitDefaultValue = true)]
        public int? NumericResponse { get; set; }

        /// <summary>
        /// The text response(s) for the question.
        /// </summary>
        /// <value>The text response(s) for the question.</value>
        [DataMember(Name = "textResponse", EmitDefaultValue = true)]
        public string TextResponse { get; set; }

        /// <summary>
        /// Extensions to the SurveyQuestionResponseSurveyQuestionMatrixElementResponse entity.
        /// </summary>
        /// <value>Extensions to the SurveyQuestionResponseSurveyQuestionMatrixElementResponse entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse {\n");
            sb.Append("  MatrixElement: ").Append(MatrixElement).Append("\n");
            sb.Append("  MaxNumericResponse: ").Append(MaxNumericResponse).Append("\n");
            sb.Append("  MinNumericResponse: ").Append(MinNumericResponse).Append("\n");
            sb.Append("  NoResponse: ").Append(NoResponse).Append("\n");
            sb.Append("  NumericResponse: ").Append(NumericResponse).Append("\n");
            sb.Append("  TextResponse: ").Append(TextResponse).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MatrixElement (string) maxLength
            if (this.MatrixElement != null && this.MatrixElement.Length > 255)
            {
                yield return new ValidationResult("Invalid value for MatrixElement, length must be less than 255.", new [] { "MatrixElement" });
            }

            // NumericResponse (int?) maximum
            if (this.NumericResponse > (int?)100)
            {
                yield return new ValidationResult("Invalid value for NumericResponse, must be a value less than or equal to 100.", new [] { "NumericResponse" });
            }

            // NumericResponse (int?) minimum
            if (this.NumericResponse < (int?)0)
            {
                yield return new ValidationResult("Invalid value for NumericResponse, must be a value greater than or equal to 0.", new [] { "NumericResponse" });
            }

            // TextResponse (string) maxLength
            if (this.TextResponse != null && this.TextResponse.Length > 2048)
            {
                yield return new ValidationResult("Invalid value for TextResponse, length must be less than 2048.", new [] { "TextResponse" });
            }

            yield break;
        }
    }

}
