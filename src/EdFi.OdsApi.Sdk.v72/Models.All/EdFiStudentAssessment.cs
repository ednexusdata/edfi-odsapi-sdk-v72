/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentAssessment
    /// </summary>
    [DataContract(Name = "edFi_studentAssessment")]
    public partial class EdFiStudentAssessment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentAssessment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessment" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="studentAssessmentIdentifier">A unique number or alphanumeric code assigned to an assessment administered to a student. (required).</param>
        /// <param name="assessmentReference">assessmentReference (required).</param>
        /// <param name="reportedSchoolReference">reportedSchoolReference.</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference.</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="accommodations">An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria..</param>
        /// <param name="administrationDate">The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones..</param>
        /// <param name="administrationEndDate">The date and time an assessment administration ended..</param>
        /// <param name="administrationEnvironmentDescriptor">The environment in which the test was administered..</param>
        /// <param name="administrationLanguageDescriptor">The language in which an assessment is written and/or administered..</param>
        /// <param name="assessedMinutes">Reported time student was assessed in minutes..</param>
        /// <param name="eventCircumstanceDescriptor">An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc..</param>
        /// <param name="eventDescription">Describes special events that occur before during or after the assessment session that may impact use of results..</param>
        /// <param name="items">An unordered collection of studentAssessmentItems. The student&#39;s response to an assessment item and the item-level scores such as correct, incorrect, or met standard..</param>
        /// <param name="performanceLevels">An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the student assessment..</param>
        /// <param name="period">period.</param>
        /// <param name="platformTypeDescriptor">The platform with which the assessment was delivered to the student during the assessment session..</param>
        /// <param name="reasonNotTestedDescriptor">The primary reason student is not tested..</param>
        /// <param name="reportedSchoolIdentifier">A reported school identifier for the school the enrollment at the time of the assessment used when the assigned SchoolId is not known by the assessment vendor..</param>
        /// <param name="retestIndicatorDescriptor">Indicator if the test was a retake..</param>
        /// <param name="scoreResults">An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc..</param>
        /// <param name="serialNumber">The unique number for the assessment form or answer document..</param>
        /// <param name="studentObjectiveAssessments">An unordered collection of studentAssessmentStudentObjectiveAssessments. The student&#39;s score and/or performance levels earned for an objective assessment..</param>
        /// <param name="whenAssessedGradeLevelDescriptor">The grade level of a student when assessed..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the StudentAssessment entity..</param>
        public EdFiStudentAssessment(string id = default, string studentAssessmentIdentifier = default, EdFiAssessmentReference assessmentReference = default, EdFiSchoolReference reportedSchoolReference = default, EdFiSchoolYearTypeReference schoolYearTypeReference = default, EdFiStudentReference studentReference = default, List<EdFiStudentAssessmentAccommodation> accommodations = default, DateTime? administrationDate = default, DateTime? administrationEndDate = default, string administrationEnvironmentDescriptor = default, string administrationLanguageDescriptor = default, int? assessedMinutes = default, string eventCircumstanceDescriptor = default, string eventDescription = default, List<EdFiStudentAssessmentItem> items = default, List<EdFiStudentAssessmentPerformanceLevel> performanceLevels = default, EdFiStudentAssessmentPeriod period = default, string platformTypeDescriptor = default, string reasonNotTestedDescriptor = default, string reportedSchoolIdentifier = default, string retestIndicatorDescriptor = default, List<EdFiStudentAssessmentScoreResult> scoreResults = default, string serialNumber = default, List<EdFiStudentAssessmentStudentObjectiveAssessment> studentObjectiveAssessments = default, string whenAssessedGradeLevelDescriptor = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "studentAssessmentIdentifier" is required (not null)
            if (studentAssessmentIdentifier == null)
            {
                throw new ArgumentNullException("studentAssessmentIdentifier is a required property for EdFiStudentAssessment and cannot be null");
            }
            this.StudentAssessmentIdentifier = studentAssessmentIdentifier;
            // to ensure "assessmentReference" is required (not null)
            if (assessmentReference == null)
            {
                throw new ArgumentNullException("assessmentReference is a required property for EdFiStudentAssessment and cannot be null");
            }
            this.AssessmentReference = assessmentReference;
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new ArgumentNullException("studentReference is a required property for EdFiStudentAssessment and cannot be null");
            }
            this.StudentReference = studentReference;
            this.Id = id;
            this.ReportedSchoolReference = reportedSchoolReference;
            this.SchoolYearTypeReference = schoolYearTypeReference;
            this.Accommodations = accommodations;
            this.AdministrationDate = administrationDate;
            this.AdministrationEndDate = administrationEndDate;
            this.AdministrationEnvironmentDescriptor = administrationEnvironmentDescriptor;
            this.AdministrationLanguageDescriptor = administrationLanguageDescriptor;
            this.AssessedMinutes = assessedMinutes;
            this.EventCircumstanceDescriptor = eventCircumstanceDescriptor;
            this.EventDescription = eventDescription;
            this.Items = items;
            this.PerformanceLevels = performanceLevels;
            this.Period = period;
            this.PlatformTypeDescriptor = platformTypeDescriptor;
            this.ReasonNotTestedDescriptor = reasonNotTestedDescriptor;
            this.ReportedSchoolIdentifier = reportedSchoolIdentifier;
            this.RetestIndicatorDescriptor = retestIndicatorDescriptor;
            this.ScoreResults = scoreResults;
            this.SerialNumber = serialNumber;
            this.StudentObjectiveAssessments = studentObjectiveAssessments;
            this.WhenAssessedGradeLevelDescriptor = whenAssessedGradeLevelDescriptor;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an assessment administered to a student.</value>
        [DataMember(Name = "studentAssessmentIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string StudentAssessmentIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentReference
        /// </summary>
        [DataMember(Name = "assessmentReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiAssessmentReference AssessmentReference { get; set; }

        /// <summary>
        /// Gets or Sets ReportedSchoolReference
        /// </summary>
        [DataMember(Name = "reportedSchoolReference", EmitDefaultValue = false)]
        public EdFiSchoolReference ReportedSchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name = "schoolYearTypeReference", EmitDefaultValue = false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name = "studentReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.</value>
        [DataMember(Name = "accommodations", EmitDefaultValue = false)]
        public List<EdFiStudentAssessmentAccommodation> Accommodations { get; set; }

        /// <summary>
        /// The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.
        /// </summary>
        /// <value>The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.</value>
        [DataMember(Name = "administrationDate", EmitDefaultValue = true)]
        public DateTime? AdministrationDate { get; set; }

        /// <summary>
        /// The date and time an assessment administration ended.
        /// </summary>
        /// <value>The date and time an assessment administration ended.</value>
        [DataMember(Name = "administrationEndDate", EmitDefaultValue = true)]
        public DateTime? AdministrationEndDate { get; set; }

        /// <summary>
        /// The environment in which the test was administered.
        /// </summary>
        /// <value>The environment in which the test was administered.</value>
        [DataMember(Name = "administrationEnvironmentDescriptor", EmitDefaultValue = true)]
        public string AdministrationEnvironmentDescriptor { get; set; }

        /// <summary>
        /// The language in which an assessment is written and/or administered.
        /// </summary>
        /// <value>The language in which an assessment is written and/or administered.</value>
        [DataMember(Name = "administrationLanguageDescriptor", EmitDefaultValue = true)]
        public string AdministrationLanguageDescriptor { get; set; }

        /// <summary>
        /// Reported time student was assessed in minutes.
        /// </summary>
        /// <value>Reported time student was assessed in minutes.</value>
        [DataMember(Name = "assessedMinutes", EmitDefaultValue = true)]
        public int? AssessedMinutes { get; set; }

        /// <summary>
        /// An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.
        /// </summary>
        /// <value>An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.</value>
        [DataMember(Name = "eventCircumstanceDescriptor", EmitDefaultValue = true)]
        public string EventCircumstanceDescriptor { get; set; }

        /// <summary>
        /// Describes special events that occur before during or after the assessment session that may impact use of results.
        /// </summary>
        /// <value>Describes special events that occur before during or after the assessment session that may impact use of results.</value>
        [DataMember(Name = "eventDescription", EmitDefaultValue = true)]
        public string EventDescription { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentItems. The student&#39;s response to an assessment item and the item-level scores such as correct, incorrect, or met standard.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentItems. The student&#39;s response to an assessment item and the item-level scores such as correct, incorrect, or met standard.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<EdFiStudentAssessmentItem> Items { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the student assessment.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the student assessment.</value>
        [DataMember(Name = "performanceLevels", EmitDefaultValue = false)]
        public List<EdFiStudentAssessmentPerformanceLevel> PerformanceLevels { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public EdFiStudentAssessmentPeriod Period { get; set; }

        /// <summary>
        /// The platform with which the assessment was delivered to the student during the assessment session.
        /// </summary>
        /// <value>The platform with which the assessment was delivered to the student during the assessment session.</value>
        [DataMember(Name = "platformTypeDescriptor", EmitDefaultValue = true)]
        public string PlatformTypeDescriptor { get; set; }

        /// <summary>
        /// The primary reason student is not tested.
        /// </summary>
        /// <value>The primary reason student is not tested.</value>
        [DataMember(Name = "reasonNotTestedDescriptor", EmitDefaultValue = true)]
        public string ReasonNotTestedDescriptor { get; set; }

        /// <summary>
        /// A reported school identifier for the school the enrollment at the time of the assessment used when the assigned SchoolId is not known by the assessment vendor.
        /// </summary>
        /// <value>A reported school identifier for the school the enrollment at the time of the assessment used when the assigned SchoolId is not known by the assessment vendor.</value>
        [DataMember(Name = "reportedSchoolIdentifier", EmitDefaultValue = true)]
        public string ReportedSchoolIdentifier { get; set; }

        /// <summary>
        /// Indicator if the test was a retake.
        /// </summary>
        /// <value>Indicator if the test was a retake.</value>
        [DataMember(Name = "retestIndicatorDescriptor", EmitDefaultValue = true)]
        public string RetestIndicatorDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.</value>
        [DataMember(Name = "scoreResults", EmitDefaultValue = false)]
        public List<EdFiStudentAssessmentScoreResult> ScoreResults { get; set; }

        /// <summary>
        /// The unique number for the assessment form or answer document.
        /// </summary>
        /// <value>The unique number for the assessment form or answer document.</value>
        [DataMember(Name = "serialNumber", EmitDefaultValue = true)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentStudentObjectiveAssessments. The student&#39;s score and/or performance levels earned for an objective assessment.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentStudentObjectiveAssessments. The student&#39;s score and/or performance levels earned for an objective assessment.</value>
        [DataMember(Name = "studentObjectiveAssessments", EmitDefaultValue = false)]
        public List<EdFiStudentAssessmentStudentObjectiveAssessment> StudentObjectiveAssessments { get; set; }

        /// <summary>
        /// The grade level of a student when assessed.
        /// </summary>
        /// <value>The grade level of a student when assessed.</value>
        [DataMember(Name = "whenAssessedGradeLevelDescriptor", EmitDefaultValue = true)]
        public string WhenAssessedGradeLevelDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the StudentAssessment entity.
        /// </summary>
        /// <value>Extensions to the StudentAssessment entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentAssessment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StudentAssessmentIdentifier: ").Append(StudentAssessmentIdentifier).Append("\n");
            sb.Append("  AssessmentReference: ").Append(AssessmentReference).Append("\n");
            sb.Append("  ReportedSchoolReference: ").Append(ReportedSchoolReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Accommodations: ").Append(Accommodations).Append("\n");
            sb.Append("  AdministrationDate: ").Append(AdministrationDate).Append("\n");
            sb.Append("  AdministrationEndDate: ").Append(AdministrationEndDate).Append("\n");
            sb.Append("  AdministrationEnvironmentDescriptor: ").Append(AdministrationEnvironmentDescriptor).Append("\n");
            sb.Append("  AdministrationLanguageDescriptor: ").Append(AdministrationLanguageDescriptor).Append("\n");
            sb.Append("  AssessedMinutes: ").Append(AssessedMinutes).Append("\n");
            sb.Append("  EventCircumstanceDescriptor: ").Append(EventCircumstanceDescriptor).Append("\n");
            sb.Append("  EventDescription: ").Append(EventDescription).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  PerformanceLevels: ").Append(PerformanceLevels).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PlatformTypeDescriptor: ").Append(PlatformTypeDescriptor).Append("\n");
            sb.Append("  ReasonNotTestedDescriptor: ").Append(ReasonNotTestedDescriptor).Append("\n");
            sb.Append("  ReportedSchoolIdentifier: ").Append(ReportedSchoolIdentifier).Append("\n");
            sb.Append("  RetestIndicatorDescriptor: ").Append(RetestIndicatorDescriptor).Append("\n");
            sb.Append("  ScoreResults: ").Append(ScoreResults).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  StudentObjectiveAssessments: ").Append(StudentObjectiveAssessments).Append("\n");
            sb.Append("  WhenAssessedGradeLevelDescriptor: ").Append(WhenAssessedGradeLevelDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StudentAssessmentIdentifier (string) maxLength
            if (this.StudentAssessmentIdentifier != null && this.StudentAssessmentIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for StudentAssessmentIdentifier, length must be less than 60.", new [] { "StudentAssessmentIdentifier" });
            }

            // AdministrationEnvironmentDescriptor (string) maxLength
            if (this.AdministrationEnvironmentDescriptor != null && this.AdministrationEnvironmentDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AdministrationEnvironmentDescriptor, length must be less than 306.", new [] { "AdministrationEnvironmentDescriptor" });
            }

            // AdministrationLanguageDescriptor (string) maxLength
            if (this.AdministrationLanguageDescriptor != null && this.AdministrationLanguageDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AdministrationLanguageDescriptor, length must be less than 306.", new [] { "AdministrationLanguageDescriptor" });
            }

            // EventCircumstanceDescriptor (string) maxLength
            if (this.EventCircumstanceDescriptor != null && this.EventCircumstanceDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EventCircumstanceDescriptor, length must be less than 306.", new [] { "EventCircumstanceDescriptor" });
            }

            // EventDescription (string) maxLength
            if (this.EventDescription != null && this.EventDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for EventDescription, length must be less than 1024.", new [] { "EventDescription" });
            }

            // PlatformTypeDescriptor (string) maxLength
            if (this.PlatformTypeDescriptor != null && this.PlatformTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PlatformTypeDescriptor, length must be less than 306.", new [] { "PlatformTypeDescriptor" });
            }

            // ReasonNotTestedDescriptor (string) maxLength
            if (this.ReasonNotTestedDescriptor != null && this.ReasonNotTestedDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ReasonNotTestedDescriptor, length must be less than 306.", new [] { "ReasonNotTestedDescriptor" });
            }

            // ReportedSchoolIdentifier (string) maxLength
            if (this.ReportedSchoolIdentifier != null && this.ReportedSchoolIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ReportedSchoolIdentifier, length must be less than 60.", new [] { "ReportedSchoolIdentifier" });
            }

            // RetestIndicatorDescriptor (string) maxLength
            if (this.RetestIndicatorDescriptor != null && this.RetestIndicatorDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for RetestIndicatorDescriptor, length must be less than 306.", new [] { "RetestIndicatorDescriptor" });
            }

            // SerialNumber (string) maxLength
            if (this.SerialNumber != null && this.SerialNumber.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SerialNumber, length must be less than 60.", new [] { "SerialNumber" });
            }

            // WhenAssessedGradeLevelDescriptor (string) maxLength
            if (this.WhenAssessedGradeLevelDescriptor != null && this.WhenAssessedGradeLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for WhenAssessedGradeLevelDescriptor, length must be less than 306.", new [] { "WhenAssessedGradeLevelDescriptor" });
            }

            yield break;
        }
    }

}
