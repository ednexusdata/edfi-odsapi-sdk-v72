/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiSurveySectionResponseReference
    /// </summary>
    [DataContract(Name = "edFi_surveySectionResponseReference")]
    public partial class EdFiSurveySectionResponseReference : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveySectionResponseReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurveySectionResponseReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveySectionResponseReference" /> class.
        /// </summary>
        /// <param name="varNamespace">Namespace for the survey. (required).</param>
        /// <param name="surveyIdentifier">The unique survey identifier from the survey tool. (required).</param>
        /// <param name="surveyResponseIdentifier">The identifier of the survey typically from the survey application. (required).</param>
        /// <param name="surveySectionTitle">The title or label for the survey section. (required).</param>
        /// <param name="link">link.</param>
        public EdFiSurveySectionResponseReference(string varNamespace = default, string surveyIdentifier = default, string surveyResponseIdentifier = default, string surveySectionTitle = default, Link link = default)
        {
            // to ensure "varNamespace" is required (not null)
            if (varNamespace == null)
            {
                throw new ArgumentNullException("varNamespace is a required property for EdFiSurveySectionResponseReference and cannot be null");
            }
            this.Namespace = varNamespace;
            // to ensure "surveyIdentifier" is required (not null)
            if (surveyIdentifier == null)
            {
                throw new ArgumentNullException("surveyIdentifier is a required property for EdFiSurveySectionResponseReference and cannot be null");
            }
            this.SurveyIdentifier = surveyIdentifier;
            // to ensure "surveyResponseIdentifier" is required (not null)
            if (surveyResponseIdentifier == null)
            {
                throw new ArgumentNullException("surveyResponseIdentifier is a required property for EdFiSurveySectionResponseReference and cannot be null");
            }
            this.SurveyResponseIdentifier = surveyResponseIdentifier;
            // to ensure "surveySectionTitle" is required (not null)
            if (surveySectionTitle == null)
            {
                throw new ArgumentNullException("surveySectionTitle is a required property for EdFiSurveySectionResponseReference and cannot be null");
            }
            this.SurveySectionTitle = surveySectionTitle;
            this.Link = link;
        }

        /// <summary>
        /// Namespace for the survey.
        /// </summary>
        /// <value>Namespace for the survey.</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// The unique survey identifier from the survey tool.
        /// </summary>
        /// <value>The unique survey identifier from the survey tool.</value>
        [DataMember(Name = "surveyIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string SurveyIdentifier { get; set; }

        /// <summary>
        /// The identifier of the survey typically from the survey application.
        /// </summary>
        /// <value>The identifier of the survey typically from the survey application.</value>
        [DataMember(Name = "surveyResponseIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string SurveyResponseIdentifier { get; set; }

        /// <summary>
        /// The title or label for the survey section.
        /// </summary>
        /// <value>The title or label for the survey section.</value>
        [DataMember(Name = "surveySectionTitle", IsRequired = true, EmitDefaultValue = true)]
        public string SurveySectionTitle { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public Link Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveySectionResponseReference {\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  SurveyIdentifier: ").Append(SurveyIdentifier).Append("\n");
            sb.Append("  SurveyResponseIdentifier: ").Append(SurveyResponseIdentifier).Append("\n");
            sb.Append("  SurveySectionTitle: ").Append(SurveySectionTitle).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // SurveyIdentifier (string) maxLength
            if (this.SurveyIdentifier != null && this.SurveyIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SurveyIdentifier, length must be less than 60.", new [] { "SurveyIdentifier" });
            }

            // SurveyResponseIdentifier (string) maxLength
            if (this.SurveyResponseIdentifier != null && this.SurveyResponseIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SurveyResponseIdentifier, length must be less than 60.", new [] { "SurveyResponseIdentifier" });
            }

            // SurveySectionTitle (string) maxLength
            if (this.SurveySectionTitle != null && this.SurveySectionTitle.Length > 255)
            {
                yield return new ValidationResult("Invalid value for SurveySectionTitle, length must be less than 255.", new [] { "SurveySectionTitle" });
            }

            yield break;
        }
    }

}
