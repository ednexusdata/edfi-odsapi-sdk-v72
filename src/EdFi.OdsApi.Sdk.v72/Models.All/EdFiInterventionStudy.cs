/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiInterventionStudy
    /// </summary>
    [DataContract(Name = "edFi_interventionStudy")]
    public partial class EdFiInterventionStudy : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiInterventionStudy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiInterventionStudy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiInterventionStudy" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="interventionStudyIdentificationCode">A unique number or alphanumeric code assigned to an intervention study. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="interventionPrescriptionReference">interventionPrescriptionReference (required).</param>
        /// <param name="appropriateGradeLevels">An unordered collection of interventionStudyAppropriateGradeLevels. Grade levels participating in this study..</param>
        /// <param name="appropriateSexes">An unordered collection of interventionStudyAppropriateSexes. Sexes participating in this study. If omitted, considered generally applicable..</param>
        /// <param name="deliveryMethodDescriptor">The way in which an intervention was implemented: individual, small group, whole class, or whole school. (required).</param>
        /// <param name="educationContents">An unordered collection of interventionStudyEducationContents. Relates the education content source to the education content..</param>
        /// <param name="interventionClassDescriptor">The way in which an intervention is used: curriculum, supplement, or practice. (required).</param>
        /// <param name="interventionEffectivenesses">An unordered collection of interventionStudyInterventionEffectivenesses. Measurement of the effectiveness of the intervention study per diagnosis..</param>
        /// <param name="learningResourceMetadataURIs">An unordered collection of interventionStudyLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item..</param>
        /// <param name="participants">The number of participants observed in the study. (required).</param>
        /// <param name="populationServeds">An unordered collection of interventionStudyPopulationServeds. A subset of students that are the focus of the intervention study..</param>
        /// <param name="stateAbbreviations">An unordered collection of interventionStudyStateAbbreviations. The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part..</param>
        /// <param name="uris">An unordered collection of interventionStudyURIs. The URI (typical a URL) pointing to an education content item..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the InterventionStudy entity..</param>
        public EdFiInterventionStudy(string id = default, string interventionStudyIdentificationCode = default, EdFiEducationOrganizationReference educationOrganizationReference = default, EdFiInterventionPrescriptionReference interventionPrescriptionReference = default, List<EdFiInterventionStudyAppropriateGradeLevel> appropriateGradeLevels = default, List<EdFiInterventionStudyAppropriateSex> appropriateSexes = default, string deliveryMethodDescriptor = default, List<EdFiInterventionStudyEducationContent> educationContents = default, string interventionClassDescriptor = default, List<EdFiInterventionStudyInterventionEffectiveness> interventionEffectivenesses = default, List<EdFiInterventionStudyLearningResourceMetadataURI> learningResourceMetadataURIs = default, int participants = default, List<EdFiInterventionStudyPopulationServed> populationServeds = default, List<EdFiInterventionStudyStateAbbreviation> stateAbbreviations = default, List<EdFiInterventionStudyURI> uris = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "interventionStudyIdentificationCode" is required (not null)
            if (interventionStudyIdentificationCode == null)
            {
                throw new ArgumentNullException("interventionStudyIdentificationCode is a required property for EdFiInterventionStudy and cannot be null");
            }
            this.InterventionStudyIdentificationCode = interventionStudyIdentificationCode;
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new ArgumentNullException("educationOrganizationReference is a required property for EdFiInterventionStudy and cannot be null");
            }
            this.EducationOrganizationReference = educationOrganizationReference;
            // to ensure "interventionPrescriptionReference" is required (not null)
            if (interventionPrescriptionReference == null)
            {
                throw new ArgumentNullException("interventionPrescriptionReference is a required property for EdFiInterventionStudy and cannot be null");
            }
            this.InterventionPrescriptionReference = interventionPrescriptionReference;
            // to ensure "deliveryMethodDescriptor" is required (not null)
            if (deliveryMethodDescriptor == null)
            {
                throw new ArgumentNullException("deliveryMethodDescriptor is a required property for EdFiInterventionStudy and cannot be null");
            }
            this.DeliveryMethodDescriptor = deliveryMethodDescriptor;
            // to ensure "interventionClassDescriptor" is required (not null)
            if (interventionClassDescriptor == null)
            {
                throw new ArgumentNullException("interventionClassDescriptor is a required property for EdFiInterventionStudy and cannot be null");
            }
            this.InterventionClassDescriptor = interventionClassDescriptor;
            this.Participants = participants;
            this.Id = id;
            this.AppropriateGradeLevels = appropriateGradeLevels;
            this.AppropriateSexes = appropriateSexes;
            this.EducationContents = educationContents;
            this.InterventionEffectivenesses = interventionEffectivenesses;
            this.LearningResourceMetadataURIs = learningResourceMetadataURIs;
            this.PopulationServeds = populationServeds;
            this.StateAbbreviations = stateAbbreviations;
            this.Uris = uris;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an intervention study.</value>
        [DataMember(Name = "interventionStudyIdentificationCode", IsRequired = true, EmitDefaultValue = true)]
        public string InterventionStudyIdentificationCode { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets InterventionPrescriptionReference
        /// </summary>
        [DataMember(Name = "interventionPrescriptionReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiInterventionPrescriptionReference InterventionPrescriptionReference { get; set; }

        /// <summary>
        /// An unordered collection of interventionStudyAppropriateGradeLevels. Grade levels participating in this study.
        /// </summary>
        /// <value>An unordered collection of interventionStudyAppropriateGradeLevels. Grade levels participating in this study.</value>
        [DataMember(Name = "appropriateGradeLevels", EmitDefaultValue = false)]
        public List<EdFiInterventionStudyAppropriateGradeLevel> AppropriateGradeLevels { get; set; }

        /// <summary>
        /// An unordered collection of interventionStudyAppropriateSexes. Sexes participating in this study. If omitted, considered generally applicable.
        /// </summary>
        /// <value>An unordered collection of interventionStudyAppropriateSexes. Sexes participating in this study. If omitted, considered generally applicable.</value>
        [DataMember(Name = "appropriateSexes", EmitDefaultValue = false)]
        public List<EdFiInterventionStudyAppropriateSex> AppropriateSexes { get; set; }

        /// <summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        /// </summary>
        /// <value>The way in which an intervention was implemented: individual, small group, whole class, or whole school.</value>
        [DataMember(Name = "deliveryMethodDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string DeliveryMethodDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of interventionStudyEducationContents. Relates the education content source to the education content.
        /// </summary>
        /// <value>An unordered collection of interventionStudyEducationContents. Relates the education content source to the education content.</value>
        [DataMember(Name = "educationContents", EmitDefaultValue = false)]
        public List<EdFiInterventionStudyEducationContent> EducationContents { get; set; }

        /// <summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        /// </summary>
        /// <value>The way in which an intervention is used: curriculum, supplement, or practice.</value>
        [DataMember(Name = "interventionClassDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string InterventionClassDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of interventionStudyInterventionEffectivenesses. Measurement of the effectiveness of the intervention study per diagnosis.
        /// </summary>
        /// <value>An unordered collection of interventionStudyInterventionEffectivenesses. Measurement of the effectiveness of the intervention study per diagnosis.</value>
        [DataMember(Name = "interventionEffectivenesses", EmitDefaultValue = false)]
        public List<EdFiInterventionStudyInterventionEffectiveness> InterventionEffectivenesses { get; set; }

        /// <summary>
        /// An unordered collection of interventionStudyLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        /// <value>An unordered collection of interventionStudyLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</value>
        [DataMember(Name = "learningResourceMetadataURIs", EmitDefaultValue = false)]
        public List<EdFiInterventionStudyLearningResourceMetadataURI> LearningResourceMetadataURIs { get; set; }

        /// <summary>
        /// The number of participants observed in the study.
        /// </summary>
        /// <value>The number of participants observed in the study.</value>
        [DataMember(Name = "participants", IsRequired = true, EmitDefaultValue = true)]
        public int Participants { get; set; }

        /// <summary>
        /// An unordered collection of interventionStudyPopulationServeds. A subset of students that are the focus of the intervention study.
        /// </summary>
        /// <value>An unordered collection of interventionStudyPopulationServeds. A subset of students that are the focus of the intervention study.</value>
        [DataMember(Name = "populationServeds", EmitDefaultValue = false)]
        public List<EdFiInterventionStudyPopulationServed> PopulationServeds { get; set; }

        /// <summary>
        /// An unordered collection of interventionStudyStateAbbreviations. The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.
        /// </summary>
        /// <value>An unordered collection of interventionStudyStateAbbreviations. The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.</value>
        [DataMember(Name = "stateAbbreviations", EmitDefaultValue = false)]
        public List<EdFiInterventionStudyStateAbbreviation> StateAbbreviations { get; set; }

        /// <summary>
        /// An unordered collection of interventionStudyURIs. The URI (typical a URL) pointing to an education content item.
        /// </summary>
        /// <value>An unordered collection of interventionStudyURIs. The URI (typical a URL) pointing to an education content item.</value>
        [DataMember(Name = "uris", EmitDefaultValue = false)]
        public List<EdFiInterventionStudyURI> Uris { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the InterventionStudy entity.
        /// </summary>
        /// <value>Extensions to the InterventionStudy entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiInterventionStudy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InterventionStudyIdentificationCode: ").Append(InterventionStudyIdentificationCode).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  InterventionPrescriptionReference: ").Append(InterventionPrescriptionReference).Append("\n");
            sb.Append("  AppropriateGradeLevels: ").Append(AppropriateGradeLevels).Append("\n");
            sb.Append("  AppropriateSexes: ").Append(AppropriateSexes).Append("\n");
            sb.Append("  DeliveryMethodDescriptor: ").Append(DeliveryMethodDescriptor).Append("\n");
            sb.Append("  EducationContents: ").Append(EducationContents).Append("\n");
            sb.Append("  InterventionClassDescriptor: ").Append(InterventionClassDescriptor).Append("\n");
            sb.Append("  InterventionEffectivenesses: ").Append(InterventionEffectivenesses).Append("\n");
            sb.Append("  LearningResourceMetadataURIs: ").Append(LearningResourceMetadataURIs).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  PopulationServeds: ").Append(PopulationServeds).Append("\n");
            sb.Append("  StateAbbreviations: ").Append(StateAbbreviations).Append("\n");
            sb.Append("  Uris: ").Append(Uris).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InterventionStudyIdentificationCode (string) maxLength
            if (this.InterventionStudyIdentificationCode != null && this.InterventionStudyIdentificationCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for InterventionStudyIdentificationCode, length must be less than 60.", new [] { "InterventionStudyIdentificationCode" });
            }

            // DeliveryMethodDescriptor (string) maxLength
            if (this.DeliveryMethodDescriptor != null && this.DeliveryMethodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DeliveryMethodDescriptor, length must be less than 306.", new [] { "DeliveryMethodDescriptor" });
            }

            // InterventionClassDescriptor (string) maxLength
            if (this.InterventionClassDescriptor != null && this.InterventionClassDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for InterventionClassDescriptor, length must be less than 306.", new [] { "InterventionClassDescriptor" });
            }

            yield break;
        }
    }

}
