/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiDisciplineAction
    /// </summary>
    [DataContract(Name = "edFi_disciplineAction")]
    public partial class EdFiDisciplineAction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiDisciplineAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiDisciplineAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiDisciplineAction" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="disciplineActionIdentifier">Identifier assigned by the education organization to the discipline action. (required).</param>
        /// <param name="disciplineDate">The date of the discipline action. (required).</param>
        /// <param name="disciplines">An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident. (required).</param>
        /// <param name="assignmentSchoolReference">assignmentSchoolReference.</param>
        /// <param name="responsibilitySchoolReference">responsibilitySchoolReference (required).</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="actualDisciplineActionLength">Indicates the actual length in school days of a student&#39;s disciplinary assignment..</param>
        /// <param name="disciplineActionLength">The length of time in school days for the discipline action (e.g. removal, detention), if applicable..</param>
        /// <param name="disciplineActionLengthDifferenceReasonDescriptor">Indicates the reason for the difference, if any, between the official and actual lengths of a student&#39;s disciplinary assignment..</param>
        /// <param name="iepPlacementMeetingIndicator">An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student&#39;s Individualized Education Program (IEP) team to determine appropriate placement..</param>
        /// <param name="relatedToZeroTolerancePolicy">An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies..</param>
        /// <param name="staffs">An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the discipline action..</param>
        /// <param name="studentDisciplineIncidentBehaviorAssociations">An unordered collection of disciplineActionStudentDisciplineIncidentBehaviorAssociations. A reference to the behavior(s) by the student that led or contributed to this specific action..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the DisciplineAction entity..</param>
        public EdFiDisciplineAction(string id = default, string disciplineActionIdentifier = default, DateOnly disciplineDate = default, List<EdFiDisciplineActionDiscipline> disciplines = default, EdFiSchoolReference assignmentSchoolReference = default, EdFiSchoolReference responsibilitySchoolReference = default, EdFiStudentReference studentReference = default, double? actualDisciplineActionLength = default, double? disciplineActionLength = default, string disciplineActionLengthDifferenceReasonDescriptor = default, bool? iepPlacementMeetingIndicator = default, bool? relatedToZeroTolerancePolicy = default, List<EdFiDisciplineActionStaff> staffs = default, List<EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation> studentDisciplineIncidentBehaviorAssociations = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "disciplineActionIdentifier" is required (not null)
            if (disciplineActionIdentifier == null)
            {
                throw new ArgumentNullException("disciplineActionIdentifier is a required property for EdFiDisciplineAction and cannot be null");
            }
            this.DisciplineActionIdentifier = disciplineActionIdentifier;
            this.DisciplineDate = disciplineDate;
            // to ensure "disciplines" is required (not null)
            if (disciplines == null)
            {
                throw new ArgumentNullException("disciplines is a required property for EdFiDisciplineAction and cannot be null");
            }
            this.Disciplines = disciplines;
            // to ensure "responsibilitySchoolReference" is required (not null)
            if (responsibilitySchoolReference == null)
            {
                throw new ArgumentNullException("responsibilitySchoolReference is a required property for EdFiDisciplineAction and cannot be null");
            }
            this.ResponsibilitySchoolReference = responsibilitySchoolReference;
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new ArgumentNullException("studentReference is a required property for EdFiDisciplineAction and cannot be null");
            }
            this.StudentReference = studentReference;
            this.Id = id;
            this.AssignmentSchoolReference = assignmentSchoolReference;
            this.ActualDisciplineActionLength = actualDisciplineActionLength;
            this.DisciplineActionLength = disciplineActionLength;
            this.DisciplineActionLengthDifferenceReasonDescriptor = disciplineActionLengthDifferenceReasonDescriptor;
            this.IepPlacementMeetingIndicator = iepPlacementMeetingIndicator;
            this.RelatedToZeroTolerancePolicy = relatedToZeroTolerancePolicy;
            this.Staffs = staffs;
            this.StudentDisciplineIncidentBehaviorAssociations = studentDisciplineIncidentBehaviorAssociations;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier assigned by the education organization to the discipline action.
        /// </summary>
        /// <value>Identifier assigned by the education organization to the discipline action.</value>
        [DataMember(Name = "disciplineActionIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string DisciplineActionIdentifier { get; set; }

        /// <summary>
        /// The date of the discipline action.
        /// </summary>
        /// <value>The date of the discipline action.</value>
        [DataMember(Name = "disciplineDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly DisciplineDate { get; set; }

        /// <summary>
        /// An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.
        /// </summary>
        /// <value>An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.</value>
        [DataMember(Name = "disciplines", IsRequired = true, EmitDefaultValue = true)]
        public List<EdFiDisciplineActionDiscipline> Disciplines { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentSchoolReference
        /// </summary>
        [DataMember(Name = "assignmentSchoolReference", EmitDefaultValue = false)]
        public EdFiSchoolReference AssignmentSchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets ResponsibilitySchoolReference
        /// </summary>
        [DataMember(Name = "responsibilitySchoolReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolReference ResponsibilitySchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name = "studentReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Indicates the actual length in school days of a student&#39;s disciplinary assignment.
        /// </summary>
        /// <value>Indicates the actual length in school days of a student&#39;s disciplinary assignment.</value>
        [DataMember(Name = "actualDisciplineActionLength", EmitDefaultValue = true)]
        public double? ActualDisciplineActionLength { get; set; }

        /// <summary>
        /// The length of time in school days for the discipline action (e.g. removal, detention), if applicable.
        /// </summary>
        /// <value>The length of time in school days for the discipline action (e.g. removal, detention), if applicable.</value>
        [DataMember(Name = "disciplineActionLength", EmitDefaultValue = true)]
        public double? DisciplineActionLength { get; set; }

        /// <summary>
        /// Indicates the reason for the difference, if any, between the official and actual lengths of a student&#39;s disciplinary assignment.
        /// </summary>
        /// <value>Indicates the reason for the difference, if any, between the official and actual lengths of a student&#39;s disciplinary assignment.</value>
        [DataMember(Name = "disciplineActionLengthDifferenceReasonDescriptor", EmitDefaultValue = true)]
        public string DisciplineActionLengthDifferenceReasonDescriptor { get; set; }

        /// <summary>
        /// An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student&#39;s Individualized Education Program (IEP) team to determine appropriate placement.
        /// </summary>
        /// <value>An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student&#39;s Individualized Education Program (IEP) team to determine appropriate placement.</value>
        [DataMember(Name = "iepPlacementMeetingIndicator", EmitDefaultValue = true)]
        public bool? IepPlacementMeetingIndicator { get; set; }

        /// <summary>
        /// An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.
        /// </summary>
        /// <value>An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.</value>
        [DataMember(Name = "relatedToZeroTolerancePolicy", EmitDefaultValue = true)]
        public bool? RelatedToZeroTolerancePolicy { get; set; }

        /// <summary>
        /// An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the discipline action.
        /// </summary>
        /// <value>An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the discipline action.</value>
        [DataMember(Name = "staffs", EmitDefaultValue = false)]
        public List<EdFiDisciplineActionStaff> Staffs { get; set; }

        /// <summary>
        /// An unordered collection of disciplineActionStudentDisciplineIncidentBehaviorAssociations. A reference to the behavior(s) by the student that led or contributed to this specific action.
        /// </summary>
        /// <value>An unordered collection of disciplineActionStudentDisciplineIncidentBehaviorAssociations. A reference to the behavior(s) by the student that led or contributed to this specific action.</value>
        [DataMember(Name = "studentDisciplineIncidentBehaviorAssociations", EmitDefaultValue = false)]
        public List<EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation> StudentDisciplineIncidentBehaviorAssociations { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the DisciplineAction entity.
        /// </summary>
        /// <value>Extensions to the DisciplineAction entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiDisciplineAction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisciplineActionIdentifier: ").Append(DisciplineActionIdentifier).Append("\n");
            sb.Append("  DisciplineDate: ").Append(DisciplineDate).Append("\n");
            sb.Append("  Disciplines: ").Append(Disciplines).Append("\n");
            sb.Append("  AssignmentSchoolReference: ").Append(AssignmentSchoolReference).Append("\n");
            sb.Append("  ResponsibilitySchoolReference: ").Append(ResponsibilitySchoolReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  ActualDisciplineActionLength: ").Append(ActualDisciplineActionLength).Append("\n");
            sb.Append("  DisciplineActionLength: ").Append(DisciplineActionLength).Append("\n");
            sb.Append("  DisciplineActionLengthDifferenceReasonDescriptor: ").Append(DisciplineActionLengthDifferenceReasonDescriptor).Append("\n");
            sb.Append("  IepPlacementMeetingIndicator: ").Append(IepPlacementMeetingIndicator).Append("\n");
            sb.Append("  RelatedToZeroTolerancePolicy: ").Append(RelatedToZeroTolerancePolicy).Append("\n");
            sb.Append("  Staffs: ").Append(Staffs).Append("\n");
            sb.Append("  StudentDisciplineIncidentBehaviorAssociations: ").Append(StudentDisciplineIncidentBehaviorAssociations).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisciplineActionIdentifier (string) maxLength
            if (this.DisciplineActionIdentifier != null && this.DisciplineActionIdentifier.Length > 36)
            {
                yield return new ValidationResult("Invalid value for DisciplineActionIdentifier, length must be less than 36.", new [] { "DisciplineActionIdentifier" });
            }

            // ActualDisciplineActionLength (double?) maximum
            if (this.ActualDisciplineActionLength > (double?)999.99)
            {
                yield return new ValidationResult("Invalid value for ActualDisciplineActionLength, must be a value less than or equal to 999.99.", new [] { "ActualDisciplineActionLength" });
            }

            // ActualDisciplineActionLength (double?) minimum
            if (this.ActualDisciplineActionLength < (double?)0.0)
            {
                yield return new ValidationResult("Invalid value for ActualDisciplineActionLength, must be a value greater than or equal to 0.0.", new [] { "ActualDisciplineActionLength" });
            }

            // DisciplineActionLength (double?) maximum
            if (this.DisciplineActionLength > (double?)999.99)
            {
                yield return new ValidationResult("Invalid value for DisciplineActionLength, must be a value less than or equal to 999.99.", new [] { "DisciplineActionLength" });
            }

            // DisciplineActionLength (double?) minimum
            if (this.DisciplineActionLength < (double?)0.0)
            {
                yield return new ValidationResult("Invalid value for DisciplineActionLength, must be a value greater than or equal to 0.0.", new [] { "DisciplineActionLength" });
            }

            // DisciplineActionLengthDifferenceReasonDescriptor (string) maxLength
            if (this.DisciplineActionLengthDifferenceReasonDescriptor != null && this.DisciplineActionLengthDifferenceReasonDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DisciplineActionLengthDifferenceReasonDescriptor, length must be less than 306.", new [] { "DisciplineActionLengthDifferenceReasonDescriptor" });
            }

            yield break;
        }
    }

}
