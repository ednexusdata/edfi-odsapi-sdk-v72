/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiGraduationPlan
    /// </summary>
    [DataContract(Name = "edFi_graduationPlan")]
    public partial class EdFiGraduationPlan : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGraduationPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGraduationPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGraduationPlan" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="graduationSchoolYearTypeReference">graduationSchoolYearTypeReference (required).</param>
        /// <param name="creditsByCourses">An unordered collection of graduationPlanCreditsByCourses. The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses..</param>
        /// <param name="creditsByCreditCategories">An unordered collection of graduationPlanCreditsByCreditCategories. The total credits required for graduation based on the credit category..</param>
        /// <param name="creditsBySubjects">An unordered collection of graduationPlanCreditsBySubjects. The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements..</param>
        /// <param name="individualPlan">An indicator of whether the graduation plan is tailored for an individual..</param>
        /// <param name="requiredAssessments">An unordered collection of graduationPlanRequiredAssessments. The assessments and associated required score and performance level needed to satisfy graduation requirements..</param>
        /// <param name="totalRequiredCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="totalRequiredCredits">The value of credits or units of value awarded for the completion of a course. (required).</param>
        /// <param name="totalRequiredCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the GraduationPlan entity..</param>
        public EdFiGraduationPlan(string id = default, string graduationPlanTypeDescriptor = default, EdFiEducationOrganizationReference educationOrganizationReference = default, EdFiSchoolYearTypeReference graduationSchoolYearTypeReference = default, List<EdFiGraduationPlanCreditsByCourse> creditsByCourses = default, List<EdFiGraduationPlanCreditsByCreditCategory> creditsByCreditCategories = default, List<EdFiGraduationPlanCreditsBySubject> creditsBySubjects = default, bool? individualPlan = default, List<EdFiGraduationPlanRequiredAssessment> requiredAssessments = default, double? totalRequiredCreditConversion = default, double totalRequiredCredits = default, string totalRequiredCreditTypeDescriptor = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "graduationPlanTypeDescriptor" is required (not null)
            if (graduationPlanTypeDescriptor == null)
            {
                throw new ArgumentNullException("graduationPlanTypeDescriptor is a required property for EdFiGraduationPlan and cannot be null");
            }
            this.GraduationPlanTypeDescriptor = graduationPlanTypeDescriptor;
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new ArgumentNullException("educationOrganizationReference is a required property for EdFiGraduationPlan and cannot be null");
            }
            this.EducationOrganizationReference = educationOrganizationReference;
            // to ensure "graduationSchoolYearTypeReference" is required (not null)
            if (graduationSchoolYearTypeReference == null)
            {
                throw new ArgumentNullException("graduationSchoolYearTypeReference is a required property for EdFiGraduationPlan and cannot be null");
            }
            this.GraduationSchoolYearTypeReference = graduationSchoolYearTypeReference;
            this.TotalRequiredCredits = totalRequiredCredits;
            this.Id = id;
            this.CreditsByCourses = creditsByCourses;
            this.CreditsByCreditCategories = creditsByCreditCategories;
            this.CreditsBySubjects = creditsBySubjects;
            this.IndividualPlan = individualPlan;
            this.RequiredAssessments = requiredAssessments;
            this.TotalRequiredCreditConversion = totalRequiredCreditConversion;
            this.TotalRequiredCreditTypeDescriptor = totalRequiredCreditTypeDescriptor;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The type of academic plan the student is following for graduation.
        /// </summary>
        /// <value>The type of academic plan the student is following for graduation.</value>
        [DataMember(Name = "graduationPlanTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string GraduationPlanTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets GraduationSchoolYearTypeReference
        /// </summary>
        [DataMember(Name = "graduationSchoolYearTypeReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolYearTypeReference GraduationSchoolYearTypeReference { get; set; }

        /// <summary>
        /// An unordered collection of graduationPlanCreditsByCourses. The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.
        /// </summary>
        /// <value>An unordered collection of graduationPlanCreditsByCourses. The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.</value>
        [DataMember(Name = "creditsByCourses", EmitDefaultValue = false)]
        public List<EdFiGraduationPlanCreditsByCourse> CreditsByCourses { get; set; }

        /// <summary>
        /// An unordered collection of graduationPlanCreditsByCreditCategories. The total credits required for graduation based on the credit category.
        /// </summary>
        /// <value>An unordered collection of graduationPlanCreditsByCreditCategories. The total credits required for graduation based on the credit category.</value>
        [DataMember(Name = "creditsByCreditCategories", EmitDefaultValue = false)]
        public List<EdFiGraduationPlanCreditsByCreditCategory> CreditsByCreditCategories { get; set; }

        /// <summary>
        /// An unordered collection of graduationPlanCreditsBySubjects. The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.
        /// </summary>
        /// <value>An unordered collection of graduationPlanCreditsBySubjects. The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.</value>
        [DataMember(Name = "creditsBySubjects", EmitDefaultValue = false)]
        public List<EdFiGraduationPlanCreditsBySubject> CreditsBySubjects { get; set; }

        /// <summary>
        /// An indicator of whether the graduation plan is tailored for an individual.
        /// </summary>
        /// <value>An indicator of whether the graduation plan is tailored for an individual.</value>
        [DataMember(Name = "individualPlan", EmitDefaultValue = true)]
        public bool? IndividualPlan { get; set; }

        /// <summary>
        /// An unordered collection of graduationPlanRequiredAssessments. The assessments and associated required score and performance level needed to satisfy graduation requirements.
        /// </summary>
        /// <value>An unordered collection of graduationPlanRequiredAssessments. The assessments and associated required score and performance level needed to satisfy graduation requirements.</value>
        [DataMember(Name = "requiredAssessments", EmitDefaultValue = false)]
        public List<EdFiGraduationPlanRequiredAssessment> RequiredAssessments { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name = "totalRequiredCreditConversion", EmitDefaultValue = true)]
        public double? TotalRequiredCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "totalRequiredCredits", IsRequired = true, EmitDefaultValue = true)]
        public double TotalRequiredCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "totalRequiredCreditTypeDescriptor", EmitDefaultValue = true)]
        public string TotalRequiredCreditTypeDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the GraduationPlan entity.
        /// </summary>
        /// <value>Extensions to the GraduationPlan entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGraduationPlan {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GraduationPlanTypeDescriptor: ").Append(GraduationPlanTypeDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  GraduationSchoolYearTypeReference: ").Append(GraduationSchoolYearTypeReference).Append("\n");
            sb.Append("  CreditsByCourses: ").Append(CreditsByCourses).Append("\n");
            sb.Append("  CreditsByCreditCategories: ").Append(CreditsByCreditCategories).Append("\n");
            sb.Append("  CreditsBySubjects: ").Append(CreditsBySubjects).Append("\n");
            sb.Append("  IndividualPlan: ").Append(IndividualPlan).Append("\n");
            sb.Append("  RequiredAssessments: ").Append(RequiredAssessments).Append("\n");
            sb.Append("  TotalRequiredCreditConversion: ").Append(TotalRequiredCreditConversion).Append("\n");
            sb.Append("  TotalRequiredCredits: ").Append(TotalRequiredCredits).Append("\n");
            sb.Append("  TotalRequiredCreditTypeDescriptor: ").Append(TotalRequiredCreditTypeDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GraduationPlanTypeDescriptor (string) maxLength
            if (this.GraduationPlanTypeDescriptor != null && this.GraduationPlanTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GraduationPlanTypeDescriptor, length must be less than 306.", new [] { "GraduationPlanTypeDescriptor" });
            }

            // TotalRequiredCreditConversion (double?) maximum
            if (this.TotalRequiredCreditConversion > (double?)9999999.99)
            {
                yield return new ValidationResult("Invalid value for TotalRequiredCreditConversion, must be a value less than or equal to 9999999.99.", new [] { "TotalRequiredCreditConversion" });
            }

            // TotalRequiredCreditConversion (double?) minimum
            if (this.TotalRequiredCreditConversion < (double?)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for TotalRequiredCreditConversion, must be a value greater than or equal to -9999999.99.", new [] { "TotalRequiredCreditConversion" });
            }

            // TotalRequiredCredits (double) maximum
            if (this.TotalRequiredCredits > (double)999999.999)
            {
                yield return new ValidationResult("Invalid value for TotalRequiredCredits, must be a value less than or equal to 999999.999.", new [] { "TotalRequiredCredits" });
            }

            // TotalRequiredCredits (double) minimum
            if (this.TotalRequiredCredits < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for TotalRequiredCredits, must be a value greater than or equal to 0.0.", new [] { "TotalRequiredCredits" });
            }

            // TotalRequiredCreditTypeDescriptor (string) maxLength
            if (this.TotalRequiredCreditTypeDescriptor != null && this.TotalRequiredCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for TotalRequiredCreditTypeDescriptor, length must be less than 306.", new [] { "TotalRequiredCreditTypeDescriptor" });
            }

            yield break;
        }
    }

}
