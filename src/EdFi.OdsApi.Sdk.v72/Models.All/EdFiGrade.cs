/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiGrade
    /// </summary>
    [DataContract(Name = "edFi_grade")]
    public partial class EdFiGrade : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGrade" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGrade() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGrade" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="gradeTypeDescriptor">The type of grade reported (e.g., exam, final, grading period). (required).</param>
        /// <param name="gradingPeriodReference">gradingPeriodReference (required).</param>
        /// <param name="studentSectionAssociationReference">studentSectionAssociationReference (required).</param>
        /// <param name="currentGradeAsOfDate">As-Of date for a grade posted as the current grade..</param>
        /// <param name="currentGradeIndicator">An indicator that the posted grade is an interim grade for the grading period and not the final grade..</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score..</param>
        /// <param name="gradeEarnedDescription">A description of the grade earned by the learner..</param>
        /// <param name="learningStandardGrades">An unordered collection of gradeLearningStandardGrades. A collection of learning standards associated with the grade..</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor..</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor..</param>
        /// <param name="performanceBaseConversionDescriptor">A conversion of the level to a standard set of performance levels..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the Grade entity..</param>
        public EdFiGrade(string id = default, string gradeTypeDescriptor = default, EdFiGradingPeriodReference gradingPeriodReference = default, EdFiStudentSectionAssociationReference studentSectionAssociationReference = default, DateOnly? currentGradeAsOfDate = default, bool? currentGradeIndicator = default, string diagnosticStatement = default, string gradeEarnedDescription = default, List<EdFiGradeLearningStandardGrade> learningStandardGrades = default, string letterGradeEarned = default, double? numericGradeEarned = default, string performanceBaseConversionDescriptor = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "gradeTypeDescriptor" is required (not null)
            if (gradeTypeDescriptor == null)
            {
                throw new ArgumentNullException("gradeTypeDescriptor is a required property for EdFiGrade and cannot be null");
            }
            this.GradeTypeDescriptor = gradeTypeDescriptor;
            // to ensure "gradingPeriodReference" is required (not null)
            if (gradingPeriodReference == null)
            {
                throw new ArgumentNullException("gradingPeriodReference is a required property for EdFiGrade and cannot be null");
            }
            this.GradingPeriodReference = gradingPeriodReference;
            // to ensure "studentSectionAssociationReference" is required (not null)
            if (studentSectionAssociationReference == null)
            {
                throw new ArgumentNullException("studentSectionAssociationReference is a required property for EdFiGrade and cannot be null");
            }
            this.StudentSectionAssociationReference = studentSectionAssociationReference;
            this.Id = id;
            this.CurrentGradeAsOfDate = currentGradeAsOfDate;
            this.CurrentGradeIndicator = currentGradeIndicator;
            this.DiagnosticStatement = diagnosticStatement;
            this.GradeEarnedDescription = gradeEarnedDescription;
            this.LearningStandardGrades = learningStandardGrades;
            this.LetterGradeEarned = letterGradeEarned;
            this.NumericGradeEarned = numericGradeEarned;
            this.PerformanceBaseConversionDescriptor = performanceBaseConversionDescriptor;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The type of grade reported (e.g., exam, final, grading period).
        /// </summary>
        /// <value>The type of grade reported (e.g., exam, final, grading period).</value>
        [DataMember(Name = "gradeTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string GradeTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets GradingPeriodReference
        /// </summary>
        [DataMember(Name = "gradingPeriodReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiGradingPeriodReference GradingPeriodReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentSectionAssociationReference
        /// </summary>
        [DataMember(Name = "studentSectionAssociationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStudentSectionAssociationReference StudentSectionAssociationReference { get; set; }

        /// <summary>
        /// As-Of date for a grade posted as the current grade.
        /// </summary>
        /// <value>As-Of date for a grade posted as the current grade.</value>
        [DataMember(Name = "currentGradeAsOfDate", EmitDefaultValue = true)]
        public DateOnly? CurrentGradeAsOfDate { get; set; }

        /// <summary>
        /// An indicator that the posted grade is an interim grade for the grading period and not the final grade.
        /// </summary>
        /// <value>An indicator that the posted grade is an interim grade for the grading period and not the final grade.</value>
        [DataMember(Name = "currentGradeIndicator", EmitDefaultValue = true)]
        public bool? CurrentGradeIndicator { get; set; }

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        /// <value>A statement provided by the teacher that provides information in addition to the grade or assessment score.</value>
        [DataMember(Name = "diagnosticStatement", EmitDefaultValue = true)]
        public string DiagnosticStatement { get; set; }

        /// <summary>
        /// A description of the grade earned by the learner.
        /// </summary>
        /// <value>A description of the grade earned by the learner.</value>
        [DataMember(Name = "gradeEarnedDescription", EmitDefaultValue = true)]
        public string GradeEarnedDescription { get; set; }

        /// <summary>
        /// An unordered collection of gradeLearningStandardGrades. A collection of learning standards associated with the grade.
        /// </summary>
        /// <value>An unordered collection of gradeLearningStandardGrades. A collection of learning standards associated with the grade.</value>
        [DataMember(Name = "learningStandardGrades", EmitDefaultValue = false)]
        public List<EdFiGradeLearningStandardGrade> LearningStandardGrades { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</value>
        [DataMember(Name = "letterGradeEarned", EmitDefaultValue = true)]
        public string LetterGradeEarned { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</value>
        [DataMember(Name = "numericGradeEarned", EmitDefaultValue = true)]
        public double? NumericGradeEarned { get; set; }

        /// <summary>
        /// A conversion of the level to a standard set of performance levels.
        /// </summary>
        /// <value>A conversion of the level to a standard set of performance levels.</value>
        [DataMember(Name = "performanceBaseConversionDescriptor", EmitDefaultValue = true)]
        public string PerformanceBaseConversionDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the Grade entity.
        /// </summary>
        /// <value>Extensions to the Grade entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGrade {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GradeTypeDescriptor: ").Append(GradeTypeDescriptor).Append("\n");
            sb.Append("  GradingPeriodReference: ").Append(GradingPeriodReference).Append("\n");
            sb.Append("  StudentSectionAssociationReference: ").Append(StudentSectionAssociationReference).Append("\n");
            sb.Append("  CurrentGradeAsOfDate: ").Append(CurrentGradeAsOfDate).Append("\n");
            sb.Append("  CurrentGradeIndicator: ").Append(CurrentGradeIndicator).Append("\n");
            sb.Append("  DiagnosticStatement: ").Append(DiagnosticStatement).Append("\n");
            sb.Append("  GradeEarnedDescription: ").Append(GradeEarnedDescription).Append("\n");
            sb.Append("  LearningStandardGrades: ").Append(LearningStandardGrades).Append("\n");
            sb.Append("  LetterGradeEarned: ").Append(LetterGradeEarned).Append("\n");
            sb.Append("  NumericGradeEarned: ").Append(NumericGradeEarned).Append("\n");
            sb.Append("  PerformanceBaseConversionDescriptor: ").Append(PerformanceBaseConversionDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GradeTypeDescriptor (string) maxLength
            if (this.GradeTypeDescriptor != null && this.GradeTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradeTypeDescriptor, length must be less than 306.", new [] { "GradeTypeDescriptor" });
            }

            // DiagnosticStatement (string) maxLength
            if (this.DiagnosticStatement != null && this.DiagnosticStatement.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for DiagnosticStatement, length must be less than 1024.", new [] { "DiagnosticStatement" });
            }

            // GradeEarnedDescription (string) maxLength
            if (this.GradeEarnedDescription != null && this.GradeEarnedDescription.Length > 64)
            {
                yield return new ValidationResult("Invalid value for GradeEarnedDescription, length must be less than 64.", new [] { "GradeEarnedDescription" });
            }

            // LetterGradeEarned (string) maxLength
            if (this.LetterGradeEarned != null && this.LetterGradeEarned.Length > 20)
            {
                yield return new ValidationResult("Invalid value for LetterGradeEarned, length must be less than 20.", new [] { "LetterGradeEarned" });
            }

            // NumericGradeEarned (double?) maximum
            if (this.NumericGradeEarned > (double?)9999999.99)
            {
                yield return new ValidationResult("Invalid value for NumericGradeEarned, must be a value less than or equal to 9999999.99.", new [] { "NumericGradeEarned" });
            }

            // NumericGradeEarned (double?) minimum
            if (this.NumericGradeEarned < (double?)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for NumericGradeEarned, must be a value greater than or equal to -9999999.99.", new [] { "NumericGradeEarned" });
            }

            // PerformanceBaseConversionDescriptor (string) maxLength
            if (this.PerformanceBaseConversionDescriptor != null && this.PerformanceBaseConversionDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PerformanceBaseConversionDescriptor, length must be less than 306.", new [] { "PerformanceBaseConversionDescriptor" });
            }

            yield break;
        }
    }

}
