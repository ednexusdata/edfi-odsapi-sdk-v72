/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStaffRace
    /// </summary>
    [DataContract(Name = "edFi_staffRace")]
    public partial class EdFiStaffRace : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffRace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaffRace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffRace" /> class.
        /// </summary>
        /// <param name="raceDescriptor">The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races. (required).</param>
        /// <param name="ext">Extensions to the StaffRace entity..</param>
        public EdFiStaffRace(string raceDescriptor = default, Object ext = default)
        {
            // to ensure "raceDescriptor" is required (not null)
            if (raceDescriptor == null)
            {
                throw new ArgumentNullException("raceDescriptor is a required property for EdFiStaffRace and cannot be null");
            }
            this.RaceDescriptor = raceDescriptor;
            this.Ext = ext;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        /// <value>The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.</value>
        [DataMember(Name = "raceDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string RaceDescriptor { get; set; }

        /// <summary>
        /// Extensions to the StaffRace entity.
        /// </summary>
        /// <value>Extensions to the StaffRace entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffRace {\n");
            sb.Append("  RaceDescriptor: ").Append(RaceDescriptor).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RaceDescriptor (string) maxLength
            if (this.RaceDescriptor != null && this.RaceDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for RaceDescriptor, length must be less than 306.", new [] { "RaceDescriptor" });
            }

            yield break;
        }
    }

}
