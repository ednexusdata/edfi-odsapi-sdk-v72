/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiEvaluationRubricDimensionKey
    /// </summary>
    [DataContract(Name = "trackedChanges_edFi_evaluationRubricDimensionKey")]
    public partial class TrackedChangesEdFiEvaluationRubricDimensionKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiEvaluationRubricDimensionKey" /> class.
        /// </summary>
        /// <param name="evaluationRubricRating">The numeric rating associated with the evaluation rubric dimension..</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization..</param>
        /// <param name="programEvaluationElementTitle">The name or title of the program evaluation element..</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation..</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation..</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted..</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies..</param>
        /// <param name="programTypeDescriptor">The type of program..</param>
        public TrackedChangesEdFiEvaluationRubricDimensionKey(int evaluationRubricRating = default, long programEducationOrganizationId = default, string programEvaluationElementTitle = default, string programEvaluationPeriodDescriptor = default, string programEvaluationTitle = default, string programEvaluationTypeDescriptor = default, string programName = default, string programTypeDescriptor = default)
        {
            this.EvaluationRubricRating = evaluationRubricRating;
            this.ProgramEducationOrganizationId = programEducationOrganizationId;
            this.ProgramEvaluationElementTitle = programEvaluationElementTitle;
            this.ProgramEvaluationPeriodDescriptor = programEvaluationPeriodDescriptor;
            this.ProgramEvaluationTitle = programEvaluationTitle;
            this.ProgramEvaluationTypeDescriptor = programEvaluationTypeDescriptor;
            this.ProgramName = programName;
            this.ProgramTypeDescriptor = programTypeDescriptor;
        }

        /// <summary>
        /// The numeric rating associated with the evaluation rubric dimension.
        /// </summary>
        /// <value>The numeric rating associated with the evaluation rubric dimension.</value>
        [DataMember(Name = "evaluationRubricRating", EmitDefaultValue = false)]
        public int EvaluationRubricRating { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [DataMember(Name = "programEducationOrganizationId", EmitDefaultValue = false)]
        public long ProgramEducationOrganizationId { get; set; }

        /// <summary>
        /// The name or title of the program evaluation element.
        /// </summary>
        /// <value>The name or title of the program evaluation element.</value>
        [DataMember(Name = "programEvaluationElementTitle", EmitDefaultValue = false)]
        public string ProgramEvaluationElementTitle { get; set; }

        /// <summary>
        /// The name of the period for the program evaluation.
        /// </summary>
        /// <value>The name of the period for the program evaluation.</value>
        [DataMember(Name = "programEvaluationPeriodDescriptor", EmitDefaultValue = false)]
        public string ProgramEvaluationPeriodDescriptor { get; set; }

        /// <summary>
        /// An assigned unique identifier for the student program evaluation.
        /// </summary>
        /// <value>An assigned unique identifier for the student program evaluation.</value>
        [DataMember(Name = "programEvaluationTitle", EmitDefaultValue = false)]
        public string ProgramEvaluationTitle { get; set; }

        /// <summary>
        /// The type of program evaluation conducted.
        /// </summary>
        /// <value>The type of program evaluation conducted.</value>
        [DataMember(Name = "programEvaluationTypeDescriptor", EmitDefaultValue = false)]
        public string ProgramEvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        /// <value>The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.</value>
        [DataMember(Name = "programName", EmitDefaultValue = false)]
        public string ProgramName { get; set; }

        /// <summary>
        /// The type of program.
        /// </summary>
        /// <value>The type of program.</value>
        [DataMember(Name = "programTypeDescriptor", EmitDefaultValue = false)]
        public string ProgramTypeDescriptor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiEvaluationRubricDimensionKey {\n");
            sb.Append("  EvaluationRubricRating: ").Append(EvaluationRubricRating).Append("\n");
            sb.Append("  ProgramEducationOrganizationId: ").Append(ProgramEducationOrganizationId).Append("\n");
            sb.Append("  ProgramEvaluationElementTitle: ").Append(ProgramEvaluationElementTitle).Append("\n");
            sb.Append("  ProgramEvaluationPeriodDescriptor: ").Append(ProgramEvaluationPeriodDescriptor).Append("\n");
            sb.Append("  ProgramEvaluationTitle: ").Append(ProgramEvaluationTitle).Append("\n");
            sb.Append("  ProgramEvaluationTypeDescriptor: ").Append(ProgramEvaluationTypeDescriptor).Append("\n");
            sb.Append("  ProgramName: ").Append(ProgramName).Append("\n");
            sb.Append("  ProgramTypeDescriptor: ").Append(ProgramTypeDescriptor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramEvaluationElementTitle (string) maxLength
            if (this.ProgramEvaluationElementTitle != null && this.ProgramEvaluationElementTitle.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationElementTitle, length must be less than 50.", new [] { "ProgramEvaluationElementTitle" });
            }

            // ProgramEvaluationPeriodDescriptor (string) maxLength
            if (this.ProgramEvaluationPeriodDescriptor != null && this.ProgramEvaluationPeriodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationPeriodDescriptor, length must be less than 306.", new [] { "ProgramEvaluationPeriodDescriptor" });
            }

            // ProgramEvaluationTitle (string) maxLength
            if (this.ProgramEvaluationTitle != null && this.ProgramEvaluationTitle.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationTitle, length must be less than 50.", new [] { "ProgramEvaluationTitle" });
            }

            // ProgramEvaluationTypeDescriptor (string) maxLength
            if (this.ProgramEvaluationTypeDescriptor != null && this.ProgramEvaluationTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationTypeDescriptor, length must be less than 306.", new [] { "ProgramEvaluationTypeDescriptor" });
            }

            // ProgramName (string) maxLength
            if (this.ProgramName != null && this.ProgramName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ProgramName, length must be less than 60.", new [] { "ProgramName" });
            }

            // ProgramTypeDescriptor (string) maxLength
            if (this.ProgramTypeDescriptor != null && this.ProgramTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramTypeDescriptor, length must be less than 306.", new [] { "ProgramTypeDescriptor" });
            }

            yield break;
        }
    }

}
