/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiProgramEvaluation
    /// </summary>
    [DataContract(Name = "edFi_programEvaluation")]
    public partial class EdFiProgramEvaluation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgramEvaluation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiProgramEvaluation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgramEvaluation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (required).</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (required).</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (required).</param>
        /// <param name="programReference">programReference (required).</param>
        /// <param name="evaluationMaxNumericRating">The maximum summary numerical rating or score for the program evaluation..</param>
        /// <param name="evaluationMinNumericRating">The minimum summary numerical rating or score for the program evaluation. If omitted, assumed to be 0.0.</param>
        /// <param name="levels">An unordered collection of programEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation..</param>
        /// <param name="programEvaluationDescription">The long description of the program evaluation..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the ProgramEvaluation entity..</param>
        public EdFiProgramEvaluation(string id = default, string programEvaluationPeriodDescriptor = default, string programEvaluationTitle = default, string programEvaluationTypeDescriptor = default, EdFiProgramReference programReference = default, double? evaluationMaxNumericRating = default, double? evaluationMinNumericRating = default, List<EdFiProgramEvaluationLevel> levels = default, string programEvaluationDescription = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "programEvaluationPeriodDescriptor" is required (not null)
            if (programEvaluationPeriodDescriptor == null)
            {
                throw new ArgumentNullException("programEvaluationPeriodDescriptor is a required property for EdFiProgramEvaluation and cannot be null");
            }
            this.ProgramEvaluationPeriodDescriptor = programEvaluationPeriodDescriptor;
            // to ensure "programEvaluationTitle" is required (not null)
            if (programEvaluationTitle == null)
            {
                throw new ArgumentNullException("programEvaluationTitle is a required property for EdFiProgramEvaluation and cannot be null");
            }
            this.ProgramEvaluationTitle = programEvaluationTitle;
            // to ensure "programEvaluationTypeDescriptor" is required (not null)
            if (programEvaluationTypeDescriptor == null)
            {
                throw new ArgumentNullException("programEvaluationTypeDescriptor is a required property for EdFiProgramEvaluation and cannot be null");
            }
            this.ProgramEvaluationTypeDescriptor = programEvaluationTypeDescriptor;
            // to ensure "programReference" is required (not null)
            if (programReference == null)
            {
                throw new ArgumentNullException("programReference is a required property for EdFiProgramEvaluation and cannot be null");
            }
            this.ProgramReference = programReference;
            this.Id = id;
            this.EvaluationMaxNumericRating = evaluationMaxNumericRating;
            this.EvaluationMinNumericRating = evaluationMinNumericRating;
            this.Levels = levels;
            this.ProgramEvaluationDescription = programEvaluationDescription;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the period for the program evaluation.
        /// </summary>
        /// <value>The name of the period for the program evaluation.</value>
        [DataMember(Name = "programEvaluationPeriodDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string ProgramEvaluationPeriodDescriptor { get; set; }

        /// <summary>
        /// An assigned unique identifier for the student program evaluation.
        /// </summary>
        /// <value>An assigned unique identifier for the student program evaluation.</value>
        [DataMember(Name = "programEvaluationTitle", IsRequired = true, EmitDefaultValue = true)]
        public string ProgramEvaluationTitle { get; set; }

        /// <summary>
        /// The type of program evaluation conducted.
        /// </summary>
        /// <value>The type of program evaluation conducted.</value>
        [DataMember(Name = "programEvaluationTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string ProgramEvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets ProgramReference
        /// </summary>
        [DataMember(Name = "programReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiProgramReference ProgramReference { get; set; }

        /// <summary>
        /// The maximum summary numerical rating or score for the program evaluation.
        /// </summary>
        /// <value>The maximum summary numerical rating or score for the program evaluation.</value>
        [DataMember(Name = "evaluationMaxNumericRating", EmitDefaultValue = true)]
        public double? EvaluationMaxNumericRating { get; set; }

        /// <summary>
        /// The minimum summary numerical rating or score for the program evaluation. If omitted, assumed to be 0.0
        /// </summary>
        /// <value>The minimum summary numerical rating or score for the program evaluation. If omitted, assumed to be 0.0</value>
        [DataMember(Name = "evaluationMinNumericRating", EmitDefaultValue = true)]
        public double? EvaluationMinNumericRating { get; set; }

        /// <summary>
        /// An unordered collection of programEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation.
        /// </summary>
        /// <value>An unordered collection of programEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation.</value>
        [DataMember(Name = "levels", EmitDefaultValue = false)]
        public List<EdFiProgramEvaluationLevel> Levels { get; set; }

        /// <summary>
        /// The long description of the program evaluation.
        /// </summary>
        /// <value>The long description of the program evaluation.</value>
        [DataMember(Name = "programEvaluationDescription", EmitDefaultValue = true)]
        public string ProgramEvaluationDescription { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the ProgramEvaluation entity.
        /// </summary>
        /// <value>Extensions to the ProgramEvaluation entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiProgramEvaluation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProgramEvaluationPeriodDescriptor: ").Append(ProgramEvaluationPeriodDescriptor).Append("\n");
            sb.Append("  ProgramEvaluationTitle: ").Append(ProgramEvaluationTitle).Append("\n");
            sb.Append("  ProgramEvaluationTypeDescriptor: ").Append(ProgramEvaluationTypeDescriptor).Append("\n");
            sb.Append("  ProgramReference: ").Append(ProgramReference).Append("\n");
            sb.Append("  EvaluationMaxNumericRating: ").Append(EvaluationMaxNumericRating).Append("\n");
            sb.Append("  EvaluationMinNumericRating: ").Append(EvaluationMinNumericRating).Append("\n");
            sb.Append("  Levels: ").Append(Levels).Append("\n");
            sb.Append("  ProgramEvaluationDescription: ").Append(ProgramEvaluationDescription).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramEvaluationPeriodDescriptor (string) maxLength
            if (this.ProgramEvaluationPeriodDescriptor != null && this.ProgramEvaluationPeriodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationPeriodDescriptor, length must be less than 306.", new [] { "ProgramEvaluationPeriodDescriptor" });
            }

            // ProgramEvaluationTitle (string) maxLength
            if (this.ProgramEvaluationTitle != null && this.ProgramEvaluationTitle.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationTitle, length must be less than 50.", new [] { "ProgramEvaluationTitle" });
            }

            // ProgramEvaluationTypeDescriptor (string) maxLength
            if (this.ProgramEvaluationTypeDescriptor != null && this.ProgramEvaluationTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationTypeDescriptor, length must be less than 306.", new [] { "ProgramEvaluationTypeDescriptor" });
            }

            // EvaluationMaxNumericRating (double?) maximum
            if (this.EvaluationMaxNumericRating > (double?)999.999)
            {
                yield return new ValidationResult("Invalid value for EvaluationMaxNumericRating, must be a value less than or equal to 999.999.", new [] { "EvaluationMaxNumericRating" });
            }

            // EvaluationMaxNumericRating (double?) minimum
            if (this.EvaluationMaxNumericRating < (double?)-999.999)
            {
                yield return new ValidationResult("Invalid value for EvaluationMaxNumericRating, must be a value greater than or equal to -999.999.", new [] { "EvaluationMaxNumericRating" });
            }

            // EvaluationMinNumericRating (double?) maximum
            if (this.EvaluationMinNumericRating > (double?)999.999)
            {
                yield return new ValidationResult("Invalid value for EvaluationMinNumericRating, must be a value less than or equal to 999.999.", new [] { "EvaluationMinNumericRating" });
            }

            // EvaluationMinNumericRating (double?) minimum
            if (this.EvaluationMinNumericRating < (double?)-999.999)
            {
                yield return new ValidationResult("Invalid value for EvaluationMinNumericRating, must be a value greater than or equal to -999.999.", new [] { "EvaluationMinNumericRating" });
            }

            // ProgramEvaluationDescription (string) maxLength
            if (this.ProgramEvaluationDescription != null && this.ProgramEvaluationDescription.Length > 255)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationDescription, length must be less than 255.", new [] { "ProgramEvaluationDescription" });
            }

            yield break;
        }
    }

}
