/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiAssessmentItem
    /// </summary>
    [DataContract(Name = "edFi_assessmentItem")]
    public partial class EdFiAssessmentItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessmentItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiAssessmentItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessmentItem" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity. (required).</param>
        /// <param name="assessmentReference">assessmentReference (required).</param>
        /// <param name="assessmentItemCategoryDescriptor">Category or type of the assessment item..</param>
        /// <param name="assessmentItemURI">The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item..</param>
        /// <param name="expectedTimeAssessed">The duration of time allotted for the assessment item..</param>
        /// <param name="itemText">The text of the item..</param>
        /// <param name="learningStandards">An unordered collection of assessmentItemLearningStandards. Learning standard tested by this item..</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum..</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for assessment item..</param>
        /// <param name="possibleResponses">An unordered collection of assessmentItemPossibleResponses. A possible response to an assessment item..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the AssessmentItem entity..</param>
        public EdFiAssessmentItem(string id = default, string identificationCode = default, EdFiAssessmentReference assessmentReference = default, string assessmentItemCategoryDescriptor = default, string assessmentItemURI = default, string expectedTimeAssessed = default, string itemText = default, List<EdFiAssessmentItemLearningStandard> learningStandards = default, double? maxRawScore = default, string nomenclature = default, List<EdFiAssessmentItemPossibleResponse> possibleResponses = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "identificationCode" is required (not null)
            if (identificationCode == null)
            {
                throw new ArgumentNullException("identificationCode is a required property for EdFiAssessmentItem and cannot be null");
            }
            this.IdentificationCode = identificationCode;
            // to ensure "assessmentReference" is required (not null)
            if (assessmentReference == null)
            {
                throw new ArgumentNullException("assessmentReference is a required property for EdFiAssessmentItem and cannot be null");
            }
            this.AssessmentReference = assessmentReference;
            this.Id = id;
            this.AssessmentItemCategoryDescriptor = assessmentItemCategoryDescriptor;
            this.AssessmentItemURI = assessmentItemURI;
            this.ExpectedTimeAssessed = expectedTimeAssessed;
            this.ItemText = itemText;
            this.LearningStandards = learningStandards;
            this.MaxRawScore = maxRawScore;
            this.Nomenclature = nomenclature;
            this.PossibleResponses = possibleResponses;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.</value>
        [DataMember(Name = "identificationCode", IsRequired = true, EmitDefaultValue = true)]
        public string IdentificationCode { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentReference
        /// </summary>
        [DataMember(Name = "assessmentReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiAssessmentReference AssessmentReference { get; set; }

        /// <summary>
        /// Category or type of the assessment item.
        /// </summary>
        /// <value>Category or type of the assessment item.</value>
        [DataMember(Name = "assessmentItemCategoryDescriptor", EmitDefaultValue = true)]
        public string AssessmentItemCategoryDescriptor { get; set; }

        /// <summary>
        /// The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item.
        /// </summary>
        /// <value>The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item.</value>
        [DataMember(Name = "assessmentItemURI", EmitDefaultValue = true)]
        public string AssessmentItemURI { get; set; }

        /// <summary>
        /// The duration of time allotted for the assessment item.
        /// </summary>
        /// <value>The duration of time allotted for the assessment item.</value>
        [DataMember(Name = "expectedTimeAssessed", EmitDefaultValue = true)]
        public string ExpectedTimeAssessed { get; set; }

        /// <summary>
        /// The text of the item.
        /// </summary>
        /// <value>The text of the item.</value>
        [DataMember(Name = "itemText", EmitDefaultValue = true)]
        public string ItemText { get; set; }

        /// <summary>
        /// An unordered collection of assessmentItemLearningStandards. Learning standard tested by this item.
        /// </summary>
        /// <value>An unordered collection of assessmentItemLearningStandards. Learning standard tested by this item.</value>
        [DataMember(Name = "learningStandards", EmitDefaultValue = false)]
        public List<EdFiAssessmentItemLearningStandard> LearningStandards { get; set; }

        /// <summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        /// </summary>
        /// <value>The maximum raw score achievable across all assessment items that are correct and scored at the maximum.</value>
        [DataMember(Name = "maxRawScore", EmitDefaultValue = true)]
        public double? MaxRawScore { get; set; }

        /// <summary>
        /// Reflects the specific nomenclature used for assessment item.
        /// </summary>
        /// <value>Reflects the specific nomenclature used for assessment item.</value>
        [DataMember(Name = "nomenclature", EmitDefaultValue = true)]
        public string Nomenclature { get; set; }

        /// <summary>
        /// An unordered collection of assessmentItemPossibleResponses. A possible response to an assessment item.
        /// </summary>
        /// <value>An unordered collection of assessmentItemPossibleResponses. A possible response to an assessment item.</value>
        [DataMember(Name = "possibleResponses", EmitDefaultValue = false)]
        public List<EdFiAssessmentItemPossibleResponse> PossibleResponses { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the AssessmentItem entity.
        /// </summary>
        /// <value>Extensions to the AssessmentItem entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAssessmentItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdentificationCode: ").Append(IdentificationCode).Append("\n");
            sb.Append("  AssessmentReference: ").Append(AssessmentReference).Append("\n");
            sb.Append("  AssessmentItemCategoryDescriptor: ").Append(AssessmentItemCategoryDescriptor).Append("\n");
            sb.Append("  AssessmentItemURI: ").Append(AssessmentItemURI).Append("\n");
            sb.Append("  ExpectedTimeAssessed: ").Append(ExpectedTimeAssessed).Append("\n");
            sb.Append("  ItemText: ").Append(ItemText).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  MaxRawScore: ").Append(MaxRawScore).Append("\n");
            sb.Append("  Nomenclature: ").Append(Nomenclature).Append("\n");
            sb.Append("  PossibleResponses: ").Append(PossibleResponses).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IdentificationCode (string) maxLength
            if (this.IdentificationCode != null && this.IdentificationCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for IdentificationCode, length must be less than 60.", new [] { "IdentificationCode" });
            }

            // AssessmentItemCategoryDescriptor (string) maxLength
            if (this.AssessmentItemCategoryDescriptor != null && this.AssessmentItemCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AssessmentItemCategoryDescriptor, length must be less than 306.", new [] { "AssessmentItemCategoryDescriptor" });
            }

            // AssessmentItemURI (string) maxLength
            if (this.AssessmentItemURI != null && this.AssessmentItemURI.Length > 255)
            {
                yield return new ValidationResult("Invalid value for AssessmentItemURI, length must be less than 255.", new [] { "AssessmentItemURI" });
            }

            // AssessmentItemURI (string) minLength
            if (this.AssessmentItemURI != null && this.AssessmentItemURI.Length < 5)
            {
                yield return new ValidationResult("Invalid value for AssessmentItemURI, length must be greater than 5.", new [] { "AssessmentItemURI" });
            }

            // ExpectedTimeAssessed (string) maxLength
            if (this.ExpectedTimeAssessed != null && this.ExpectedTimeAssessed.Length > 30)
            {
                yield return new ValidationResult("Invalid value for ExpectedTimeAssessed, length must be less than 30.", new [] { "ExpectedTimeAssessed" });
            }

            // ItemText (string) maxLength
            if (this.ItemText != null && this.ItemText.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for ItemText, length must be less than 1024.", new [] { "ItemText" });
            }

            // MaxRawScore (double?) maximum
            if (this.MaxRawScore > (double?)9999999999.99999)
            {
                yield return new ValidationResult("Invalid value for MaxRawScore, must be a value less than or equal to 9999999999.99999.", new [] { "MaxRawScore" });
            }

            // MaxRawScore (double?) minimum
            if (this.MaxRawScore < (double?)-9999999999.99999)
            {
                yield return new ValidationResult("Invalid value for MaxRawScore, must be a value greater than or equal to -9999999999.99999.", new [] { "MaxRawScore" });
            }

            // Nomenclature (string) maxLength
            if (this.Nomenclature != null && this.Nomenclature.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Nomenclature, length must be less than 100.", new [] { "Nomenclature" });
            }

            yield break;
        }
    }

}
