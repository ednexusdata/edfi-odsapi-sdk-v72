/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiGradeLearningStandardGrade
    /// </summary>
    [DataContract(Name = "edFi_gradeLearningStandardGrade")]
    public partial class EdFiGradeLearningStandardGrade : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradeLearningStandardGrade" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGradeLearningStandardGrade() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradeLearningStandardGrade" /> class.
        /// </summary>
        /// <param name="performanceBaseConversionDescriptor">A performance level that describes the student proficiency..</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score..</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance for a learning standard as submitted by the instructor..</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance for a learning standard as submitted by the instructor..</param>
        /// <param name="learningStandardReference">learningStandardReference (required).</param>
        /// <param name="ext">Extensions to the GradeLearningStandardGrade entity..</param>
        public EdFiGradeLearningStandardGrade(string performanceBaseConversionDescriptor = default, string diagnosticStatement = default, string letterGradeEarned = default, double? numericGradeEarned = default, EdFiLearningStandardReference learningStandardReference = default, Object ext = default)
        {
            // to ensure "learningStandardReference" is required (not null)
            if (learningStandardReference == null)
            {
                throw new ArgumentNullException("learningStandardReference is a required property for EdFiGradeLearningStandardGrade and cannot be null");
            }
            this.LearningStandardReference = learningStandardReference;
            this.PerformanceBaseConversionDescriptor = performanceBaseConversionDescriptor;
            this.DiagnosticStatement = diagnosticStatement;
            this.LetterGradeEarned = letterGradeEarned;
            this.NumericGradeEarned = numericGradeEarned;
            this.Ext = ext;
        }

        /// <summary>
        /// A performance level that describes the student proficiency.
        /// </summary>
        /// <value>A performance level that describes the student proficiency.</value>
        [DataMember(Name = "performanceBaseConversionDescriptor", EmitDefaultValue = true)]
        public string PerformanceBaseConversionDescriptor { get; set; }

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        /// <value>A statement provided by the teacher that provides information in addition to the grade or assessment score.</value>
        [DataMember(Name = "diagnosticStatement", EmitDefaultValue = true)]
        public string DiagnosticStatement { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance for a learning standard as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance for a learning standard as submitted by the instructor.</value>
        [DataMember(Name = "letterGradeEarned", EmitDefaultValue = true)]
        public string LetterGradeEarned { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance for a learning standard as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance for a learning standard as submitted by the instructor.</value>
        [DataMember(Name = "numericGradeEarned", EmitDefaultValue = true)]
        public double? NumericGradeEarned { get; set; }

        /// <summary>
        /// Gets or Sets LearningStandardReference
        /// </summary>
        [DataMember(Name = "learningStandardReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiLearningStandardReference LearningStandardReference { get; set; }

        /// <summary>
        /// Extensions to the GradeLearningStandardGrade entity.
        /// </summary>
        /// <value>Extensions to the GradeLearningStandardGrade entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGradeLearningStandardGrade {\n");
            sb.Append("  PerformanceBaseConversionDescriptor: ").Append(PerformanceBaseConversionDescriptor).Append("\n");
            sb.Append("  DiagnosticStatement: ").Append(DiagnosticStatement).Append("\n");
            sb.Append("  LetterGradeEarned: ").Append(LetterGradeEarned).Append("\n");
            sb.Append("  NumericGradeEarned: ").Append(NumericGradeEarned).Append("\n");
            sb.Append("  LearningStandardReference: ").Append(LearningStandardReference).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PerformanceBaseConversionDescriptor (string) maxLength
            if (this.PerformanceBaseConversionDescriptor != null && this.PerformanceBaseConversionDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PerformanceBaseConversionDescriptor, length must be less than 306.", new [] { "PerformanceBaseConversionDescriptor" });
            }

            // DiagnosticStatement (string) maxLength
            if (this.DiagnosticStatement != null && this.DiagnosticStatement.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for DiagnosticStatement, length must be less than 1024.", new [] { "DiagnosticStatement" });
            }

            // LetterGradeEarned (string) maxLength
            if (this.LetterGradeEarned != null && this.LetterGradeEarned.Length > 20)
            {
                yield return new ValidationResult("Invalid value for LetterGradeEarned, length must be less than 20.", new [] { "LetterGradeEarned" });
            }

            // NumericGradeEarned (double?) maximum
            if (this.NumericGradeEarned > (double?)9999999.99)
            {
                yield return new ValidationResult("Invalid value for NumericGradeEarned, must be a value less than or equal to 9999999.99.", new [] { "NumericGradeEarned" });
            }

            // NumericGradeEarned (double?) minimum
            if (this.NumericGradeEarned < (double?)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for NumericGradeEarned, must be a value greater than or equal to -9999999.99.", new [] { "NumericGradeEarned" });
            }

            yield break;
        }
    }

}
