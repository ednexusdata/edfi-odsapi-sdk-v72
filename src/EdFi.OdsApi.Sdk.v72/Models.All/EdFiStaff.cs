/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStaff
    /// </summary>
    [DataContract(Name = "edFi_staff")]
    public partial class EdFiStaff : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaff" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaff() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaff" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (required).</param>
        /// <param name="personReference">personReference.</param>
        /// <param name="addresses">An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code..</param>
        /// <param name="ancestryEthnicOrigins">An unordered collection of staffAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies..</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born..</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen..</param>
        /// <param name="credentials">An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services..</param>
        /// <param name="electronicMails">An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs..</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="genderIdentity">The gender the staff member identifies themselves as..</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III)..</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received)..</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught..</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;.</param>
        /// <param name="identificationCodes">An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity..</param>
        /// <param name="identificationDocuments">An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship..</param>
        /// <param name="internationalAddresses">An unordered collection of staffInternationalAddresses. The set of elements that describes an international address..</param>
        /// <param name="languages">An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes..</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface..</param>
        /// <param name="maidenName">The individual&#39;s maiden name..</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony..</param>
        /// <param name="otherNames">An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person..</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc..</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual..</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name.</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name.</param>
        /// <param name="races">An unordered collection of staffRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races..</param>
        /// <param name="recognitions">An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity..</param>
        /// <param name="sexDescriptor">The birth sex of the staff member..</param>
        /// <param name="telephones">An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person..</param>
        /// <param name="tribalAffiliations">An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated..</param>
        /// <param name="visas">An unordered collection of staffVisas. An indicator of a non-US citizen&#39;s Visa type..</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year..</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the Staff entity..</param>
        public EdFiStaff(string id = default, string staffUniqueId = default, EdFiPersonReference personReference = default, List<EdFiStaffAddress> addresses = default, List<EdFiStaffAncestryEthnicOrigin> ancestryEthnicOrigins = default, DateOnly? birthDate = default, string citizenshipStatusDescriptor = default, List<EdFiStaffCredential> credentials = default, List<EdFiStaffElectronicMail> electronicMails = default, string firstName = default, string genderIdentity = default, string generationCodeSuffix = default, string highestCompletedLevelOfEducationDescriptor = default, bool? highlyQualifiedTeacher = default, bool? hispanicLatinoEthnicity = default, List<EdFiStaffIdentificationCode> identificationCodes = default, List<EdFiStaffIdentificationDocument> identificationDocuments = default, List<EdFiStaffInternationalAddress> internationalAddresses = default, List<EdFiStaffLanguage> languages = default, string lastSurname = default, string loginId = default, string maidenName = default, string middleName = default, List<EdFiStaffOtherName> otherNames = default, List<EdFiStaffPersonalIdentificationDocument> personalIdentificationDocuments = default, string personalTitlePrefix = default, string preferredFirstName = default, string preferredLastSurname = default, List<EdFiStaffRace> races = default, List<EdFiStaffRecognition> recognitions = default, string sexDescriptor = default, List<EdFiStaffTelephone> telephones = default, List<EdFiStaffTribalAffiliation> tribalAffiliations = default, List<EdFiStaffVisa> visas = default, double? yearsOfPriorProfessionalExperience = default, double? yearsOfPriorTeachingExperience = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "staffUniqueId" is required (not null)
            if (staffUniqueId == null)
            {
                throw new ArgumentNullException("staffUniqueId is a required property for EdFiStaff and cannot be null");
            }
            this.StaffUniqueId = staffUniqueId;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for EdFiStaff and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastSurname" is required (not null)
            if (lastSurname == null)
            {
                throw new ArgumentNullException("lastSurname is a required property for EdFiStaff and cannot be null");
            }
            this.LastSurname = lastSurname;
            this.Id = id;
            this.PersonReference = personReference;
            this.Addresses = addresses;
            this.AncestryEthnicOrigins = ancestryEthnicOrigins;
            this.BirthDate = birthDate;
            this.CitizenshipStatusDescriptor = citizenshipStatusDescriptor;
            this.Credentials = credentials;
            this.ElectronicMails = electronicMails;
            this.GenderIdentity = genderIdentity;
            this.GenerationCodeSuffix = generationCodeSuffix;
            this.HighestCompletedLevelOfEducationDescriptor = highestCompletedLevelOfEducationDescriptor;
            this.HighlyQualifiedTeacher = highlyQualifiedTeacher;
            this.HispanicLatinoEthnicity = hispanicLatinoEthnicity;
            this.IdentificationCodes = identificationCodes;
            this.IdentificationDocuments = identificationDocuments;
            this.InternationalAddresses = internationalAddresses;
            this.Languages = languages;
            this.LoginId = loginId;
            this.MaidenName = maidenName;
            this.MiddleName = middleName;
            this.OtherNames = otherNames;
            this.PersonalIdentificationDocuments = personalIdentificationDocuments;
            this.PersonalTitlePrefix = personalTitlePrefix;
            this.PreferredFirstName = preferredFirstName;
            this.PreferredLastSurname = preferredLastSurname;
            this.Races = races;
            this.Recognitions = recognitions;
            this.SexDescriptor = sexDescriptor;
            this.Telephones = telephones;
            this.TribalAffiliations = tribalAffiliations;
            this.Visas = visas;
            this.YearsOfPriorProfessionalExperience = yearsOfPriorProfessionalExperience;
            this.YearsOfPriorTeachingExperience = yearsOfPriorTeachingExperience;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a staff.</value>
        [DataMember(Name = "staffUniqueId", IsRequired = true, EmitDefaultValue = true)]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [DataMember(Name = "personReference", EmitDefaultValue = false)]
        public EdFiPersonReference PersonReference { get; set; }

        /// <summary>
        /// An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.
        /// </summary>
        /// <value>An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.</value>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<EdFiStaffAddress> Addresses { get; set; }

        /// <summary>
        /// An unordered collection of staffAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.
        /// </summary>
        /// <value>An unordered collection of staffAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.</value>
        [DataMember(Name = "ancestryEthnicOrigins", EmitDefaultValue = false)]
        public List<EdFiStaffAncestryEthnicOrigin> AncestryEthnicOrigins { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        /// <value>The month, day, and year on which an individual was born.</value>
        [DataMember(Name = "birthDate", EmitDefaultValue = true)]
        public DateOnly? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        /// <value>An indicator of whether or not the person is a U.S. citizen.</value>
        [DataMember(Name = "citizenshipStatusDescriptor", EmitDefaultValue = true)]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services.
        /// </summary>
        /// <value>An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services.</value>
        [DataMember(Name = "credentials", EmitDefaultValue = false)]
        public List<EdFiStaffCredential> Credentials { get; set; }

        /// <summary>
        /// An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        /// <value>An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</value>
        [DataMember(Name = "electronicMails", EmitDefaultValue = false)]
        public List<EdFiStaffElectronicMail> ElectronicMails { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// The gender the staff member identifies themselves as.
        /// </summary>
        /// <value>The gender the staff member identifies themselves as.</value>
        [DataMember(Name = "genderIdentity", EmitDefaultValue = true)]
        public string GenderIdentity { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [DataMember(Name = "generationCodeSuffix", EmitDefaultValue = true)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        /// <value>The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).</value>
        [DataMember(Name = "highestCompletedLevelOfEducationDescriptor", EmitDefaultValue = true)]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        /// <value>An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.</value>
        [DataMember(Name = "highlyQualifiedTeacher", EmitDefaultValue = true)]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;</value>
        [DataMember(Name = "hispanicLatinoEthnicity", EmitDefaultValue = true)]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        /// <value>An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.</value>
        [DataMember(Name = "identificationCodes", EmitDefaultValue = false)]
        public List<EdFiStaffIdentificationCode> IdentificationCodes { get; set; }

        /// <summary>
        /// An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship.
        /// </summary>
        /// <value>An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship.</value>
        [DataMember(Name = "identificationDocuments", EmitDefaultValue = false)]
        public List<EdFiStaffIdentificationDocument> IdentificationDocuments { get; set; }

        /// <summary>
        /// An unordered collection of staffInternationalAddresses. The set of elements that describes an international address.
        /// </summary>
        /// <value>An unordered collection of staffInternationalAddresses. The set of elements that describes an international address.</value>
        [DataMember(Name = "internationalAddresses", EmitDefaultValue = false)]
        public List<EdFiStaffInternationalAddress> InternationalAddresses { get; set; }

        /// <summary>
        /// An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.
        /// </summary>
        /// <value>An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.</value>
        [DataMember(Name = "languages", EmitDefaultValue = false)]
        public List<EdFiStaffLanguage> Languages { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name = "lastSurname", IsRequired = true, EmitDefaultValue = true)]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        /// <value>The login ID for the user; used for security access control interface.</value>
        [DataMember(Name = "loginId", EmitDefaultValue = true)]
        public string LoginId { get; set; }

        /// <summary>
        /// The individual&#39;s maiden name.
        /// </summary>
        /// <value>The individual&#39;s maiden name.</value>
        [DataMember(Name = "maidenName", EmitDefaultValue = true)]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name = "middleName", EmitDefaultValue = true)]
        public string MiddleName { get; set; }

        /// <summary>
        /// An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
        /// </summary>
        /// <value>An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</value>
        [DataMember(Name = "otherNames", EmitDefaultValue = false)]
        public List<EdFiStaffOtherName> OtherNames { get; set; }

        /// <summary>
        /// An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [DataMember(Name = "personalIdentificationDocuments", EmitDefaultValue = false)]
        public List<EdFiStaffPersonalIdentificationDocument> PersonalIdentificationDocuments { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the individual.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the individual.</value>
        [DataMember(Name = "personalTitlePrefix", EmitDefaultValue = true)]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// The first name the individual prefers, if different from their legal first name
        /// </summary>
        /// <value>The first name the individual prefers, if different from their legal first name</value>
        [DataMember(Name = "preferredFirstName", EmitDefaultValue = true)]
        public string PreferredFirstName { get; set; }

        /// <summary>
        /// The last name the individual prefers, if different from their legal last name
        /// </summary>
        /// <value>The last name the individual prefers, if different from their legal last name</value>
        [DataMember(Name = "preferredLastSurname", EmitDefaultValue = true)]
        public string PreferredLastSurname { get; set; }

        /// <summary>
        /// An unordered collection of staffRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        /// <value>An unordered collection of staffRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.</value>
        [DataMember(Name = "races", EmitDefaultValue = false)]
        public List<EdFiStaffRace> Races { get; set; }

        /// <summary>
        /// An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.
        /// </summary>
        /// <value>An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.</value>
        [DataMember(Name = "recognitions", EmitDefaultValue = false)]
        public List<EdFiStaffRecognition> Recognitions { get; set; }

        /// <summary>
        /// The birth sex of the staff member.
        /// </summary>
        /// <value>The birth sex of the staff member.</value>
        [DataMember(Name = "sexDescriptor", EmitDefaultValue = true)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person.
        /// </summary>
        /// <value>An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person.</value>
        [DataMember(Name = "telephones", EmitDefaultValue = false)]
        public List<EdFiStaffTelephone> Telephones { get; set; }

        /// <summary>
        /// An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated.
        /// </summary>
        /// <value>An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated.</value>
        [DataMember(Name = "tribalAffiliations", EmitDefaultValue = false)]
        public List<EdFiStaffTribalAffiliation> TribalAffiliations { get; set; }

        /// <summary>
        /// An unordered collection of staffVisas. An indicator of a non-US citizen&#39;s Visa type.
        /// </summary>
        /// <value>An unordered collection of staffVisas. An indicator of a non-US citizen&#39;s Visa type.</value>
        [DataMember(Name = "visas", EmitDefaultValue = false)]
        public List<EdFiStaffVisa> Visas { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year.
        /// </summary>
        /// <value>The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year.</value>
        [DataMember(Name = "yearsOfPriorProfessionalExperience", EmitDefaultValue = true)]
        public double? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year.
        /// </summary>
        /// <value>The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year.</value>
        [DataMember(Name = "yearsOfPriorTeachingExperience", EmitDefaultValue = true)]
        public double? YearsOfPriorTeachingExperience { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the Staff entity.
        /// </summary>
        /// <value>Extensions to the Staff entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaff {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StaffUniqueId: ").Append(StaffUniqueId).Append("\n");
            sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  AncestryEthnicOrigins: ").Append(AncestryEthnicOrigins).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  CitizenshipStatusDescriptor: ").Append(CitizenshipStatusDescriptor).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  ElectronicMails: ").Append(ElectronicMails).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GenderIdentity: ").Append(GenderIdentity).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  HighestCompletedLevelOfEducationDescriptor: ").Append(HighestCompletedLevelOfEducationDescriptor).Append("\n");
            sb.Append("  HighlyQualifiedTeacher: ").Append(HighlyQualifiedTeacher).Append("\n");
            sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  IdentificationDocuments: ").Append(IdentificationDocuments).Append("\n");
            sb.Append("  InternationalAddresses: ").Append(InternationalAddresses).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  OtherNames: ").Append(OtherNames).Append("\n");
            sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  PreferredFirstName: ").Append(PreferredFirstName).Append("\n");
            sb.Append("  PreferredLastSurname: ").Append(PreferredLastSurname).Append("\n");
            sb.Append("  Races: ").Append(Races).Append("\n");
            sb.Append("  Recognitions: ").Append(Recognitions).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  TribalAffiliations: ").Append(TribalAffiliations).Append("\n");
            sb.Append("  Visas: ").Append(Visas).Append("\n");
            sb.Append("  YearsOfPriorProfessionalExperience: ").Append(YearsOfPriorProfessionalExperience).Append("\n");
            sb.Append("  YearsOfPriorTeachingExperience: ").Append(YearsOfPriorTeachingExperience).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StaffUniqueId (string) maxLength
            if (this.StaffUniqueId != null && this.StaffUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StaffUniqueId, length must be less than 32.", new [] { "StaffUniqueId" });
            }

            // CitizenshipStatusDescriptor (string) maxLength
            if (this.CitizenshipStatusDescriptor != null && this.CitizenshipStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CitizenshipStatusDescriptor, length must be less than 306.", new [] { "CitizenshipStatusDescriptor" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // GenderIdentity (string) maxLength
            if (this.GenderIdentity != null && this.GenderIdentity.Length > 60)
            {
                yield return new ValidationResult("Invalid value for GenderIdentity, length must be less than 60.", new [] { "GenderIdentity" });
            }

            // GenerationCodeSuffix (string) maxLength
            if (this.GenerationCodeSuffix != null && this.GenerationCodeSuffix.Length > 10)
            {
                yield return new ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new [] { "GenerationCodeSuffix" });
            }

            // HighestCompletedLevelOfEducationDescriptor (string) maxLength
            if (this.HighestCompletedLevelOfEducationDescriptor != null && this.HighestCompletedLevelOfEducationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for HighestCompletedLevelOfEducationDescriptor, length must be less than 306.", new [] { "HighestCompletedLevelOfEducationDescriptor" });
            }

            // LastSurname (string) maxLength
            if (this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // LoginId (string) maxLength
            if (this.LoginId != null && this.LoginId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LoginId, length must be less than 60.", new [] { "LoginId" });
            }

            // MaidenName (string) maxLength
            if (this.MaidenName != null && this.MaidenName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MaidenName, length must be less than 75.", new [] { "MaidenName" });
            }

            // MiddleName (string) maxLength
            if (this.MiddleName != null && this.MiddleName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MiddleName, length must be less than 75.", new [] { "MiddleName" });
            }

            // PersonalTitlePrefix (string) maxLength
            if (this.PersonalTitlePrefix != null && this.PersonalTitlePrefix.Length > 30)
            {
                yield return new ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new [] { "PersonalTitlePrefix" });
            }

            // PreferredFirstName (string) maxLength
            if (this.PreferredFirstName != null && this.PreferredFirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for PreferredFirstName, length must be less than 75.", new [] { "PreferredFirstName" });
            }

            // PreferredLastSurname (string) maxLength
            if (this.PreferredLastSurname != null && this.PreferredLastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for PreferredLastSurname, length must be less than 75.", new [] { "PreferredLastSurname" });
            }

            // SexDescriptor (string) maxLength
            if (this.SexDescriptor != null && this.SexDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SexDescriptor, length must be less than 306.", new [] { "SexDescriptor" });
            }

            // YearsOfPriorProfessionalExperience (double?) maximum
            if (this.YearsOfPriorProfessionalExperience > (double?)999.99)
            {
                yield return new ValidationResult("Invalid value for YearsOfPriorProfessionalExperience, must be a value less than or equal to 999.99.", new [] { "YearsOfPriorProfessionalExperience" });
            }

            // YearsOfPriorProfessionalExperience (double?) minimum
            if (this.YearsOfPriorProfessionalExperience < (double?)-999.99)
            {
                yield return new ValidationResult("Invalid value for YearsOfPriorProfessionalExperience, must be a value greater than or equal to -999.99.", new [] { "YearsOfPriorProfessionalExperience" });
            }

            // YearsOfPriorTeachingExperience (double?) maximum
            if (this.YearsOfPriorTeachingExperience > (double?)999.99)
            {
                yield return new ValidationResult("Invalid value for YearsOfPriorTeachingExperience, must be a value less than or equal to 999.99.", new [] { "YearsOfPriorTeachingExperience" });
            }

            // YearsOfPriorTeachingExperience (double?) minimum
            if (this.YearsOfPriorTeachingExperience < (double?)-999.99)
            {
                yield return new ValidationResult("Invalid value for YearsOfPriorTeachingExperience, must be a value greater than or equal to -999.99.", new [] { "YearsOfPriorTeachingExperience" });
            }

            yield break;
        }
    }

}
