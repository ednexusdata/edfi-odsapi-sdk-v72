/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiCrisisEvent
    /// </summary>
    [DataContract(Name = "edFi_crisisEvent")]
    public partial class EdFiCrisisEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCrisisEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiCrisisEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCrisisEvent" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="crisisEventName">The name of the crisis event that occurred. If there is no generally accepted name for this crisis event, the suggested format: Location + Crisis type + Year. (required).</param>
        /// <param name="crisisDescription">Provides a textual description of the crisis event affecting the student. It may include details such as the nature of the crisis (e.g., natural disaster, conflict, medical emergency), its severity, location, and any other relevant information describing the crisis situation..</param>
        /// <param name="crisisEndDate">The date on which the crisis ceased to affect the student..</param>
        /// <param name="crisisStartDate">The year, month and day on which the crisis affected the student. This date may not be the same as the date the crisis occurred if evacuation orders are implemented in anticipation of a crisis..</param>
        /// <param name="crisisTypeDescriptor">The type or category of crisis. (required).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the CrisisEvent entity..</param>
        public EdFiCrisisEvent(string id = default, string crisisEventName = default, string crisisDescription = default, DateOnly? crisisEndDate = default, DateOnly? crisisStartDate = default, string crisisTypeDescriptor = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "crisisEventName" is required (not null)
            if (crisisEventName == null)
            {
                throw new ArgumentNullException("crisisEventName is a required property for EdFiCrisisEvent and cannot be null");
            }
            this.CrisisEventName = crisisEventName;
            // to ensure "crisisTypeDescriptor" is required (not null)
            if (crisisTypeDescriptor == null)
            {
                throw new ArgumentNullException("crisisTypeDescriptor is a required property for EdFiCrisisEvent and cannot be null");
            }
            this.CrisisTypeDescriptor = crisisTypeDescriptor;
            this.Id = id;
            this.CrisisDescription = crisisDescription;
            this.CrisisEndDate = crisisEndDate;
            this.CrisisStartDate = crisisStartDate;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the crisis event that occurred. If there is no generally accepted name for this crisis event, the suggested format: Location + Crisis type + Year.
        /// </summary>
        /// <value>The name of the crisis event that occurred. If there is no generally accepted name for this crisis event, the suggested format: Location + Crisis type + Year.</value>
        [DataMember(Name = "crisisEventName", IsRequired = true, EmitDefaultValue = true)]
        public string CrisisEventName { get; set; }

        /// <summary>
        /// Provides a textual description of the crisis event affecting the student. It may include details such as the nature of the crisis (e.g., natural disaster, conflict, medical emergency), its severity, location, and any other relevant information describing the crisis situation.
        /// </summary>
        /// <value>Provides a textual description of the crisis event affecting the student. It may include details such as the nature of the crisis (e.g., natural disaster, conflict, medical emergency), its severity, location, and any other relevant information describing the crisis situation.</value>
        [DataMember(Name = "crisisDescription", EmitDefaultValue = true)]
        public string CrisisDescription { get; set; }

        /// <summary>
        /// The date on which the crisis ceased to affect the student.
        /// </summary>
        /// <value>The date on which the crisis ceased to affect the student.</value>
        [DataMember(Name = "crisisEndDate", EmitDefaultValue = true)]
        public DateOnly? CrisisEndDate { get; set; }

        /// <summary>
        /// The year, month and day on which the crisis affected the student. This date may not be the same as the date the crisis occurred if evacuation orders are implemented in anticipation of a crisis.
        /// </summary>
        /// <value>The year, month and day on which the crisis affected the student. This date may not be the same as the date the crisis occurred if evacuation orders are implemented in anticipation of a crisis.</value>
        [DataMember(Name = "crisisStartDate", EmitDefaultValue = true)]
        public DateOnly? CrisisStartDate { get; set; }

        /// <summary>
        /// The type or category of crisis.
        /// </summary>
        /// <value>The type or category of crisis.</value>
        [DataMember(Name = "crisisTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string CrisisTypeDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the CrisisEvent entity.
        /// </summary>
        /// <value>Extensions to the CrisisEvent entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCrisisEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CrisisEventName: ").Append(CrisisEventName).Append("\n");
            sb.Append("  CrisisDescription: ").Append(CrisisDescription).Append("\n");
            sb.Append("  CrisisEndDate: ").Append(CrisisEndDate).Append("\n");
            sb.Append("  CrisisStartDate: ").Append(CrisisStartDate).Append("\n");
            sb.Append("  CrisisTypeDescriptor: ").Append(CrisisTypeDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CrisisEventName (string) maxLength
            if (this.CrisisEventName != null && this.CrisisEventName.Length > 100)
            {
                yield return new ValidationResult("Invalid value for CrisisEventName, length must be less than 100.", new [] { "CrisisEventName" });
            }

            // CrisisDescription (string) maxLength
            if (this.CrisisDescription != null && this.CrisisDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for CrisisDescription, length must be less than 1024.", new [] { "CrisisDescription" });
            }

            // CrisisTypeDescriptor (string) maxLength
            if (this.CrisisTypeDescriptor != null && this.CrisisTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CrisisTypeDescriptor, length must be less than 306.", new [] { "CrisisTypeDescriptor" });
            }

            yield break;
        }
    }

}
