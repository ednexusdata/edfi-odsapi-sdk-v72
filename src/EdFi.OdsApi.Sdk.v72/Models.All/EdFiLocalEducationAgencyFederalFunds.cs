/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiLocalEducationAgencyFederalFunds
    /// </summary>
    [DataContract(Name = "edFi_localEducationAgencyFederalFunds")]
    public partial class EdFiLocalEducationAgencyFederalFunds : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLocalEducationAgencyFederalFunds" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiLocalEducationAgencyFederalFunds() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLocalEducationAgencyFederalFunds" /> class.
        /// </summary>
        /// <param name="fiscalYear">The fiscal year for which the federal funds are received. (required).</param>
        /// <param name="innovativeDollarsSpent">The total Title V, Part A funds expended by LEAs..</param>
        /// <param name="innovativeDollarsSpentStrategicPriorities">The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities..</param>
        /// <param name="innovativeProgramsFundsReceived">The total Title V, Part A funds received by LEAs..</param>
        /// <param name="schoolImprovementAllocation">The amount of Section 1003(a) and 1003(g) allocations to LEAs..</param>
        /// <param name="schoolImprovementReservedFundsPercentage">An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and 200.100(a) of ED&#39;s regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA..</param>
        /// <param name="stateAssessmentAdministrationFunding">The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state&#39;s schools and LEAs are held accountable for results..</param>
        /// <param name="supplementalEducationalServicesFundsSpent">The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended..</param>
        /// <param name="supplementalEducationalServicesPerPupilExpenditure">The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA..</param>
        /// <param name="ext">Extensions to the LocalEducationAgencyFederalFunds entity..</param>
        public EdFiLocalEducationAgencyFederalFunds(int fiscalYear = default, double? innovativeDollarsSpent = default, double? innovativeDollarsSpentStrategicPriorities = default, double? innovativeProgramsFundsReceived = default, double? schoolImprovementAllocation = default, double? schoolImprovementReservedFundsPercentage = default, double? stateAssessmentAdministrationFunding = default, double? supplementalEducationalServicesFundsSpent = default, double? supplementalEducationalServicesPerPupilExpenditure = default, Object ext = default)
        {
            this.FiscalYear = fiscalYear;
            this.InnovativeDollarsSpent = innovativeDollarsSpent;
            this.InnovativeDollarsSpentStrategicPriorities = innovativeDollarsSpentStrategicPriorities;
            this.InnovativeProgramsFundsReceived = innovativeProgramsFundsReceived;
            this.SchoolImprovementAllocation = schoolImprovementAllocation;
            this.SchoolImprovementReservedFundsPercentage = schoolImprovementReservedFundsPercentage;
            this.StateAssessmentAdministrationFunding = stateAssessmentAdministrationFunding;
            this.SupplementalEducationalServicesFundsSpent = supplementalEducationalServicesFundsSpent;
            this.SupplementalEducationalServicesPerPupilExpenditure = supplementalEducationalServicesPerPupilExpenditure;
            this.Ext = ext;
        }

        /// <summary>
        /// The fiscal year for which the federal funds are received.
        /// </summary>
        /// <value>The fiscal year for which the federal funds are received.</value>
        [DataMember(Name = "fiscalYear", IsRequired = true, EmitDefaultValue = true)]
        public int FiscalYear { get; set; }

        /// <summary>
        /// The total Title V, Part A funds expended by LEAs.
        /// </summary>
        /// <value>The total Title V, Part A funds expended by LEAs.</value>
        [DataMember(Name = "innovativeDollarsSpent", EmitDefaultValue = true)]
        public double? InnovativeDollarsSpent { get; set; }

        /// <summary>
        /// The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.
        /// </summary>
        /// <value>The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.</value>
        [DataMember(Name = "innovativeDollarsSpentStrategicPriorities", EmitDefaultValue = true)]
        public double? InnovativeDollarsSpentStrategicPriorities { get; set; }

        /// <summary>
        /// The total Title V, Part A funds received by LEAs.
        /// </summary>
        /// <value>The total Title V, Part A funds received by LEAs.</value>
        [DataMember(Name = "innovativeProgramsFundsReceived", EmitDefaultValue = true)]
        public double? InnovativeProgramsFundsReceived { get; set; }

        /// <summary>
        /// The amount of Section 1003(a) and 1003(g) allocations to LEAs.
        /// </summary>
        /// <value>The amount of Section 1003(a) and 1003(g) allocations to LEAs.</value>
        [DataMember(Name = "schoolImprovementAllocation", EmitDefaultValue = true)]
        public double? SchoolImprovementAllocation { get; set; }

        /// <summary>
        /// An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and 200.100(a) of ED&#39;s regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.
        /// </summary>
        /// <value>An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and 200.100(a) of ED&#39;s regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.</value>
        [DataMember(Name = "schoolImprovementReservedFundsPercentage", EmitDefaultValue = true)]
        public double? SchoolImprovementReservedFundsPercentage { get; set; }

        /// <summary>
        /// The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state&#39;s schools and LEAs are held accountable for results.
        /// </summary>
        /// <value>The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state&#39;s schools and LEAs are held accountable for results.</value>
        [DataMember(Name = "stateAssessmentAdministrationFunding", EmitDefaultValue = true)]
        public double? StateAssessmentAdministrationFunding { get; set; }

        /// <summary>
        /// The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.
        /// </summary>
        /// <value>The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.</value>
        [DataMember(Name = "supplementalEducationalServicesFundsSpent", EmitDefaultValue = true)]
        public double? SupplementalEducationalServicesFundsSpent { get; set; }

        /// <summary>
        /// The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.
        /// </summary>
        /// <value>The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.</value>
        [DataMember(Name = "supplementalEducationalServicesPerPupilExpenditure", EmitDefaultValue = true)]
        public double? SupplementalEducationalServicesPerPupilExpenditure { get; set; }

        /// <summary>
        /// Extensions to the LocalEducationAgencyFederalFunds entity.
        /// </summary>
        /// <value>Extensions to the LocalEducationAgencyFederalFunds entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLocalEducationAgencyFederalFunds {\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  InnovativeDollarsSpent: ").Append(InnovativeDollarsSpent).Append("\n");
            sb.Append("  InnovativeDollarsSpentStrategicPriorities: ").Append(InnovativeDollarsSpentStrategicPriorities).Append("\n");
            sb.Append("  InnovativeProgramsFundsReceived: ").Append(InnovativeProgramsFundsReceived).Append("\n");
            sb.Append("  SchoolImprovementAllocation: ").Append(SchoolImprovementAllocation).Append("\n");
            sb.Append("  SchoolImprovementReservedFundsPercentage: ").Append(SchoolImprovementReservedFundsPercentage).Append("\n");
            sb.Append("  StateAssessmentAdministrationFunding: ").Append(StateAssessmentAdministrationFunding).Append("\n");
            sb.Append("  SupplementalEducationalServicesFundsSpent: ").Append(SupplementalEducationalServicesFundsSpent).Append("\n");
            sb.Append("  SupplementalEducationalServicesPerPupilExpenditure: ").Append(SupplementalEducationalServicesPerPupilExpenditure).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InnovativeDollarsSpent (double?) maximum
            if (this.InnovativeDollarsSpent > (double?)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for InnovativeDollarsSpent, must be a value less than or equal to 922337203685477.6.", new [] { "InnovativeDollarsSpent" });
            }

            // InnovativeDollarsSpent (double?) minimum
            if (this.InnovativeDollarsSpent < (double?)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for InnovativeDollarsSpent, must be a value greater than or equal to -922337203685477.6.", new [] { "InnovativeDollarsSpent" });
            }

            // InnovativeDollarsSpentStrategicPriorities (double?) maximum
            if (this.InnovativeDollarsSpentStrategicPriorities > (double?)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for InnovativeDollarsSpentStrategicPriorities, must be a value less than or equal to 922337203685477.6.", new [] { "InnovativeDollarsSpentStrategicPriorities" });
            }

            // InnovativeDollarsSpentStrategicPriorities (double?) minimum
            if (this.InnovativeDollarsSpentStrategicPriorities < (double?)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for InnovativeDollarsSpentStrategicPriorities, must be a value greater than or equal to -922337203685477.6.", new [] { "InnovativeDollarsSpentStrategicPriorities" });
            }

            // InnovativeProgramsFundsReceived (double?) maximum
            if (this.InnovativeProgramsFundsReceived > (double?)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for InnovativeProgramsFundsReceived, must be a value less than or equal to 922337203685477.6.", new [] { "InnovativeProgramsFundsReceived" });
            }

            // InnovativeProgramsFundsReceived (double?) minimum
            if (this.InnovativeProgramsFundsReceived < (double?)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for InnovativeProgramsFundsReceived, must be a value greater than or equal to -922337203685477.6.", new [] { "InnovativeProgramsFundsReceived" });
            }

            // SchoolImprovementAllocation (double?) maximum
            if (this.SchoolImprovementAllocation > (double?)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for SchoolImprovementAllocation, must be a value less than or equal to 922337203685477.6.", new [] { "SchoolImprovementAllocation" });
            }

            // SchoolImprovementAllocation (double?) minimum
            if (this.SchoolImprovementAllocation < (double?)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for SchoolImprovementAllocation, must be a value greater than or equal to -922337203685477.6.", new [] { "SchoolImprovementAllocation" });
            }

            // SchoolImprovementReservedFundsPercentage (double?) maximum
            if (this.SchoolImprovementReservedFundsPercentage > (double?)9.9999)
            {
                yield return new ValidationResult("Invalid value for SchoolImprovementReservedFundsPercentage, must be a value less than or equal to 9.9999.", new [] { "SchoolImprovementReservedFundsPercentage" });
            }

            // SchoolImprovementReservedFundsPercentage (double?) minimum
            if (this.SchoolImprovementReservedFundsPercentage < (double?)-9.9999)
            {
                yield return new ValidationResult("Invalid value for SchoolImprovementReservedFundsPercentage, must be a value greater than or equal to -9.9999.", new [] { "SchoolImprovementReservedFundsPercentage" });
            }

            // StateAssessmentAdministrationFunding (double?) maximum
            if (this.StateAssessmentAdministrationFunding > (double?)9.9999)
            {
                yield return new ValidationResult("Invalid value for StateAssessmentAdministrationFunding, must be a value less than or equal to 9.9999.", new [] { "StateAssessmentAdministrationFunding" });
            }

            // StateAssessmentAdministrationFunding (double?) minimum
            if (this.StateAssessmentAdministrationFunding < (double?)-9.9999)
            {
                yield return new ValidationResult("Invalid value for StateAssessmentAdministrationFunding, must be a value greater than or equal to -9.9999.", new [] { "StateAssessmentAdministrationFunding" });
            }

            // SupplementalEducationalServicesFundsSpent (double?) maximum
            if (this.SupplementalEducationalServicesFundsSpent > (double?)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for SupplementalEducationalServicesFundsSpent, must be a value less than or equal to 922337203685477.6.", new [] { "SupplementalEducationalServicesFundsSpent" });
            }

            // SupplementalEducationalServicesFundsSpent (double?) minimum
            if (this.SupplementalEducationalServicesFundsSpent < (double?)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for SupplementalEducationalServicesFundsSpent, must be a value greater than or equal to -922337203685477.6.", new [] { "SupplementalEducationalServicesFundsSpent" });
            }

            // SupplementalEducationalServicesPerPupilExpenditure (double?) maximum
            if (this.SupplementalEducationalServicesPerPupilExpenditure > (double?)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for SupplementalEducationalServicesPerPupilExpenditure, must be a value less than or equal to 922337203685477.6.", new [] { "SupplementalEducationalServicesPerPupilExpenditure" });
            }

            // SupplementalEducationalServicesPerPupilExpenditure (double?) minimum
            if (this.SupplementalEducationalServicesPerPupilExpenditure < (double?)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for SupplementalEducationalServicesPerPupilExpenditure, must be a value greater than or equal to -922337203685477.6.", new [] { "SupplementalEducationalServicesPerPupilExpenditure" });
            }

            yield break;
        }
    }

}
