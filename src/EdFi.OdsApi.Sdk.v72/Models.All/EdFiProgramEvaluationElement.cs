/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiProgramEvaluationElement
    /// </summary>
    [DataContract(Name = "edFi_programEvaluationElement")]
    public partial class EdFiProgramEvaluationElement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgramEvaluationElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiProgramEvaluationElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgramEvaluationElement" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="programEvaluationElementTitle">The name or title of the program evaluation element. (required).</param>
        /// <param name="programEvaluationObjectiveReference">programEvaluationObjectiveReference.</param>
        /// <param name="programEvaluationReference">programEvaluationReference (required).</param>
        /// <param name="elementMaxNumericRating">The maximum summary numerical rating or score for the program evaluation element..</param>
        /// <param name="elementMinNumericRating">The minimum summary numerical rating or score for the program evaluation element. If omitted, assumed to be 0.0..</param>
        /// <param name="elementSortOrder">The sort order of this program evaluation element..</param>
        /// <param name="programEvaluationElementDescription">The long description of the program evaluation element..</param>
        /// <param name="programEvaluationLevels">An unordered collection of programEvaluationElementProgramEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation element..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the ProgramEvaluationElement entity..</param>
        public EdFiProgramEvaluationElement(string id = default, string programEvaluationElementTitle = default, EdFiProgramEvaluationObjectiveReference programEvaluationObjectiveReference = default, EdFiProgramEvaluationReference programEvaluationReference = default, double? elementMaxNumericRating = default, double? elementMinNumericRating = default, int? elementSortOrder = default, string programEvaluationElementDescription = default, List<EdFiProgramEvaluationElementProgramEvaluationLevel> programEvaluationLevels = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "programEvaluationElementTitle" is required (not null)
            if (programEvaluationElementTitle == null)
            {
                throw new ArgumentNullException("programEvaluationElementTitle is a required property for EdFiProgramEvaluationElement and cannot be null");
            }
            this.ProgramEvaluationElementTitle = programEvaluationElementTitle;
            // to ensure "programEvaluationReference" is required (not null)
            if (programEvaluationReference == null)
            {
                throw new ArgumentNullException("programEvaluationReference is a required property for EdFiProgramEvaluationElement and cannot be null");
            }
            this.ProgramEvaluationReference = programEvaluationReference;
            this.Id = id;
            this.ProgramEvaluationObjectiveReference = programEvaluationObjectiveReference;
            this.ElementMaxNumericRating = elementMaxNumericRating;
            this.ElementMinNumericRating = elementMinNumericRating;
            this.ElementSortOrder = elementSortOrder;
            this.ProgramEvaluationElementDescription = programEvaluationElementDescription;
            this.ProgramEvaluationLevels = programEvaluationLevels;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name or title of the program evaluation element.
        /// </summary>
        /// <value>The name or title of the program evaluation element.</value>
        [DataMember(Name = "programEvaluationElementTitle", IsRequired = true, EmitDefaultValue = true)]
        public string ProgramEvaluationElementTitle { get; set; }

        /// <summary>
        /// Gets or Sets ProgramEvaluationObjectiveReference
        /// </summary>
        [DataMember(Name = "programEvaluationObjectiveReference", EmitDefaultValue = false)]
        public EdFiProgramEvaluationObjectiveReference ProgramEvaluationObjectiveReference { get; set; }

        /// <summary>
        /// Gets or Sets ProgramEvaluationReference
        /// </summary>
        [DataMember(Name = "programEvaluationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiProgramEvaluationReference ProgramEvaluationReference { get; set; }

        /// <summary>
        /// The maximum summary numerical rating or score for the program evaluation element.
        /// </summary>
        /// <value>The maximum summary numerical rating or score for the program evaluation element.</value>
        [DataMember(Name = "elementMaxNumericRating", EmitDefaultValue = true)]
        public double? ElementMaxNumericRating { get; set; }

        /// <summary>
        /// The minimum summary numerical rating or score for the program evaluation element. If omitted, assumed to be 0.0.
        /// </summary>
        /// <value>The minimum summary numerical rating or score for the program evaluation element. If omitted, assumed to be 0.0.</value>
        [DataMember(Name = "elementMinNumericRating", EmitDefaultValue = true)]
        public double? ElementMinNumericRating { get; set; }

        /// <summary>
        /// The sort order of this program evaluation element.
        /// </summary>
        /// <value>The sort order of this program evaluation element.</value>
        [DataMember(Name = "elementSortOrder", EmitDefaultValue = true)]
        public int? ElementSortOrder { get; set; }

        /// <summary>
        /// The long description of the program evaluation element.
        /// </summary>
        /// <value>The long description of the program evaluation element.</value>
        [DataMember(Name = "programEvaluationElementDescription", EmitDefaultValue = true)]
        public string ProgramEvaluationElementDescription { get; set; }

        /// <summary>
        /// An unordered collection of programEvaluationElementProgramEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation element.
        /// </summary>
        /// <value>An unordered collection of programEvaluationElementProgramEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation element.</value>
        [DataMember(Name = "programEvaluationLevels", EmitDefaultValue = false)]
        public List<EdFiProgramEvaluationElementProgramEvaluationLevel> ProgramEvaluationLevels { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the ProgramEvaluationElement entity.
        /// </summary>
        /// <value>Extensions to the ProgramEvaluationElement entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiProgramEvaluationElement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProgramEvaluationElementTitle: ").Append(ProgramEvaluationElementTitle).Append("\n");
            sb.Append("  ProgramEvaluationObjectiveReference: ").Append(ProgramEvaluationObjectiveReference).Append("\n");
            sb.Append("  ProgramEvaluationReference: ").Append(ProgramEvaluationReference).Append("\n");
            sb.Append("  ElementMaxNumericRating: ").Append(ElementMaxNumericRating).Append("\n");
            sb.Append("  ElementMinNumericRating: ").Append(ElementMinNumericRating).Append("\n");
            sb.Append("  ElementSortOrder: ").Append(ElementSortOrder).Append("\n");
            sb.Append("  ProgramEvaluationElementDescription: ").Append(ProgramEvaluationElementDescription).Append("\n");
            sb.Append("  ProgramEvaluationLevels: ").Append(ProgramEvaluationLevels).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramEvaluationElementTitle (string) maxLength
            if (this.ProgramEvaluationElementTitle != null && this.ProgramEvaluationElementTitle.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationElementTitle, length must be less than 50.", new [] { "ProgramEvaluationElementTitle" });
            }

            // ElementMaxNumericRating (double?) maximum
            if (this.ElementMaxNumericRating > (double?)999.999)
            {
                yield return new ValidationResult("Invalid value for ElementMaxNumericRating, must be a value less than or equal to 999.999.", new [] { "ElementMaxNumericRating" });
            }

            // ElementMaxNumericRating (double?) minimum
            if (this.ElementMaxNumericRating < (double?)-999.999)
            {
                yield return new ValidationResult("Invalid value for ElementMaxNumericRating, must be a value greater than or equal to -999.999.", new [] { "ElementMaxNumericRating" });
            }

            // ElementMinNumericRating (double?) maximum
            if (this.ElementMinNumericRating > (double?)999.999)
            {
                yield return new ValidationResult("Invalid value for ElementMinNumericRating, must be a value less than or equal to 999.999.", new [] { "ElementMinNumericRating" });
            }

            // ElementMinNumericRating (double?) minimum
            if (this.ElementMinNumericRating < (double?)-999.999)
            {
                yield return new ValidationResult("Invalid value for ElementMinNumericRating, must be a value greater than or equal to -999.999.", new [] { "ElementMinNumericRating" });
            }

            // ProgramEvaluationElementDescription (string) maxLength
            if (this.ProgramEvaluationElementDescription != null && this.ProgramEvaluationElementDescription.Length > 255)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationElementDescription, length must be less than 255.", new [] { "ProgramEvaluationElementDescription" });
            }

            yield break;
        }
    }

}
