/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiSurveyResponseSurveyLevel
    /// </summary>
    [DataContract(Name = "edFi_surveyResponseSurveyLevel")]
    public partial class EdFiSurveyResponseSurveyLevel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyResponseSurveyLevel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurveyResponseSurveyLevel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyResponseSurveyLevel" /> class.
        /// </summary>
        /// <param name="surveyLevelDescriptor">Provides information about the respondents of a survey and how they can be grouped together. (required).</param>
        /// <param name="ext">Extensions to the SurveyResponseSurveyLevel entity..</param>
        public EdFiSurveyResponseSurveyLevel(string surveyLevelDescriptor = default, Object ext = default)
        {
            // to ensure "surveyLevelDescriptor" is required (not null)
            if (surveyLevelDescriptor == null)
            {
                throw new ArgumentNullException("surveyLevelDescriptor is a required property for EdFiSurveyResponseSurveyLevel and cannot be null");
            }
            this.SurveyLevelDescriptor = surveyLevelDescriptor;
            this.Ext = ext;
        }

        /// <summary>
        /// Provides information about the respondents of a survey and how they can be grouped together.
        /// </summary>
        /// <value>Provides information about the respondents of a survey and how they can be grouped together.</value>
        [DataMember(Name = "surveyLevelDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string SurveyLevelDescriptor { get; set; }

        /// <summary>
        /// Extensions to the SurveyResponseSurveyLevel entity.
        /// </summary>
        /// <value>Extensions to the SurveyResponseSurveyLevel entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveyResponseSurveyLevel {\n");
            sb.Append("  SurveyLevelDescriptor: ").Append(SurveyLevelDescriptor).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SurveyLevelDescriptor (string) maxLength
            if (this.SurveyLevelDescriptor != null && this.SurveyLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SurveyLevelDescriptor, length must be less than 306.", new [] { "SurveyLevelDescriptor" });
            }

            yield break;
        }
    }

}
