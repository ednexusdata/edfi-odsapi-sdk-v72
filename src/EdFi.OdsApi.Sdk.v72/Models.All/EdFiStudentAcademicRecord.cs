/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentAcademicRecord
    /// </summary>
    [DataContract(Name = "edFi_studentAcademicRecord")]
    public partial class EdFiStudentAcademicRecord : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAcademicRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentAcademicRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAcademicRecord" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="termDescriptor">The term for the session during the school year. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference (required).</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="academicHonors">An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student..</param>
        /// <param name="classRanking">classRanking.</param>
        /// <param name="cumulativeAttemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="cumulativeAttemptedCredits">The value of credits or units of value awarded for the completion of a course..</param>
        /// <param name="cumulativeAttemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="cumulativeEarnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="cumulativeEarnedCredits">The value of credits or units of value awarded for the completion of a course..</param>
        /// <param name="cumulativeEarnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="diplomas">An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student..</param>
        /// <param name="gradePointAverages">An unordered collection of studentAcademicRecordGradePointAverages. The grade point average for an individual computed as the grade points earned divided by the number of credits attempted..</param>
        /// <param name="projectedGraduationDate">The month and year the student is projected to graduate..</param>
        /// <param name="recognitions">An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity..</param>
        /// <param name="reportCards">An unordered collection of studentAcademicRecordReportCards. Report cards for the student..</param>
        /// <param name="sessionAttemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="sessionAttemptedCredits">The value of credits or units of value awarded for the completion of a course..</param>
        /// <param name="sessionAttemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="sessionEarnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="sessionEarnedCredits">The value of credits or units of value awarded for the completion of a course..</param>
        /// <param name="sessionEarnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the StudentAcademicRecord entity..</param>
        public EdFiStudentAcademicRecord(string id = default, string termDescriptor = default, EdFiEducationOrganizationReference educationOrganizationReference = default, EdFiSchoolYearTypeReference schoolYearTypeReference = default, EdFiStudentReference studentReference = default, List<EdFiStudentAcademicRecordAcademicHonor> academicHonors = default, EdFiStudentAcademicRecordClassRanking classRanking = default, double? cumulativeAttemptedCreditConversion = default, double? cumulativeAttemptedCredits = default, string cumulativeAttemptedCreditTypeDescriptor = default, double? cumulativeEarnedCreditConversion = default, double? cumulativeEarnedCredits = default, string cumulativeEarnedCreditTypeDescriptor = default, List<EdFiStudentAcademicRecordDiploma> diplomas = default, List<EdFiStudentAcademicRecordGradePointAverage> gradePointAverages = default, DateOnly? projectedGraduationDate = default, List<EdFiStudentAcademicRecordRecognition> recognitions = default, List<EdFiStudentAcademicRecordReportCard> reportCards = default, double? sessionAttemptedCreditConversion = default, double? sessionAttemptedCredits = default, string sessionAttemptedCreditTypeDescriptor = default, double? sessionEarnedCreditConversion = default, double? sessionEarnedCredits = default, string sessionEarnedCreditTypeDescriptor = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "termDescriptor" is required (not null)
            if (termDescriptor == null)
            {
                throw new ArgumentNullException("termDescriptor is a required property for EdFiStudentAcademicRecord and cannot be null");
            }
            this.TermDescriptor = termDescriptor;
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new ArgumentNullException("educationOrganizationReference is a required property for EdFiStudentAcademicRecord and cannot be null");
            }
            this.EducationOrganizationReference = educationOrganizationReference;
            // to ensure "schoolYearTypeReference" is required (not null)
            if (schoolYearTypeReference == null)
            {
                throw new ArgumentNullException("schoolYearTypeReference is a required property for EdFiStudentAcademicRecord and cannot be null");
            }
            this.SchoolYearTypeReference = schoolYearTypeReference;
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new ArgumentNullException("studentReference is a required property for EdFiStudentAcademicRecord and cannot be null");
            }
            this.StudentReference = studentReference;
            this.Id = id;
            this.AcademicHonors = academicHonors;
            this.ClassRanking = classRanking;
            this.CumulativeAttemptedCreditConversion = cumulativeAttemptedCreditConversion;
            this.CumulativeAttemptedCredits = cumulativeAttemptedCredits;
            this.CumulativeAttemptedCreditTypeDescriptor = cumulativeAttemptedCreditTypeDescriptor;
            this.CumulativeEarnedCreditConversion = cumulativeEarnedCreditConversion;
            this.CumulativeEarnedCredits = cumulativeEarnedCredits;
            this.CumulativeEarnedCreditTypeDescriptor = cumulativeEarnedCreditTypeDescriptor;
            this.Diplomas = diplomas;
            this.GradePointAverages = gradePointAverages;
            this.ProjectedGraduationDate = projectedGraduationDate;
            this.Recognitions = recognitions;
            this.ReportCards = reportCards;
            this.SessionAttemptedCreditConversion = sessionAttemptedCreditConversion;
            this.SessionAttemptedCredits = sessionAttemptedCredits;
            this.SessionAttemptedCreditTypeDescriptor = sessionAttemptedCreditTypeDescriptor;
            this.SessionEarnedCreditConversion = sessionEarnedCreditConversion;
            this.SessionEarnedCredits = sessionEarnedCredits;
            this.SessionEarnedCreditTypeDescriptor = sessionEarnedCreditTypeDescriptor;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>
        /// <value>The term for the session during the school year.</value>
        [DataMember(Name = "termDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name = "schoolYearTypeReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name = "studentReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student.</value>
        [DataMember(Name = "academicHonors", EmitDefaultValue = false)]
        public List<EdFiStudentAcademicRecordAcademicHonor> AcademicHonors { get; set; }

        /// <summary>
        /// Gets or Sets ClassRanking
        /// </summary>
        [DataMember(Name = "classRanking", EmitDefaultValue = false)]
        public EdFiStudentAcademicRecordClassRanking ClassRanking { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name = "cumulativeAttemptedCreditConversion", EmitDefaultValue = true)]
        public double? CumulativeAttemptedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "cumulativeAttemptedCredits", EmitDefaultValue = true)]
        public double? CumulativeAttemptedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "cumulativeAttemptedCreditTypeDescriptor", EmitDefaultValue = true)]
        public string CumulativeAttemptedCreditTypeDescriptor { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name = "cumulativeEarnedCreditConversion", EmitDefaultValue = true)]
        public double? CumulativeEarnedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "cumulativeEarnedCredits", EmitDefaultValue = true)]
        public double? CumulativeEarnedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "cumulativeEarnedCreditTypeDescriptor", EmitDefaultValue = true)]
        public string CumulativeEarnedCreditTypeDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student.</value>
        [DataMember(Name = "diplomas", EmitDefaultValue = false)]
        public List<EdFiStudentAcademicRecordDiploma> Diplomas { get; set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordGradePointAverages. The grade point average for an individual computed as the grade points earned divided by the number of credits attempted.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordGradePointAverages. The grade point average for an individual computed as the grade points earned divided by the number of credits attempted.</value>
        [DataMember(Name = "gradePointAverages", EmitDefaultValue = false)]
        public List<EdFiStudentAcademicRecordGradePointAverage> GradePointAverages { get; set; }

        /// <summary>
        /// The month and year the student is projected to graduate.
        /// </summary>
        /// <value>The month and year the student is projected to graduate.</value>
        [DataMember(Name = "projectedGraduationDate", EmitDefaultValue = true)]
        public DateOnly? ProjectedGraduationDate { get; set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.</value>
        [DataMember(Name = "recognitions", EmitDefaultValue = false)]
        public List<EdFiStudentAcademicRecordRecognition> Recognitions { get; set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordReportCards. Report cards for the student.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordReportCards. Report cards for the student.</value>
        [DataMember(Name = "reportCards", EmitDefaultValue = false)]
        public List<EdFiStudentAcademicRecordReportCard> ReportCards { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name = "sessionAttemptedCreditConversion", EmitDefaultValue = true)]
        public double? SessionAttemptedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "sessionAttemptedCredits", EmitDefaultValue = true)]
        public double? SessionAttemptedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "sessionAttemptedCreditTypeDescriptor", EmitDefaultValue = true)]
        public string SessionAttemptedCreditTypeDescriptor { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name = "sessionEarnedCreditConversion", EmitDefaultValue = true)]
        public double? SessionEarnedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "sessionEarnedCredits", EmitDefaultValue = true)]
        public double? SessionEarnedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "sessionEarnedCreditTypeDescriptor", EmitDefaultValue = true)]
        public string SessionEarnedCreditTypeDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the StudentAcademicRecord entity.
        /// </summary>
        /// <value>Extensions to the StudentAcademicRecord entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentAcademicRecord {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TermDescriptor: ").Append(TermDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  AcademicHonors: ").Append(AcademicHonors).Append("\n");
            sb.Append("  ClassRanking: ").Append(ClassRanking).Append("\n");
            sb.Append("  CumulativeAttemptedCreditConversion: ").Append(CumulativeAttemptedCreditConversion).Append("\n");
            sb.Append("  CumulativeAttemptedCredits: ").Append(CumulativeAttemptedCredits).Append("\n");
            sb.Append("  CumulativeAttemptedCreditTypeDescriptor: ").Append(CumulativeAttemptedCreditTypeDescriptor).Append("\n");
            sb.Append("  CumulativeEarnedCreditConversion: ").Append(CumulativeEarnedCreditConversion).Append("\n");
            sb.Append("  CumulativeEarnedCredits: ").Append(CumulativeEarnedCredits).Append("\n");
            sb.Append("  CumulativeEarnedCreditTypeDescriptor: ").Append(CumulativeEarnedCreditTypeDescriptor).Append("\n");
            sb.Append("  Diplomas: ").Append(Diplomas).Append("\n");
            sb.Append("  GradePointAverages: ").Append(GradePointAverages).Append("\n");
            sb.Append("  ProjectedGraduationDate: ").Append(ProjectedGraduationDate).Append("\n");
            sb.Append("  Recognitions: ").Append(Recognitions).Append("\n");
            sb.Append("  ReportCards: ").Append(ReportCards).Append("\n");
            sb.Append("  SessionAttemptedCreditConversion: ").Append(SessionAttemptedCreditConversion).Append("\n");
            sb.Append("  SessionAttemptedCredits: ").Append(SessionAttemptedCredits).Append("\n");
            sb.Append("  SessionAttemptedCreditTypeDescriptor: ").Append(SessionAttemptedCreditTypeDescriptor).Append("\n");
            sb.Append("  SessionEarnedCreditConversion: ").Append(SessionEarnedCreditConversion).Append("\n");
            sb.Append("  SessionEarnedCredits: ").Append(SessionEarnedCredits).Append("\n");
            sb.Append("  SessionEarnedCreditTypeDescriptor: ").Append(SessionEarnedCreditTypeDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TermDescriptor (string) maxLength
            if (this.TermDescriptor != null && this.TermDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for TermDescriptor, length must be less than 306.", new [] { "TermDescriptor" });
            }

            // CumulativeAttemptedCreditConversion (double?) maximum
            if (this.CumulativeAttemptedCreditConversion > (double?)9999999.99)
            {
                yield return new ValidationResult("Invalid value for CumulativeAttemptedCreditConversion, must be a value less than or equal to 9999999.99.", new [] { "CumulativeAttemptedCreditConversion" });
            }

            // CumulativeAttemptedCreditConversion (double?) minimum
            if (this.CumulativeAttemptedCreditConversion < (double?)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for CumulativeAttemptedCreditConversion, must be a value greater than or equal to -9999999.99.", new [] { "CumulativeAttemptedCreditConversion" });
            }

            // CumulativeAttemptedCredits (double?) maximum
            if (this.CumulativeAttemptedCredits > (double?)999999.999)
            {
                yield return new ValidationResult("Invalid value for CumulativeAttemptedCredits, must be a value less than or equal to 999999.999.", new [] { "CumulativeAttemptedCredits" });
            }

            // CumulativeAttemptedCredits (double?) minimum
            if (this.CumulativeAttemptedCredits < (double?)0.0)
            {
                yield return new ValidationResult("Invalid value for CumulativeAttemptedCredits, must be a value greater than or equal to 0.0.", new [] { "CumulativeAttemptedCredits" });
            }

            // CumulativeAttemptedCreditTypeDescriptor (string) maxLength
            if (this.CumulativeAttemptedCreditTypeDescriptor != null && this.CumulativeAttemptedCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CumulativeAttemptedCreditTypeDescriptor, length must be less than 306.", new [] { "CumulativeAttemptedCreditTypeDescriptor" });
            }

            // CumulativeEarnedCreditConversion (double?) maximum
            if (this.CumulativeEarnedCreditConversion > (double?)9999999.99)
            {
                yield return new ValidationResult("Invalid value for CumulativeEarnedCreditConversion, must be a value less than or equal to 9999999.99.", new [] { "CumulativeEarnedCreditConversion" });
            }

            // CumulativeEarnedCreditConversion (double?) minimum
            if (this.CumulativeEarnedCreditConversion < (double?)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for CumulativeEarnedCreditConversion, must be a value greater than or equal to -9999999.99.", new [] { "CumulativeEarnedCreditConversion" });
            }

            // CumulativeEarnedCredits (double?) maximum
            if (this.CumulativeEarnedCredits > (double?)999999.999)
            {
                yield return new ValidationResult("Invalid value for CumulativeEarnedCredits, must be a value less than or equal to 999999.999.", new [] { "CumulativeEarnedCredits" });
            }

            // CumulativeEarnedCredits (double?) minimum
            if (this.CumulativeEarnedCredits < (double?)0.0)
            {
                yield return new ValidationResult("Invalid value for CumulativeEarnedCredits, must be a value greater than or equal to 0.0.", new [] { "CumulativeEarnedCredits" });
            }

            // CumulativeEarnedCreditTypeDescriptor (string) maxLength
            if (this.CumulativeEarnedCreditTypeDescriptor != null && this.CumulativeEarnedCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CumulativeEarnedCreditTypeDescriptor, length must be less than 306.", new [] { "CumulativeEarnedCreditTypeDescriptor" });
            }

            // SessionAttemptedCreditConversion (double?) maximum
            if (this.SessionAttemptedCreditConversion > (double?)9999999.99)
            {
                yield return new ValidationResult("Invalid value for SessionAttemptedCreditConversion, must be a value less than or equal to 9999999.99.", new [] { "SessionAttemptedCreditConversion" });
            }

            // SessionAttemptedCreditConversion (double?) minimum
            if (this.SessionAttemptedCreditConversion < (double?)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for SessionAttemptedCreditConversion, must be a value greater than or equal to -9999999.99.", new [] { "SessionAttemptedCreditConversion" });
            }

            // SessionAttemptedCredits (double?) maximum
            if (this.SessionAttemptedCredits > (double?)999999.999)
            {
                yield return new ValidationResult("Invalid value for SessionAttemptedCredits, must be a value less than or equal to 999999.999.", new [] { "SessionAttemptedCredits" });
            }

            // SessionAttemptedCredits (double?) minimum
            if (this.SessionAttemptedCredits < (double?)0.0)
            {
                yield return new ValidationResult("Invalid value for SessionAttemptedCredits, must be a value greater than or equal to 0.0.", new [] { "SessionAttemptedCredits" });
            }

            // SessionAttemptedCreditTypeDescriptor (string) maxLength
            if (this.SessionAttemptedCreditTypeDescriptor != null && this.SessionAttemptedCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SessionAttemptedCreditTypeDescriptor, length must be less than 306.", new [] { "SessionAttemptedCreditTypeDescriptor" });
            }

            // SessionEarnedCreditConversion (double?) maximum
            if (this.SessionEarnedCreditConversion > (double?)9999999.99)
            {
                yield return new ValidationResult("Invalid value for SessionEarnedCreditConversion, must be a value less than or equal to 9999999.99.", new [] { "SessionEarnedCreditConversion" });
            }

            // SessionEarnedCreditConversion (double?) minimum
            if (this.SessionEarnedCreditConversion < (double?)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for SessionEarnedCreditConversion, must be a value greater than or equal to -9999999.99.", new [] { "SessionEarnedCreditConversion" });
            }

            // SessionEarnedCredits (double?) maximum
            if (this.SessionEarnedCredits > (double?)999999.999)
            {
                yield return new ValidationResult("Invalid value for SessionEarnedCredits, must be a value less than or equal to 999999.999.", new [] { "SessionEarnedCredits" });
            }

            // SessionEarnedCredits (double?) minimum
            if (this.SessionEarnedCredits < (double?)0.0)
            {
                yield return new ValidationResult("Invalid value for SessionEarnedCredits, must be a value greater than or equal to 0.0.", new [] { "SessionEarnedCredits" });
            }

            // SessionEarnedCreditTypeDescriptor (string) maxLength
            if (this.SessionEarnedCreditTypeDescriptor != null && this.SessionEarnedCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SessionEarnedCreditTypeDescriptor, length must be less than 306.", new [] { "SessionEarnedCreditTypeDescriptor" });
            }

            yield break;
        }
    }

}
