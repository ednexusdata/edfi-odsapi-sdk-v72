/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiSurveyQuestionResponse
    /// </summary>
    [DataContract(Name = "edFi_surveyQuestionResponse")]
    public partial class EdFiSurveyQuestionResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurveyQuestionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestionResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="surveyQuestionReference">surveyQuestionReference (required).</param>
        /// <param name="surveyResponseReference">surveyResponseReference (required).</param>
        /// <param name="comment">Additional information provided by the responder about the question in the survey..</param>
        /// <param name="noResponse">Indicates there was no response to the question..</param>
        /// <param name="surveyQuestionMatrixElementResponses">An unordered collection of surveyQuestionResponseSurveyQuestionMatrixElementResponses. For matrix questions, the response for each row of the matrix..</param>
        /// <param name="values">An unordered collection of surveyQuestionResponseValues. For free-form, single- or multiple-selection questions, one or more responses..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the SurveyQuestionResponse entity..</param>
        public EdFiSurveyQuestionResponse(string id = default, EdFiSurveyQuestionReference surveyQuestionReference = default, EdFiSurveyResponseReference surveyResponseReference = default, string comment = default, bool? noResponse = default, List<EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse> surveyQuestionMatrixElementResponses = default, List<EdFiSurveyQuestionResponseValue> values = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "surveyQuestionReference" is required (not null)
            if (surveyQuestionReference == null)
            {
                throw new ArgumentNullException("surveyQuestionReference is a required property for EdFiSurveyQuestionResponse and cannot be null");
            }
            this.SurveyQuestionReference = surveyQuestionReference;
            // to ensure "surveyResponseReference" is required (not null)
            if (surveyResponseReference == null)
            {
                throw new ArgumentNullException("surveyResponseReference is a required property for EdFiSurveyQuestionResponse and cannot be null");
            }
            this.SurveyResponseReference = surveyResponseReference;
            this.Id = id;
            this.Comment = comment;
            this.NoResponse = noResponse;
            this.SurveyQuestionMatrixElementResponses = surveyQuestionMatrixElementResponses;
            this.Values = values;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SurveyQuestionReference
        /// </summary>
        [DataMember(Name = "surveyQuestionReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSurveyQuestionReference SurveyQuestionReference { get; set; }

        /// <summary>
        /// Gets or Sets SurveyResponseReference
        /// </summary>
        [DataMember(Name = "surveyResponseReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSurveyResponseReference SurveyResponseReference { get; set; }

        /// <summary>
        /// Additional information provided by the responder about the question in the survey.
        /// </summary>
        /// <value>Additional information provided by the responder about the question in the survey.</value>
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Indicates there was no response to the question.
        /// </summary>
        /// <value>Indicates there was no response to the question.</value>
        [DataMember(Name = "noResponse", EmitDefaultValue = true)]
        public bool? NoResponse { get; set; }

        /// <summary>
        /// An unordered collection of surveyQuestionResponseSurveyQuestionMatrixElementResponses. For matrix questions, the response for each row of the matrix.
        /// </summary>
        /// <value>An unordered collection of surveyQuestionResponseSurveyQuestionMatrixElementResponses. For matrix questions, the response for each row of the matrix.</value>
        [DataMember(Name = "surveyQuestionMatrixElementResponses", EmitDefaultValue = false)]
        public List<EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse> SurveyQuestionMatrixElementResponses { get; set; }

        /// <summary>
        /// An unordered collection of surveyQuestionResponseValues. For free-form, single- or multiple-selection questions, one or more responses.
        /// </summary>
        /// <value>An unordered collection of surveyQuestionResponseValues. For free-form, single- or multiple-selection questions, one or more responses.</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public List<EdFiSurveyQuestionResponseValue> Values { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the SurveyQuestionResponse entity.
        /// </summary>
        /// <value>Extensions to the SurveyQuestionResponse entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveyQuestionResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SurveyQuestionReference: ").Append(SurveyQuestionReference).Append("\n");
            sb.Append("  SurveyResponseReference: ").Append(SurveyResponseReference).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  NoResponse: ").Append(NoResponse).Append("\n");
            sb.Append("  SurveyQuestionMatrixElementResponses: ").Append(SurveyQuestionMatrixElementResponses).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Comment (string) maxLength
            if (this.Comment != null && this.Comment.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Comment, length must be less than 1024.", new [] { "Comment" });
            }

            yield break;
        }
    }

}
