/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiLocalAccountReference
    /// </summary>
    [DataContract(Name = "edFi_localAccountReference")]
    public partial class EdFiLocalAccountReference : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLocalAccountReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiLocalAccountReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLocalAccountReference" /> class.
        /// </summary>
        /// <param name="accountIdentifier">Code value for the valid combination of account dimensions by LEA under which financials are reported. (required).</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (required).</param>
        /// <param name="fiscalYear">The fiscal year for the account. (required).</param>
        /// <param name="link">link.</param>
        public EdFiLocalAccountReference(string accountIdentifier = default, long educationOrganizationId = default, int fiscalYear = default, Link link = default)
        {
            // to ensure "accountIdentifier" is required (not null)
            if (accountIdentifier == null)
            {
                throw new ArgumentNullException("accountIdentifier is a required property for EdFiLocalAccountReference and cannot be null");
            }
            this.AccountIdentifier = accountIdentifier;
            this.EducationOrganizationId = educationOrganizationId;
            this.FiscalYear = fiscalYear;
            this.Link = link;
        }

        /// <summary>
        /// Code value for the valid combination of account dimensions by LEA under which financials are reported.
        /// </summary>
        /// <value>Code value for the valid combination of account dimensions by LEA under which financials are reported.</value>
        [DataMember(Name = "accountIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string AccountIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [DataMember(Name = "educationOrganizationId", IsRequired = true, EmitDefaultValue = true)]
        public long EducationOrganizationId { get; set; }

        /// <summary>
        /// The fiscal year for the account.
        /// </summary>
        /// <value>The fiscal year for the account.</value>
        [DataMember(Name = "fiscalYear", IsRequired = true, EmitDefaultValue = true)]
        public int FiscalYear { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public Link Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLocalAccountReference {\n");
            sb.Append("  AccountIdentifier: ").Append(AccountIdentifier).Append("\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountIdentifier (string) maxLength
            if (this.AccountIdentifier != null && this.AccountIdentifier.Length > 50)
            {
                yield return new ValidationResult("Invalid value for AccountIdentifier, length must be less than 50.", new [] { "AccountIdentifier" });
            }

            // FiscalYear (int) maximum
            if (this.FiscalYear > (int)2040)
            {
                yield return new ValidationResult("Invalid value for FiscalYear, must be a value less than or equal to 2040.", new [] { "FiscalYear" });
            }

            // FiscalYear (int) minimum
            if (this.FiscalYear < (int)2020)
            {
                yield return new ValidationResult("Invalid value for FiscalYear, must be a value greater than or equal to 2020.", new [] { "FiscalYear" });
            }

            yield break;
        }
    }

}
