/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudent
    /// </summary>
    [DataContract(Name = "edFi_student")]
    public partial class EdFiStudent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudent" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (required).</param>
        /// <param name="personReference">personReference.</param>
        /// <param name="birthCity">The city the student was born in..</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes..</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (required).</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born..</param>
        /// <param name="birthSexDescriptor">A person&#39;s sex at birth..</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born..</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen..</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S..</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III)..</param>
        /// <param name="identificationDocuments">An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship..</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="maidenName">The individual&#39;s maiden name..</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony..</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.).</param>
        /// <param name="otherNames">An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person..</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc..</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual..</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name.</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name.</param>
        /// <param name="visas">An unordered collection of studentVisas. An indicator of a non-US citizen&#39;s Visa type..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the Student entity..</param>
        public EdFiStudent(string id = default, string studentUniqueId = default, EdFiPersonReference personReference = default, string birthCity = default, string birthCountryDescriptor = default, DateOnly birthDate = default, string birthInternationalProvince = default, string birthSexDescriptor = default, string birthStateAbbreviationDescriptor = default, string citizenshipStatusDescriptor = default, DateOnly? dateEnteredUS = default, string firstName = default, string generationCodeSuffix = default, List<EdFiStudentIdentificationDocument> identificationDocuments = default, string lastSurname = default, string maidenName = default, string middleName = default, bool? multipleBirthStatus = default, List<EdFiStudentOtherName> otherNames = default, List<EdFiStudentPersonalIdentificationDocument> personalIdentificationDocuments = default, string personalTitlePrefix = default, string preferredFirstName = default, string preferredLastSurname = default, List<EdFiStudentVisa> visas = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "studentUniqueId" is required (not null)
            if (studentUniqueId == null)
            {
                throw new ArgumentNullException("studentUniqueId is a required property for EdFiStudent and cannot be null");
            }
            this.StudentUniqueId = studentUniqueId;
            this.BirthDate = birthDate;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for EdFiStudent and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastSurname" is required (not null)
            if (lastSurname == null)
            {
                throw new ArgumentNullException("lastSurname is a required property for EdFiStudent and cannot be null");
            }
            this.LastSurname = lastSurname;
            this.Id = id;
            this.PersonReference = personReference;
            this.BirthCity = birthCity;
            this.BirthCountryDescriptor = birthCountryDescriptor;
            this.BirthInternationalProvince = birthInternationalProvince;
            this.BirthSexDescriptor = birthSexDescriptor;
            this.BirthStateAbbreviationDescriptor = birthStateAbbreviationDescriptor;
            this.CitizenshipStatusDescriptor = citizenshipStatusDescriptor;
            this.DateEnteredUS = dateEnteredUS;
            this.GenerationCodeSuffix = generationCodeSuffix;
            this.IdentificationDocuments = identificationDocuments;
            this.MaidenName = maidenName;
            this.MiddleName = middleName;
            this.MultipleBirthStatus = multipleBirthStatus;
            this.OtherNames = otherNames;
            this.PersonalIdentificationDocuments = personalIdentificationDocuments;
            this.PersonalTitlePrefix = personalTitlePrefix;
            this.PreferredFirstName = preferredFirstName;
            this.PreferredLastSurname = preferredLastSurname;
            this.Visas = visas;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [DataMember(Name = "studentUniqueId", IsRequired = true, EmitDefaultValue = true)]
        public string StudentUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [DataMember(Name = "personReference", EmitDefaultValue = false)]
        public EdFiPersonReference PersonReference { get; set; }

        /// <summary>
        /// The city the student was born in.
        /// </summary>
        /// <value>The city the student was born in.</value>
        [DataMember(Name = "birthCity", EmitDefaultValue = true)]
        public string BirthCity { get; set; }

        /// <summary>
        /// The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        /// <value>The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.</value>
        [DataMember(Name = "birthCountryDescriptor", EmitDefaultValue = true)]
        public string BirthCountryDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        /// <value>The month, day, and year on which an individual was born.</value>
        [DataMember(Name = "birthDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly BirthDate { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        /// </summary>
        /// <value>For students born outside of the U.S., the Province or jurisdiction in which an individual is born.</value>
        [DataMember(Name = "birthInternationalProvince", EmitDefaultValue = true)]
        public string BirthInternationalProvince { get; set; }

        /// <summary>
        /// A person&#39;s sex at birth.
        /// </summary>
        /// <value>A person&#39;s sex at birth.</value>
        [DataMember(Name = "birthSexDescriptor", EmitDefaultValue = true)]
        public string BirthSexDescriptor { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        /// </summary>
        /// <value>The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.</value>
        [DataMember(Name = "birthStateAbbreviationDescriptor", EmitDefaultValue = true)]
        public string BirthStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        /// <value>An indicator of whether or not the person is a U.S. citizen.</value>
        [DataMember(Name = "citizenshipStatusDescriptor", EmitDefaultValue = true)]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        /// </summary>
        /// <value>For students born outside of the U.S., the date the student entered the U.S.</value>
        [DataMember(Name = "dateEnteredUS", EmitDefaultValue = true)]
        public DateOnly? DateEnteredUS { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [DataMember(Name = "generationCodeSuffix", EmitDefaultValue = true)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship.
        /// </summary>
        /// <value>An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship.</value>
        [DataMember(Name = "identificationDocuments", EmitDefaultValue = false)]
        public List<EdFiStudentIdentificationDocument> IdentificationDocuments { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name = "lastSurname", IsRequired = true, EmitDefaultValue = true)]
        public string LastSurname { get; set; }

        /// <summary>
        /// The individual&#39;s maiden name.
        /// </summary>
        /// <value>The individual&#39;s maiden name.</value>
        [DataMember(Name = "maidenName", EmitDefaultValue = true)]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name = "middleName", EmitDefaultValue = true)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        /// </summary>
        /// <value>Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)</value>
        [DataMember(Name = "multipleBirthStatus", EmitDefaultValue = true)]
        public bool? MultipleBirthStatus { get; set; }

        /// <summary>
        /// An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
        /// </summary>
        /// <value>An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</value>
        [DataMember(Name = "otherNames", EmitDefaultValue = false)]
        public List<EdFiStudentOtherName> OtherNames { get; set; }

        /// <summary>
        /// An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [DataMember(Name = "personalIdentificationDocuments", EmitDefaultValue = false)]
        public List<EdFiStudentPersonalIdentificationDocument> PersonalIdentificationDocuments { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the individual.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the individual.</value>
        [DataMember(Name = "personalTitlePrefix", EmitDefaultValue = true)]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// The first name the individual prefers, if different from their legal first name
        /// </summary>
        /// <value>The first name the individual prefers, if different from their legal first name</value>
        [DataMember(Name = "preferredFirstName", EmitDefaultValue = true)]
        public string PreferredFirstName { get; set; }

        /// <summary>
        /// The last name the individual prefers, if different from their legal last name
        /// </summary>
        /// <value>The last name the individual prefers, if different from their legal last name</value>
        [DataMember(Name = "preferredLastSurname", EmitDefaultValue = true)]
        public string PreferredLastSurname { get; set; }

        /// <summary>
        /// An unordered collection of studentVisas. An indicator of a non-US citizen&#39;s Visa type.
        /// </summary>
        /// <value>An unordered collection of studentVisas. An indicator of a non-US citizen&#39;s Visa type.</value>
        [DataMember(Name = "visas", EmitDefaultValue = false)]
        public List<EdFiStudentVisa> Visas { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the Student entity.
        /// </summary>
        /// <value>Extensions to the Student entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            sb.Append("  BirthCity: ").Append(BirthCity).Append("\n");
            sb.Append("  BirthCountryDescriptor: ").Append(BirthCountryDescriptor).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  BirthInternationalProvince: ").Append(BirthInternationalProvince).Append("\n");
            sb.Append("  BirthSexDescriptor: ").Append(BirthSexDescriptor).Append("\n");
            sb.Append("  BirthStateAbbreviationDescriptor: ").Append(BirthStateAbbreviationDescriptor).Append("\n");
            sb.Append("  CitizenshipStatusDescriptor: ").Append(CitizenshipStatusDescriptor).Append("\n");
            sb.Append("  DateEnteredUS: ").Append(DateEnteredUS).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  IdentificationDocuments: ").Append(IdentificationDocuments).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  MultipleBirthStatus: ").Append(MultipleBirthStatus).Append("\n");
            sb.Append("  OtherNames: ").Append(OtherNames).Append("\n");
            sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  PreferredFirstName: ").Append(PreferredFirstName).Append("\n");
            sb.Append("  PreferredLastSurname: ").Append(PreferredLastSurname).Append("\n");
            sb.Append("  Visas: ").Append(Visas).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StudentUniqueId (string) maxLength
            if (this.StudentUniqueId != null && this.StudentUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new [] { "StudentUniqueId" });
            }

            // BirthCity (string) maxLength
            if (this.BirthCity != null && this.BirthCity.Length > 30)
            {
                yield return new ValidationResult("Invalid value for BirthCity, length must be less than 30.", new [] { "BirthCity" });
            }

            // BirthCity (string) minLength
            if (this.BirthCity != null && this.BirthCity.Length < 2)
            {
                yield return new ValidationResult("Invalid value for BirthCity, length must be greater than 2.", new [] { "BirthCity" });
            }

            // BirthCountryDescriptor (string) maxLength
            if (this.BirthCountryDescriptor != null && this.BirthCountryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for BirthCountryDescriptor, length must be less than 306.", new [] { "BirthCountryDescriptor" });
            }

            // BirthInternationalProvince (string) maxLength
            if (this.BirthInternationalProvince != null && this.BirthInternationalProvince.Length > 150)
            {
                yield return new ValidationResult("Invalid value for BirthInternationalProvince, length must be less than 150.", new [] { "BirthInternationalProvince" });
            }

            // BirthSexDescriptor (string) maxLength
            if (this.BirthSexDescriptor != null && this.BirthSexDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for BirthSexDescriptor, length must be less than 306.", new [] { "BirthSexDescriptor" });
            }

            // BirthStateAbbreviationDescriptor (string) maxLength
            if (this.BirthStateAbbreviationDescriptor != null && this.BirthStateAbbreviationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for BirthStateAbbreviationDescriptor, length must be less than 306.", new [] { "BirthStateAbbreviationDescriptor" });
            }

            // CitizenshipStatusDescriptor (string) maxLength
            if (this.CitizenshipStatusDescriptor != null && this.CitizenshipStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CitizenshipStatusDescriptor, length must be less than 306.", new [] { "CitizenshipStatusDescriptor" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // GenerationCodeSuffix (string) maxLength
            if (this.GenerationCodeSuffix != null && this.GenerationCodeSuffix.Length > 10)
            {
                yield return new ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new [] { "GenerationCodeSuffix" });
            }

            // LastSurname (string) maxLength
            if (this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // MaidenName (string) maxLength
            if (this.MaidenName != null && this.MaidenName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MaidenName, length must be less than 75.", new [] { "MaidenName" });
            }

            // MiddleName (string) maxLength
            if (this.MiddleName != null && this.MiddleName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MiddleName, length must be less than 75.", new [] { "MiddleName" });
            }

            // PersonalTitlePrefix (string) maxLength
            if (this.PersonalTitlePrefix != null && this.PersonalTitlePrefix.Length > 30)
            {
                yield return new ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new [] { "PersonalTitlePrefix" });
            }

            // PreferredFirstName (string) maxLength
            if (this.PreferredFirstName != null && this.PreferredFirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for PreferredFirstName, length must be less than 75.", new [] { "PreferredFirstName" });
            }

            // PreferredLastSurname (string) maxLength
            if (this.PreferredLastSurname != null && this.PreferredLastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for PreferredLastSurname, length must be less than 75.", new [] { "PreferredLastSurname" });
            }

            yield break;
        }
    }

}
