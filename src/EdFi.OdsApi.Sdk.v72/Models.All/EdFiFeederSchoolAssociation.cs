/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiFeederSchoolAssociation
    /// </summary>
    [DataContract(Name = "edFi_feederSchoolAssociation")]
    public partial class EdFiFeederSchoolAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiFeederSchoolAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiFeederSchoolAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiFeederSchoolAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="beginDate">The month, day, and year of the first day of the feeder school association. (required).</param>
        /// <param name="feederSchoolReference">feederSchoolReference (required).</param>
        /// <param name="schoolReference">schoolReference (required).</param>
        /// <param name="endDate">The month, day, and year of the last day of the feeder school association..</param>
        /// <param name="feederRelationshipDescription">Describes the relationship from the feeder school to the receiving school, for example by program emphasis, such as special education, language immersion, science, or performing art..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the FeederSchoolAssociation entity..</param>
        public EdFiFeederSchoolAssociation(string id = default, DateOnly beginDate = default, EdFiSchoolReference feederSchoolReference = default, EdFiSchoolReference schoolReference = default, DateOnly? endDate = default, string feederRelationshipDescription = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            this.BeginDate = beginDate;
            // to ensure "feederSchoolReference" is required (not null)
            if (feederSchoolReference == null)
            {
                throw new ArgumentNullException("feederSchoolReference is a required property for EdFiFeederSchoolAssociation and cannot be null");
            }
            this.FeederSchoolReference = feederSchoolReference;
            // to ensure "schoolReference" is required (not null)
            if (schoolReference == null)
            {
                throw new ArgumentNullException("schoolReference is a required property for EdFiFeederSchoolAssociation and cannot be null");
            }
            this.SchoolReference = schoolReference;
            this.Id = id;
            this.EndDate = endDate;
            this.FeederRelationshipDescription = feederRelationshipDescription;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The month, day, and year of the first day of the feeder school association.
        /// </summary>
        /// <value>The month, day, and year of the first day of the feeder school association.</value>
        [DataMember(Name = "beginDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets FeederSchoolReference
        /// </summary>
        [DataMember(Name = "feederSchoolReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolReference FeederSchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [DataMember(Name = "schoolReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// The month, day, and year of the last day of the feeder school association.
        /// </summary>
        /// <value>The month, day, and year of the last day of the feeder school association.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateOnly? EndDate { get; set; }

        /// <summary>
        /// Describes the relationship from the feeder school to the receiving school, for example by program emphasis, such as special education, language immersion, science, or performing art.
        /// </summary>
        /// <value>Describes the relationship from the feeder school to the receiving school, for example by program emphasis, such as special education, language immersion, science, or performing art.</value>
        [DataMember(Name = "feederRelationshipDescription", EmitDefaultValue = true)]
        public string FeederRelationshipDescription { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the FeederSchoolAssociation entity.
        /// </summary>
        /// <value>Extensions to the FeederSchoolAssociation entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiFeederSchoolAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  FeederSchoolReference: ").Append(FeederSchoolReference).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FeederRelationshipDescription: ").Append(FeederRelationshipDescription).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FeederRelationshipDescription (string) maxLength
            if (this.FeederRelationshipDescription != null && this.FeederRelationshipDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for FeederRelationshipDescription, length must be less than 1024.", new [] { "FeederRelationshipDescription" });
            }

            yield break;
        }
    }

}
