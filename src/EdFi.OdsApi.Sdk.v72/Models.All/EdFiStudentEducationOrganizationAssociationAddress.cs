/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentEducationOrganizationAssociationAddress
    /// </summary>
    [DataContract(Name = "edFi_studentEducationOrganizationAssociationAddress")]
    public partial class EdFiStudentEducationOrganizationAssociationAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociationAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentEducationOrganizationAssociationAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociationAddress" /> class.
        /// </summary>
        /// <param name="addressTypeDescriptor">The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.) (required).</param>
        /// <param name="stateAbbreviationDescriptor">The abbreviation for the state (within the United States) or outlying area in which an address is located. (required).</param>
        /// <param name="city">The name of the city in which an address is located. (required).</param>
        /// <param name="postalCode">The five or nine digit zip code or overseas postal code portion of an address. (required).</param>
        /// <param name="streetNumberName">The street number and street name or post office box number of an address. (required).</param>
        /// <param name="localeDescriptor">A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban)..</param>
        /// <param name="apartmentRoomSuiteNumber">The apartment, room, or suite number of an address..</param>
        /// <param name="buildingSiteNumber">The number of the building on the site, if more than one building shares the same address..</param>
        /// <param name="congressionalDistrict">The congressional district in which an address is located..</param>
        /// <param name="countyFIPSCode">The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \&quot;first-order subdivisions\&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code..</param>
        /// <param name="doNotPublishIndicator">An indication that the address should not be published..</param>
        /// <param name="latitude">The geographic latitude of the physical address..</param>
        /// <param name="longitude">The geographic longitude of the physical address..</param>
        /// <param name="nameOfCounty">The name of the county, parish, borough, or comparable unit (within a state) in which an address is located..</param>
        /// <param name="periods">An unordered collection of studentEducationOrganizationAssociationAddressPeriods. The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address..</param>
        /// <param name="ext">Extensions to the StudentEducationOrganizationAssociationAddress entity..</param>
        public EdFiStudentEducationOrganizationAssociationAddress(string addressTypeDescriptor = default, string stateAbbreviationDescriptor = default, string city = default, string postalCode = default, string streetNumberName = default, string localeDescriptor = default, string apartmentRoomSuiteNumber = default, string buildingSiteNumber = default, string congressionalDistrict = default, string countyFIPSCode = default, bool? doNotPublishIndicator = default, string latitude = default, string longitude = default, string nameOfCounty = default, List<EdFiStudentEducationOrganizationAssociationAddressPeriod> periods = default, Object ext = default)
        {
            // to ensure "addressTypeDescriptor" is required (not null)
            if (addressTypeDescriptor == null)
            {
                throw new ArgumentNullException("addressTypeDescriptor is a required property for EdFiStudentEducationOrganizationAssociationAddress and cannot be null");
            }
            this.AddressTypeDescriptor = addressTypeDescriptor;
            // to ensure "stateAbbreviationDescriptor" is required (not null)
            if (stateAbbreviationDescriptor == null)
            {
                throw new ArgumentNullException("stateAbbreviationDescriptor is a required property for EdFiStudentEducationOrganizationAssociationAddress and cannot be null");
            }
            this.StateAbbreviationDescriptor = stateAbbreviationDescriptor;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for EdFiStudentEducationOrganizationAssociationAddress and cannot be null");
            }
            this.City = city;
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode is a required property for EdFiStudentEducationOrganizationAssociationAddress and cannot be null");
            }
            this.PostalCode = postalCode;
            // to ensure "streetNumberName" is required (not null)
            if (streetNumberName == null)
            {
                throw new ArgumentNullException("streetNumberName is a required property for EdFiStudentEducationOrganizationAssociationAddress and cannot be null");
            }
            this.StreetNumberName = streetNumberName;
            this.LocaleDescriptor = localeDescriptor;
            this.ApartmentRoomSuiteNumber = apartmentRoomSuiteNumber;
            this.BuildingSiteNumber = buildingSiteNumber;
            this.CongressionalDistrict = congressionalDistrict;
            this.CountyFIPSCode = countyFIPSCode;
            this.DoNotPublishIndicator = doNotPublishIndicator;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.NameOfCounty = nameOfCounty;
            this.Periods = periods;
            this.Ext = ext;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        /// <value>The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)</value>
        [DataMember(Name = "addressTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        /// <value>The abbreviation for the state (within the United States) or outlying area in which an address is located.</value>
        [DataMember(Name = "stateAbbreviationDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        /// <value>The name of the city in which an address is located.</value>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        /// <value>The five or nine digit zip code or overseas postal code portion of an address.</value>
        [DataMember(Name = "postalCode", IsRequired = true, EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        /// <value>The street number and street name or post office box number of an address.</value>
        [DataMember(Name = "streetNumberName", IsRequired = true, EmitDefaultValue = true)]
        public string StreetNumberName { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        /// <value>A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).</value>
        [DataMember(Name = "localeDescriptor", EmitDefaultValue = true)]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        /// <value>The apartment, room, or suite number of an address.</value>
        [DataMember(Name = "apartmentRoomSuiteNumber", EmitDefaultValue = true)]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        /// <value>The number of the building on the site, if more than one building shares the same address.</value>
        [DataMember(Name = "buildingSiteNumber", EmitDefaultValue = true)]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        /// <value>The congressional district in which an address is located.</value>
        [DataMember(Name = "congressionalDistrict", EmitDefaultValue = true)]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \&quot;first-order subdivisions\&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        /// <value>The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \&quot;first-order subdivisions\&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.</value>
        [DataMember(Name = "countyFIPSCode", EmitDefaultValue = true)]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        /// <value>An indication that the address should not be published.</value>
        [DataMember(Name = "doNotPublishIndicator", EmitDefaultValue = true)]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        /// <value>The geographic latitude of the physical address.</value>
        [DataMember(Name = "latitude", EmitDefaultValue = true)]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        /// <value>The geographic longitude of the physical address.</value>
        [DataMember(Name = "longitude", EmitDefaultValue = true)]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.
        /// </summary>
        /// <value>The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.</value>
        [DataMember(Name = "nameOfCounty", EmitDefaultValue = true)]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationAddressPeriods. The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationAddressPeriods. The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.</value>
        [DataMember(Name = "periods", EmitDefaultValue = false)]
        public List<EdFiStudentEducationOrganizationAssociationAddressPeriod> Periods { get; set; }

        /// <summary>
        /// Extensions to the StudentEducationOrganizationAssociationAddress entity.
        /// </summary>
        /// <value>Extensions to the StudentEducationOrganizationAssociationAddress entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentEducationOrganizationAssociationAddress {\n");
            sb.Append("  AddressTypeDescriptor: ").Append(AddressTypeDescriptor).Append("\n");
            sb.Append("  StateAbbreviationDescriptor: ").Append(StateAbbreviationDescriptor).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  StreetNumberName: ").Append(StreetNumberName).Append("\n");
            sb.Append("  LocaleDescriptor: ").Append(LocaleDescriptor).Append("\n");
            sb.Append("  ApartmentRoomSuiteNumber: ").Append(ApartmentRoomSuiteNumber).Append("\n");
            sb.Append("  BuildingSiteNumber: ").Append(BuildingSiteNumber).Append("\n");
            sb.Append("  CongressionalDistrict: ").Append(CongressionalDistrict).Append("\n");
            sb.Append("  CountyFIPSCode: ").Append(CountyFIPSCode).Append("\n");
            sb.Append("  DoNotPublishIndicator: ").Append(DoNotPublishIndicator).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  NameOfCounty: ").Append(NameOfCounty).Append("\n");
            sb.Append("  Periods: ").Append(Periods).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AddressTypeDescriptor (string) maxLength
            if (this.AddressTypeDescriptor != null && this.AddressTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AddressTypeDescriptor, length must be less than 306.", new [] { "AddressTypeDescriptor" });
            }

            // StateAbbreviationDescriptor (string) maxLength
            if (this.StateAbbreviationDescriptor != null && this.StateAbbreviationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for StateAbbreviationDescriptor, length must be less than 306.", new [] { "StateAbbreviationDescriptor" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 30)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 30.", new [] { "City" });
            }

            // City (string) minLength
            if (this.City != null && this.City.Length < 2)
            {
                yield return new ValidationResult("Invalid value for City, length must be greater than 2.", new [] { "City" });
            }

            // PostalCode (string) maxLength
            if (this.PostalCode != null && this.PostalCode.Length > 17)
            {
                yield return new ValidationResult("Invalid value for PostalCode, length must be less than 17.", new [] { "PostalCode" });
            }

            // StreetNumberName (string) maxLength
            if (this.StreetNumberName != null && this.StreetNumberName.Length > 150)
            {
                yield return new ValidationResult("Invalid value for StreetNumberName, length must be less than 150.", new [] { "StreetNumberName" });
            }

            // LocaleDescriptor (string) maxLength
            if (this.LocaleDescriptor != null && this.LocaleDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LocaleDescriptor, length must be less than 306.", new [] { "LocaleDescriptor" });
            }

            // ApartmentRoomSuiteNumber (string) maxLength
            if (this.ApartmentRoomSuiteNumber != null && this.ApartmentRoomSuiteNumber.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ApartmentRoomSuiteNumber, length must be less than 50.", new [] { "ApartmentRoomSuiteNumber" });
            }

            // BuildingSiteNumber (string) maxLength
            if (this.BuildingSiteNumber != null && this.BuildingSiteNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for BuildingSiteNumber, length must be less than 20.", new [] { "BuildingSiteNumber" });
            }

            // CongressionalDistrict (string) maxLength
            if (this.CongressionalDistrict != null && this.CongressionalDistrict.Length > 30)
            {
                yield return new ValidationResult("Invalid value for CongressionalDistrict, length must be less than 30.", new [] { "CongressionalDistrict" });
            }

            // CountyFIPSCode (string) maxLength
            if (this.CountyFIPSCode != null && this.CountyFIPSCode.Length > 5)
            {
                yield return new ValidationResult("Invalid value for CountyFIPSCode, length must be less than 5.", new [] { "CountyFIPSCode" });
            }

            // CountyFIPSCode (string) minLength
            if (this.CountyFIPSCode != null && this.CountyFIPSCode.Length < 3)
            {
                yield return new ValidationResult("Invalid value for CountyFIPSCode, length must be greater than 3.", new [] { "CountyFIPSCode" });
            }

            // Latitude (string) maxLength
            if (this.Latitude != null && this.Latitude.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Latitude, length must be less than 20.", new [] { "Latitude" });
            }

            // Longitude (string) maxLength
            if (this.Longitude != null && this.Longitude.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Longitude, length must be less than 20.", new [] { "Longitude" });
            }

            // NameOfCounty (string) maxLength
            if (this.NameOfCounty != null && this.NameOfCounty.Length > 30)
            {
                yield return new ValidationResult("Invalid value for NameOfCounty, length must be less than 30.", new [] { "NameOfCounty" });
            }

            yield break;
        }
    }

}
