/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiDescriptorMappingKey
    /// </summary>
    [DataContract(Name = "trackedChanges_edFi_descriptorMappingKey")]
    public partial class TrackedChangesEdFiDescriptorMappingKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiDescriptorMappingKey" /> class.
        /// </summary>
        /// <param name="mappedNamespace">The namespace of the descriptor value to which the from descriptor value is mapped to..</param>
        /// <param name="mappedValue">The descriptor value to which the from descriptor value is being mapped to..</param>
        /// <param name="varNamespace">The namespace of the descriptor value that is being mapped to another value..</param>
        /// <param name="value">The descriptor value that is being mapped to another value..</param>
        public TrackedChangesEdFiDescriptorMappingKey(string mappedNamespace = default, string mappedValue = default, string varNamespace = default, string value = default)
        {
            this.MappedNamespace = mappedNamespace;
            this.MappedValue = mappedValue;
            this.Namespace = varNamespace;
            this.Value = value;
        }

        /// <summary>
        /// The namespace of the descriptor value to which the from descriptor value is mapped to.
        /// </summary>
        /// <value>The namespace of the descriptor value to which the from descriptor value is mapped to.</value>
        [DataMember(Name = "mappedNamespace", EmitDefaultValue = false)]
        public string MappedNamespace { get; set; }

        /// <summary>
        /// The descriptor value to which the from descriptor value is being mapped to.
        /// </summary>
        /// <value>The descriptor value to which the from descriptor value is being mapped to.</value>
        [DataMember(Name = "mappedValue", EmitDefaultValue = false)]
        public string MappedValue { get; set; }

        /// <summary>
        /// The namespace of the descriptor value that is being mapped to another value.
        /// </summary>
        /// <value>The namespace of the descriptor value that is being mapped to another value.</value>
        [DataMember(Name = "namespace", EmitDefaultValue = false)]
        public string Namespace { get; set; }

        /// <summary>
        /// The descriptor value that is being mapped to another value.
        /// </summary>
        /// <value>The descriptor value that is being mapped to another value.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiDescriptorMappingKey {\n");
            sb.Append("  MappedNamespace: ").Append(MappedNamespace).Append("\n");
            sb.Append("  MappedValue: ").Append(MappedValue).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MappedNamespace (string) maxLength
            if (this.MappedNamespace != null && this.MappedNamespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for MappedNamespace, length must be less than 255.", new [] { "MappedNamespace" });
            }

            // MappedNamespace (string) minLength
            if (this.MappedNamespace != null && this.MappedNamespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for MappedNamespace, length must be greater than 5.", new [] { "MappedNamespace" });
            }

            // MappedValue (string) maxLength
            if (this.MappedValue != null && this.MappedValue.Length > 50)
            {
                yield return new ValidationResult("Invalid value for MappedValue, length must be less than 50.", new [] { "MappedValue" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // Value (string) maxLength
            if (this.Value != null && this.Value.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Value, length must be less than 50.", new [] { "Value" });
            }

            yield break;
        }
    }

}
