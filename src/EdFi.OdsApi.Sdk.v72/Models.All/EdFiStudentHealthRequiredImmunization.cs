/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentHealthRequiredImmunization
    /// </summary>
    [DataContract(Name = "edFi_studentHealthRequiredImmunization")]
    public partial class EdFiStudentHealthRequiredImmunization : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentHealthRequiredImmunization" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentHealthRequiredImmunization() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentHealthRequiredImmunization" /> class.
        /// </summary>
        /// <param name="immunizationTypeDescriptor">An indication of the type of immunization that the student has received. (required).</param>
        /// <param name="medicalExemption">The medical condition identified by a physician that contraindicates the vaccine..</param>
        /// <param name="medicalExemptionDate">The year, month, and day of the medical exemption by a physician..</param>
        /// <param name="dates">An unordered collection of studentHealthRequiredImmunizationDates. The year, month and day of the related required immunization..</param>
        /// <param name="ext">Extensions to the StudentHealthRequiredImmunization entity..</param>
        public EdFiStudentHealthRequiredImmunization(string immunizationTypeDescriptor = default, string medicalExemption = default, DateOnly? medicalExemptionDate = default, List<EdFiStudentHealthRequiredImmunizationDate> dates = default, Object ext = default)
        {
            // to ensure "immunizationTypeDescriptor" is required (not null)
            if (immunizationTypeDescriptor == null)
            {
                throw new ArgumentNullException("immunizationTypeDescriptor is a required property for EdFiStudentHealthRequiredImmunization and cannot be null");
            }
            this.ImmunizationTypeDescriptor = immunizationTypeDescriptor;
            this.MedicalExemption = medicalExemption;
            this.MedicalExemptionDate = medicalExemptionDate;
            this.Dates = dates;
            this.Ext = ext;
        }

        /// <summary>
        /// An indication of the type of immunization that the student has received.
        /// </summary>
        /// <value>An indication of the type of immunization that the student has received.</value>
        [DataMember(Name = "immunizationTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string ImmunizationTypeDescriptor { get; set; }

        /// <summary>
        /// The medical condition identified by a physician that contraindicates the vaccine.
        /// </summary>
        /// <value>The medical condition identified by a physician that contraindicates the vaccine.</value>
        [DataMember(Name = "medicalExemption", EmitDefaultValue = true)]
        public string MedicalExemption { get; set; }

        /// <summary>
        /// The year, month, and day of the medical exemption by a physician.
        /// </summary>
        /// <value>The year, month, and day of the medical exemption by a physician.</value>
        [DataMember(Name = "medicalExemptionDate", EmitDefaultValue = true)]
        public DateOnly? MedicalExemptionDate { get; set; }

        /// <summary>
        /// An unordered collection of studentHealthRequiredImmunizationDates. The year, month and day of the related required immunization.
        /// </summary>
        /// <value>An unordered collection of studentHealthRequiredImmunizationDates. The year, month and day of the related required immunization.</value>
        [DataMember(Name = "dates", EmitDefaultValue = false)]
        public List<EdFiStudentHealthRequiredImmunizationDate> Dates { get; set; }

        /// <summary>
        /// Extensions to the StudentHealthRequiredImmunization entity.
        /// </summary>
        /// <value>Extensions to the StudentHealthRequiredImmunization entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentHealthRequiredImmunization {\n");
            sb.Append("  ImmunizationTypeDescriptor: ").Append(ImmunizationTypeDescriptor).Append("\n");
            sb.Append("  MedicalExemption: ").Append(MedicalExemption).Append("\n");
            sb.Append("  MedicalExemptionDate: ").Append(MedicalExemptionDate).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ImmunizationTypeDescriptor (string) maxLength
            if (this.ImmunizationTypeDescriptor != null && this.ImmunizationTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ImmunizationTypeDescriptor, length must be less than 306.", new [] { "ImmunizationTypeDescriptor" });
            }

            // MedicalExemption (string) maxLength
            if (this.MedicalExemption != null && this.MedicalExemption.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for MedicalExemption, length must be less than 1024.", new [] { "MedicalExemption" });
            }

            yield break;
        }
    }

}
