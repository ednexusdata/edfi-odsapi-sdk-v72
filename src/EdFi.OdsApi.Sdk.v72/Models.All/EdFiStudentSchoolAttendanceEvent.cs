/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentSchoolAttendanceEvent
    /// </summary>
    [DataContract(Name = "edFi_studentSchoolAttendanceEvent")]
    public partial class EdFiStudentSchoolAttendanceEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentSchoolAttendanceEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentSchoolAttendanceEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentSchoolAttendanceEvent" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="attendanceEventCategoryDescriptor">A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy. (required).</param>
        /// <param name="eventDate">Date for this attendance event. (required).</param>
        /// <param name="schoolReference">schoolReference (required).</param>
        /// <param name="sessionReference">sessionReference (required).</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="arrivalTime">The time of day the student arrived for the attendance event in ISO 8601 format..</param>
        /// <param name="attendanceEventReason">The reported reason for a student&#39;s absence..</param>
        /// <param name="departureTime">The time of day the student departed for the attendance event in ISO 8601 format..</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section..</param>
        /// <param name="eventDuration">The amount of time for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33..</param>
        /// <param name="schoolAttendanceDuration">The duration in minutes of the school attendance event..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the StudentSchoolAttendanceEvent entity..</param>
        public EdFiStudentSchoolAttendanceEvent(string id = default, string attendanceEventCategoryDescriptor = default, DateOnly eventDate = default, EdFiSchoolReference schoolReference = default, EdFiSessionReference sessionReference = default, EdFiStudentReference studentReference = default, string arrivalTime = default, string attendanceEventReason = default, string departureTime = default, string educationalEnvironmentDescriptor = default, double? eventDuration = default, int? schoolAttendanceDuration = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "attendanceEventCategoryDescriptor" is required (not null)
            if (attendanceEventCategoryDescriptor == null)
            {
                throw new ArgumentNullException("attendanceEventCategoryDescriptor is a required property for EdFiStudentSchoolAttendanceEvent and cannot be null");
            }
            this.AttendanceEventCategoryDescriptor = attendanceEventCategoryDescriptor;
            this.EventDate = eventDate;
            // to ensure "schoolReference" is required (not null)
            if (schoolReference == null)
            {
                throw new ArgumentNullException("schoolReference is a required property for EdFiStudentSchoolAttendanceEvent and cannot be null");
            }
            this.SchoolReference = schoolReference;
            // to ensure "sessionReference" is required (not null)
            if (sessionReference == null)
            {
                throw new ArgumentNullException("sessionReference is a required property for EdFiStudentSchoolAttendanceEvent and cannot be null");
            }
            this.SessionReference = sessionReference;
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new ArgumentNullException("studentReference is a required property for EdFiStudentSchoolAttendanceEvent and cannot be null");
            }
            this.StudentReference = studentReference;
            this.Id = id;
            this.ArrivalTime = arrivalTime;
            this.AttendanceEventReason = attendanceEventReason;
            this.DepartureTime = departureTime;
            this.EducationalEnvironmentDescriptor = educationalEnvironmentDescriptor;
            this.EventDuration = eventDuration;
            this.SchoolAttendanceDuration = schoolAttendanceDuration;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy.
        /// </summary>
        /// <value>A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy.</value>
        [DataMember(Name = "attendanceEventCategoryDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string AttendanceEventCategoryDescriptor { get; set; }

        /// <summary>
        /// Date for this attendance event.
        /// </summary>
        /// <value>Date for this attendance event.</value>
        [DataMember(Name = "eventDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly EventDate { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [DataMember(Name = "schoolReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets SessionReference
        /// </summary>
        [DataMember(Name = "sessionReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSessionReference SessionReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name = "studentReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// The time of day the student arrived for the attendance event in ISO 8601 format.
        /// </summary>
        /// <value>The time of day the student arrived for the attendance event in ISO 8601 format.</value>
        [DataMember(Name = "arrivalTime", EmitDefaultValue = true)]
        public string ArrivalTime { get; set; }

        /// <summary>
        /// The reported reason for a student&#39;s absence.
        /// </summary>
        /// <value>The reported reason for a student&#39;s absence.</value>
        [DataMember(Name = "attendanceEventReason", EmitDefaultValue = true)]
        public string AttendanceEventReason { get; set; }

        /// <summary>
        /// The time of day the student departed for the attendance event in ISO 8601 format.
        /// </summary>
        /// <value>The time of day the student departed for the attendance event in ISO 8601 format.</value>
        [DataMember(Name = "departureTime", EmitDefaultValue = true)]
        public string DepartureTime { get; set; }

        /// <summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        /// </summary>
        /// <value>The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.</value>
        [DataMember(Name = "educationalEnvironmentDescriptor", EmitDefaultValue = true)]
        public string EducationalEnvironmentDescriptor { get; set; }

        /// <summary>
        /// The amount of time for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33.
        /// </summary>
        /// <value>The amount of time for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33.</value>
        [DataMember(Name = "eventDuration", EmitDefaultValue = true)]
        public double? EventDuration { get; set; }

        /// <summary>
        /// The duration in minutes of the school attendance event.
        /// </summary>
        /// <value>The duration in minutes of the school attendance event.</value>
        [DataMember(Name = "schoolAttendanceDuration", EmitDefaultValue = true)]
        public int? SchoolAttendanceDuration { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the StudentSchoolAttendanceEvent entity.
        /// </summary>
        /// <value>Extensions to the StudentSchoolAttendanceEvent entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentSchoolAttendanceEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AttendanceEventCategoryDescriptor: ").Append(AttendanceEventCategoryDescriptor).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  SessionReference: ").Append(SessionReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  AttendanceEventReason: ").Append(AttendanceEventReason).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  EducationalEnvironmentDescriptor: ").Append(EducationalEnvironmentDescriptor).Append("\n");
            sb.Append("  EventDuration: ").Append(EventDuration).Append("\n");
            sb.Append("  SchoolAttendanceDuration: ").Append(SchoolAttendanceDuration).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AttendanceEventCategoryDescriptor (string) maxLength
            if (this.AttendanceEventCategoryDescriptor != null && this.AttendanceEventCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AttendanceEventCategoryDescriptor, length must be less than 306.", new [] { "AttendanceEventCategoryDescriptor" });
            }

            // AttendanceEventReason (string) maxLength
            if (this.AttendanceEventReason != null && this.AttendanceEventReason.Length > 255)
            {
                yield return new ValidationResult("Invalid value for AttendanceEventReason, length must be less than 255.", new [] { "AttendanceEventReason" });
            }

            // EducationalEnvironmentDescriptor (string) maxLength
            if (this.EducationalEnvironmentDescriptor != null && this.EducationalEnvironmentDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EducationalEnvironmentDescriptor, length must be less than 306.", new [] { "EducationalEnvironmentDescriptor" });
            }

            // EventDuration (double?) maximum
            if (this.EventDuration > (double?)1.0)
            {
                yield return new ValidationResult("Invalid value for EventDuration, must be a value less than or equal to 1.0.", new [] { "EventDuration" });
            }

            // EventDuration (double?) minimum
            if (this.EventDuration < (double?)0.0)
            {
                yield return new ValidationResult("Invalid value for EventDuration, must be a value greater than or equal to 0.0.", new [] { "EventDuration" });
            }

            // SchoolAttendanceDuration (int?) maximum
            if (this.SchoolAttendanceDuration > (int?)1440)
            {
                yield return new ValidationResult("Invalid value for SchoolAttendanceDuration, must be a value less than or equal to 1440.", new [] { "SchoolAttendanceDuration" });
            }

            // SchoolAttendanceDuration (int?) minimum
            if (this.SchoolAttendanceDuration < (int?)0)
            {
                yield return new ValidationResult("Invalid value for SchoolAttendanceDuration, must be a value greater than or equal to 0.", new [] { "SchoolAttendanceDuration" });
            }

            yield break;
        }
    }

}
