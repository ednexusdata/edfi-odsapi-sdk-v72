/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiCredential
    /// </summary>
    [DataContract(Name = "edFi_credential")]
    public partial class EdFiCredential : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCredential" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiCredential() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCredential" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="credentialIdentifier">Identifier or serial number assigned to the credential. (required).</param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued. (required).</param>
        /// <param name="academicSubjects">An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains..</param>
        /// <param name="credentialFieldDescriptor">The field of certification for the certificate (e.g., Mathematics, Music)..</param>
        /// <param name="credentialTypeDescriptor">An indication of the category of credential an individual holds. (required).</param>
        /// <param name="effectiveDate">The year, month and day on which an active credential held by an individual was issued..</param>
        /// <param name="endorsements">An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization..</param>
        /// <param name="expirationDate">The month, day, and year on which an active credential held by an individual will expire..</param>
        /// <param name="gradeLevels">An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching..</param>
        /// <param name="issuanceDate">The month, day, and year on which an active credential was issued to an individual. (required).</param>
        /// <param name="varNamespace">Namespace for the credential. (required).</param>
        /// <param name="teachingCredentialBasisDescriptor">An indication of the pre-determined criteria for granting the teaching credential that an individual holds..</param>
        /// <param name="teachingCredentialDescriptor">An indication of the category of a legal document giving authorization to perform teaching assignment services..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the Credential entity..</param>
        public EdFiCredential(string id = default, string credentialIdentifier = default, string stateOfIssueStateAbbreviationDescriptor = default, List<EdFiCredentialAcademicSubject> academicSubjects = default, string credentialFieldDescriptor = default, string credentialTypeDescriptor = default, DateOnly? effectiveDate = default, List<EdFiCredentialEndorsement> endorsements = default, DateOnly? expirationDate = default, List<EdFiCredentialGradeLevel> gradeLevels = default, DateOnly issuanceDate = default, string varNamespace = default, string teachingCredentialBasisDescriptor = default, string teachingCredentialDescriptor = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "credentialIdentifier" is required (not null)
            if (credentialIdentifier == null)
            {
                throw new ArgumentNullException("credentialIdentifier is a required property for EdFiCredential and cannot be null");
            }
            this.CredentialIdentifier = credentialIdentifier;
            // to ensure "stateOfIssueStateAbbreviationDescriptor" is required (not null)
            if (stateOfIssueStateAbbreviationDescriptor == null)
            {
                throw new ArgumentNullException("stateOfIssueStateAbbreviationDescriptor is a required property for EdFiCredential and cannot be null");
            }
            this.StateOfIssueStateAbbreviationDescriptor = stateOfIssueStateAbbreviationDescriptor;
            // to ensure "credentialTypeDescriptor" is required (not null)
            if (credentialTypeDescriptor == null)
            {
                throw new ArgumentNullException("credentialTypeDescriptor is a required property for EdFiCredential and cannot be null");
            }
            this.CredentialTypeDescriptor = credentialTypeDescriptor;
            this.IssuanceDate = issuanceDate;
            // to ensure "varNamespace" is required (not null)
            if (varNamespace == null)
            {
                throw new ArgumentNullException("varNamespace is a required property for EdFiCredential and cannot be null");
            }
            this.Namespace = varNamespace;
            this.Id = id;
            this.AcademicSubjects = academicSubjects;
            this.CredentialFieldDescriptor = credentialFieldDescriptor;
            this.EffectiveDate = effectiveDate;
            this.Endorsements = endorsements;
            this.ExpirationDate = expirationDate;
            this.GradeLevels = gradeLevels;
            this.TeachingCredentialBasisDescriptor = teachingCredentialBasisDescriptor;
            this.TeachingCredentialDescriptor = teachingCredentialDescriptor;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        /// <value>Identifier or serial number assigned to the credential.</value>
        [DataMember(Name = "credentialIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string CredentialIdentifier { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>
        /// <value>The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.</value>
        [DataMember(Name = "stateOfIssueStateAbbreviationDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string StateOfIssueStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains.
        /// </summary>
        /// <value>An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains.</value>
        [DataMember(Name = "academicSubjects", EmitDefaultValue = false)]
        public List<EdFiCredentialAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// The field of certification for the certificate (e.g., Mathematics, Music).
        /// </summary>
        /// <value>The field of certification for the certificate (e.g., Mathematics, Music).</value>
        [DataMember(Name = "credentialFieldDescriptor", EmitDefaultValue = true)]
        public string CredentialFieldDescriptor { get; set; }

        /// <summary>
        /// An indication of the category of credential an individual holds.
        /// </summary>
        /// <value>An indication of the category of credential an individual holds.</value>
        [DataMember(Name = "credentialTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string CredentialTypeDescriptor { get; set; }

        /// <summary>
        /// The year, month and day on which an active credential held by an individual was issued.
        /// </summary>
        /// <value>The year, month and day on which an active credential held by an individual was issued.</value>
        [DataMember(Name = "effectiveDate", EmitDefaultValue = true)]
        public DateOnly? EffectiveDate { get; set; }

        /// <summary>
        /// An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization.
        /// </summary>
        /// <value>An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization.</value>
        [DataMember(Name = "endorsements", EmitDefaultValue = false)]
        public List<EdFiCredentialEndorsement> Endorsements { get; set; }

        /// <summary>
        /// The month, day, and year on which an active credential held by an individual will expire.
        /// </summary>
        /// <value>The month, day, and year on which an active credential held by an individual will expire.</value>
        [DataMember(Name = "expirationDate", EmitDefaultValue = true)]
        public DateOnly? ExpirationDate { get; set; }

        /// <summary>
        /// An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching.
        /// </summary>
        /// <value>An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching.</value>
        [DataMember(Name = "gradeLevels", EmitDefaultValue = false)]
        public List<EdFiCredentialGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// The month, day, and year on which an active credential was issued to an individual.
        /// </summary>
        /// <value>The month, day, and year on which an active credential was issued to an individual.</value>
        [DataMember(Name = "issuanceDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly IssuanceDate { get; set; }

        /// <summary>
        /// Namespace for the credential.
        /// </summary>
        /// <value>Namespace for the credential.</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// An indication of the pre-determined criteria for granting the teaching credential that an individual holds.
        /// </summary>
        /// <value>An indication of the pre-determined criteria for granting the teaching credential that an individual holds.</value>
        [DataMember(Name = "teachingCredentialBasisDescriptor", EmitDefaultValue = true)]
        public string TeachingCredentialBasisDescriptor { get; set; }

        /// <summary>
        /// An indication of the category of a legal document giving authorization to perform teaching assignment services.
        /// </summary>
        /// <value>An indication of the category of a legal document giving authorization to perform teaching assignment services.</value>
        [DataMember(Name = "teachingCredentialDescriptor", EmitDefaultValue = true)]
        public string TeachingCredentialDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the Credential entity.
        /// </summary>
        /// <value>Extensions to the Credential entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCredential {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CredentialIdentifier: ").Append(CredentialIdentifier).Append("\n");
            sb.Append("  StateOfIssueStateAbbreviationDescriptor: ").Append(StateOfIssueStateAbbreviationDescriptor).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  CredentialFieldDescriptor: ").Append(CredentialFieldDescriptor).Append("\n");
            sb.Append("  CredentialTypeDescriptor: ").Append(CredentialTypeDescriptor).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  Endorsements: ").Append(Endorsements).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  IssuanceDate: ").Append(IssuanceDate).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  TeachingCredentialBasisDescriptor: ").Append(TeachingCredentialBasisDescriptor).Append("\n");
            sb.Append("  TeachingCredentialDescriptor: ").Append(TeachingCredentialDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CredentialIdentifier (string) maxLength
            if (this.CredentialIdentifier != null && this.CredentialIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CredentialIdentifier, length must be less than 60.", new [] { "CredentialIdentifier" });
            }

            // StateOfIssueStateAbbreviationDescriptor (string) maxLength
            if (this.StateOfIssueStateAbbreviationDescriptor != null && this.StateOfIssueStateAbbreviationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for StateOfIssueStateAbbreviationDescriptor, length must be less than 306.", new [] { "StateOfIssueStateAbbreviationDescriptor" });
            }

            // CredentialFieldDescriptor (string) maxLength
            if (this.CredentialFieldDescriptor != null && this.CredentialFieldDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CredentialFieldDescriptor, length must be less than 306.", new [] { "CredentialFieldDescriptor" });
            }

            // CredentialTypeDescriptor (string) maxLength
            if (this.CredentialTypeDescriptor != null && this.CredentialTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CredentialTypeDescriptor, length must be less than 306.", new [] { "CredentialTypeDescriptor" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // TeachingCredentialBasisDescriptor (string) maxLength
            if (this.TeachingCredentialBasisDescriptor != null && this.TeachingCredentialBasisDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for TeachingCredentialBasisDescriptor, length must be less than 306.", new [] { "TeachingCredentialBasisDescriptor" });
            }

            // TeachingCredentialDescriptor (string) maxLength
            if (this.TeachingCredentialDescriptor != null && this.TeachingCredentialDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for TeachingCredentialDescriptor, length must be less than 306.", new [] { "TeachingCredentialDescriptor" });
            }

            yield break;
        }
    }

}
