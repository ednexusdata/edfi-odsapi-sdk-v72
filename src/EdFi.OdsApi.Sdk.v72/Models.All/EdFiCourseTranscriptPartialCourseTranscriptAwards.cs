/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiCourseTranscriptPartialCourseTranscriptAwards
    /// </summary>
    [DataContract(Name = "edFi_courseTranscriptPartialCourseTranscriptAwards")]
    public partial class EdFiCourseTranscriptPartialCourseTranscriptAwards : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCourseTranscriptPartialCourseTranscriptAwards" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiCourseTranscriptPartialCourseTranscriptAwards() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCourseTranscriptPartialCourseTranscriptAwards" /> class.
        /// </summary>
        /// <param name="awardDate">The date the partial credits and/or grades were awarded or earned. (required).</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned..</param>
        /// <param name="earnedCredits">The number of credits a student earned for completing a given course. (required).</param>
        /// <param name="letterGradeEarned">The indicator of student performance as submitted by the instructor..</param>
        /// <param name="numericGradeEarned">The indicator of student performance as submitted by the instructor..</param>
        /// <param name="ext">Extensions to the CourseTranscriptPartialCourseTranscriptAwards entity..</param>
        public EdFiCourseTranscriptPartialCourseTranscriptAwards(DateOnly awardDate = default, string methodCreditEarnedDescriptor = default, double earnedCredits = default, string letterGradeEarned = default, string numericGradeEarned = default, Object ext = default)
        {
            this.AwardDate = awardDate;
            this.EarnedCredits = earnedCredits;
            this.MethodCreditEarnedDescriptor = methodCreditEarnedDescriptor;
            this.LetterGradeEarned = letterGradeEarned;
            this.NumericGradeEarned = numericGradeEarned;
            this.Ext = ext;
        }

        /// <summary>
        /// The date the partial credits and/or grades were awarded or earned.
        /// </summary>
        /// <value>The date the partial credits and/or grades were awarded or earned.</value>
        [DataMember(Name = "awardDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly AwardDate { get; set; }

        /// <summary>
        /// The method the credits were earned.
        /// </summary>
        /// <value>The method the credits were earned.</value>
        [DataMember(Name = "methodCreditEarnedDescriptor", EmitDefaultValue = true)]
        public string MethodCreditEarnedDescriptor { get; set; }

        /// <summary>
        /// The number of credits a student earned for completing a given course.
        /// </summary>
        /// <value>The number of credits a student earned for completing a given course.</value>
        [DataMember(Name = "earnedCredits", IsRequired = true, EmitDefaultValue = true)]
        public double EarnedCredits { get; set; }

        /// <summary>
        /// The indicator of student performance as submitted by the instructor.
        /// </summary>
        /// <value>The indicator of student performance as submitted by the instructor.</value>
        [DataMember(Name = "letterGradeEarned", EmitDefaultValue = true)]
        public string LetterGradeEarned { get; set; }

        /// <summary>
        /// The indicator of student performance as submitted by the instructor.
        /// </summary>
        /// <value>The indicator of student performance as submitted by the instructor.</value>
        [DataMember(Name = "numericGradeEarned", EmitDefaultValue = true)]
        public string NumericGradeEarned { get; set; }

        /// <summary>
        /// Extensions to the CourseTranscriptPartialCourseTranscriptAwards entity.
        /// </summary>
        /// <value>Extensions to the CourseTranscriptPartialCourseTranscriptAwards entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCourseTranscriptPartialCourseTranscriptAwards {\n");
            sb.Append("  AwardDate: ").Append(AwardDate).Append("\n");
            sb.Append("  MethodCreditEarnedDescriptor: ").Append(MethodCreditEarnedDescriptor).Append("\n");
            sb.Append("  EarnedCredits: ").Append(EarnedCredits).Append("\n");
            sb.Append("  LetterGradeEarned: ").Append(LetterGradeEarned).Append("\n");
            sb.Append("  NumericGradeEarned: ").Append(NumericGradeEarned).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MethodCreditEarnedDescriptor (string) maxLength
            if (this.MethodCreditEarnedDescriptor != null && this.MethodCreditEarnedDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for MethodCreditEarnedDescriptor, length must be less than 306.", new [] { "MethodCreditEarnedDescriptor" });
            }

            // EarnedCredits (double) maximum
            if (this.EarnedCredits > (double)999999.999)
            {
                yield return new ValidationResult("Invalid value for EarnedCredits, must be a value less than or equal to 999999.999.", new [] { "EarnedCredits" });
            }

            // EarnedCredits (double) minimum
            if (this.EarnedCredits < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for EarnedCredits, must be a value greater than or equal to 0.0.", new [] { "EarnedCredits" });
            }

            // LetterGradeEarned (string) maxLength
            if (this.LetterGradeEarned != null && this.LetterGradeEarned.Length > 20)
            {
                yield return new ValidationResult("Invalid value for LetterGradeEarned, length must be less than 20.", new [] { "LetterGradeEarned" });
            }

            // NumericGradeEarned (string) maxLength
            if (this.NumericGradeEarned != null && this.NumericGradeEarned.Length > 20)
            {
                yield return new ValidationResult("Invalid value for NumericGradeEarned, length must be less than 20.", new [] { "NumericGradeEarned" });
            }

            yield break;
        }
    }

}
