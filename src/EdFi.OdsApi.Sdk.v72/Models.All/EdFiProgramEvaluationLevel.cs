/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiProgramEvaluationLevel
    /// </summary>
    [DataContract(Name = "edFi_programEvaluationLevel")]
    public partial class EdFiProgramEvaluationLevel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgramEvaluationLevel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiProgramEvaluationLevel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgramEvaluationLevel" /> class.
        /// </summary>
        /// <param name="ratingLevelDescriptor">The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable). (required).</param>
        /// <param name="maxNumericRating">The maximum numerical rating or score to achieve the evaluation rating level..</param>
        /// <param name="minNumericRating">The minimum numerical rating or score to achieve the evaluation rating level..</param>
        /// <param name="ext">Extensions to the ProgramEvaluationLevel entity..</param>
        public EdFiProgramEvaluationLevel(string ratingLevelDescriptor = default, double? maxNumericRating = default, double? minNumericRating = default, Object ext = default)
        {
            // to ensure "ratingLevelDescriptor" is required (not null)
            if (ratingLevelDescriptor == null)
            {
                throw new ArgumentNullException("ratingLevelDescriptor is a required property for EdFiProgramEvaluationLevel and cannot be null");
            }
            this.RatingLevelDescriptor = ratingLevelDescriptor;
            this.MaxNumericRating = maxNumericRating;
            this.MinNumericRating = minNumericRating;
            this.Ext = ext;
        }

        /// <summary>
        /// The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).
        /// </summary>
        /// <value>The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).</value>
        [DataMember(Name = "ratingLevelDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string RatingLevelDescriptor { get; set; }

        /// <summary>
        /// The maximum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        /// <value>The maximum numerical rating or score to achieve the evaluation rating level.</value>
        [DataMember(Name = "maxNumericRating", EmitDefaultValue = true)]
        public double? MaxNumericRating { get; set; }

        /// <summary>
        /// The minimum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        /// <value>The minimum numerical rating or score to achieve the evaluation rating level.</value>
        [DataMember(Name = "minNumericRating", EmitDefaultValue = true)]
        public double? MinNumericRating { get; set; }

        /// <summary>
        /// Extensions to the ProgramEvaluationLevel entity.
        /// </summary>
        /// <value>Extensions to the ProgramEvaluationLevel entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiProgramEvaluationLevel {\n");
            sb.Append("  RatingLevelDescriptor: ").Append(RatingLevelDescriptor).Append("\n");
            sb.Append("  MaxNumericRating: ").Append(MaxNumericRating).Append("\n");
            sb.Append("  MinNumericRating: ").Append(MinNumericRating).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RatingLevelDescriptor (string) maxLength
            if (this.RatingLevelDescriptor != null && this.RatingLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for RatingLevelDescriptor, length must be less than 306.", new [] { "RatingLevelDescriptor" });
            }

            // MaxNumericRating (double?) maximum
            if (this.MaxNumericRating > (double?)999.999)
            {
                yield return new ValidationResult("Invalid value for MaxNumericRating, must be a value less than or equal to 999.999.", new [] { "MaxNumericRating" });
            }

            // MaxNumericRating (double?) minimum
            if (this.MaxNumericRating < (double?)-999.999)
            {
                yield return new ValidationResult("Invalid value for MaxNumericRating, must be a value greater than or equal to -999.999.", new [] { "MaxNumericRating" });
            }

            // MinNumericRating (double?) maximum
            if (this.MinNumericRating > (double?)999.999)
            {
                yield return new ValidationResult("Invalid value for MinNumericRating, must be a value less than or equal to 999.999.", new [] { "MinNumericRating" });
            }

            // MinNumericRating (double?) minimum
            if (this.MinNumericRating < (double?)-999.999)
            {
                yield return new ValidationResult("Invalid value for MinNumericRating, must be a value greater than or equal to -999.999.", new [] { "MinNumericRating" });
            }

            yield break;
        }
    }

}
