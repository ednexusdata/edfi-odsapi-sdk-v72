/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiContactElectronicMail
    /// </summary>
    [DataContract(Name = "edFi_contactElectronicMail")]
    public partial class EdFiContactElectronicMail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiContactElectronicMail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiContactElectronicMail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiContactElectronicMail" /> class.
        /// </summary>
        /// <param name="electronicMailTypeDescriptor">The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.) (required).</param>
        /// <param name="electronicMailAddress">The electronic mail (e-mail) address listed for an individual or organization. (required).</param>
        /// <param name="doNotPublishIndicator">An indication that the electronic email address should not be published..</param>
        /// <param name="primaryEmailAddressIndicator">An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization..</param>
        /// <param name="ext">Extensions to the ContactElectronicMail entity..</param>
        public EdFiContactElectronicMail(string electronicMailTypeDescriptor = default, string electronicMailAddress = default, bool? doNotPublishIndicator = default, bool? primaryEmailAddressIndicator = default, Object ext = default)
        {
            // to ensure "electronicMailTypeDescriptor" is required (not null)
            if (electronicMailTypeDescriptor == null)
            {
                throw new ArgumentNullException("electronicMailTypeDescriptor is a required property for EdFiContactElectronicMail and cannot be null");
            }
            this.ElectronicMailTypeDescriptor = electronicMailTypeDescriptor;
            // to ensure "electronicMailAddress" is required (not null)
            if (electronicMailAddress == null)
            {
                throw new ArgumentNullException("electronicMailAddress is a required property for EdFiContactElectronicMail and cannot be null");
            }
            this.ElectronicMailAddress = electronicMailAddress;
            this.DoNotPublishIndicator = doNotPublishIndicator;
            this.PrimaryEmailAddressIndicator = primaryEmailAddressIndicator;
            this.Ext = ext;
        }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        /// <value>The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)</value>
        [DataMember(Name = "electronicMailTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string ElectronicMailTypeDescriptor { get; set; }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        /// <value>The electronic mail (e-mail) address listed for an individual or organization.</value>
        [DataMember(Name = "electronicMailAddress", IsRequired = true, EmitDefaultValue = true)]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        /// <value>An indication that the electronic email address should not be published.</value>
        [DataMember(Name = "doNotPublishIndicator", EmitDefaultValue = true)]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        /// <value>An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.</value>
        [DataMember(Name = "primaryEmailAddressIndicator", EmitDefaultValue = true)]
        public bool? PrimaryEmailAddressIndicator { get; set; }

        /// <summary>
        /// Extensions to the ContactElectronicMail entity.
        /// </summary>
        /// <value>Extensions to the ContactElectronicMail entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiContactElectronicMail {\n");
            sb.Append("  ElectronicMailTypeDescriptor: ").Append(ElectronicMailTypeDescriptor).Append("\n");
            sb.Append("  ElectronicMailAddress: ").Append(ElectronicMailAddress).Append("\n");
            sb.Append("  DoNotPublishIndicator: ").Append(DoNotPublishIndicator).Append("\n");
            sb.Append("  PrimaryEmailAddressIndicator: ").Append(PrimaryEmailAddressIndicator).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ElectronicMailTypeDescriptor (string) maxLength
            if (this.ElectronicMailTypeDescriptor != null && this.ElectronicMailTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailTypeDescriptor, length must be less than 306.", new [] { "ElectronicMailTypeDescriptor" });
            }

            // ElectronicMailAddress (string) maxLength
            if (this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length > 128)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailAddress, length must be less than 128.", new [] { "ElectronicMailAddress" });
            }

            // ElectronicMailAddress (string) minLength
            if (this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length < 7)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailAddress, length must be greater than 7.", new [] { "ElectronicMailAddress" });
            }

            yield break;
        }
    }

}
