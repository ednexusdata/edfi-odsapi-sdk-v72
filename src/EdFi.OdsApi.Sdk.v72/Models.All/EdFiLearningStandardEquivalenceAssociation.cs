/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiLearningStandardEquivalenceAssociation
    /// </summary>
    [DataContract(Name = "edFi_learningStandardEquivalenceAssociation")]
    public partial class EdFiLearningStandardEquivalenceAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningStandardEquivalenceAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiLearningStandardEquivalenceAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningStandardEquivalenceAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="varNamespace">The namespace of the organization that has created and owns the association. (required).</param>
        /// <param name="sourceLearningStandardReference">sourceLearningStandardReference (required).</param>
        /// <param name="targetLearningStandardReference">targetLearningStandardReference (required).</param>
        /// <param name="effectiveDate">The date that the association is considered to be applicable or effective..</param>
        /// <param name="learningStandardEquivalenceStrengthDescription">Captures supplemental information on the relationship. Recommended for use only when the match is partial..</param>
        /// <param name="learningStandardEquivalenceStrengthDescriptor">A measure that indicates the strength or quality of the equivalence relationship..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the LearningStandardEquivalenceAssociation entity..</param>
        public EdFiLearningStandardEquivalenceAssociation(string id = default, string varNamespace = default, EdFiLearningStandardReference sourceLearningStandardReference = default, EdFiLearningStandardReference targetLearningStandardReference = default, DateOnly? effectiveDate = default, string learningStandardEquivalenceStrengthDescription = default, string learningStandardEquivalenceStrengthDescriptor = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "varNamespace" is required (not null)
            if (varNamespace == null)
            {
                throw new ArgumentNullException("varNamespace is a required property for EdFiLearningStandardEquivalenceAssociation and cannot be null");
            }
            this.Namespace = varNamespace;
            // to ensure "sourceLearningStandardReference" is required (not null)
            if (sourceLearningStandardReference == null)
            {
                throw new ArgumentNullException("sourceLearningStandardReference is a required property for EdFiLearningStandardEquivalenceAssociation and cannot be null");
            }
            this.SourceLearningStandardReference = sourceLearningStandardReference;
            // to ensure "targetLearningStandardReference" is required (not null)
            if (targetLearningStandardReference == null)
            {
                throw new ArgumentNullException("targetLearningStandardReference is a required property for EdFiLearningStandardEquivalenceAssociation and cannot be null");
            }
            this.TargetLearningStandardReference = targetLearningStandardReference;
            this.Id = id;
            this.EffectiveDate = effectiveDate;
            this.LearningStandardEquivalenceStrengthDescription = learningStandardEquivalenceStrengthDescription;
            this.LearningStandardEquivalenceStrengthDescriptor = learningStandardEquivalenceStrengthDescriptor;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The namespace of the organization that has created and owns the association.
        /// </summary>
        /// <value>The namespace of the organization that has created and owns the association.</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// Gets or Sets SourceLearningStandardReference
        /// </summary>
        [DataMember(Name = "sourceLearningStandardReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiLearningStandardReference SourceLearningStandardReference { get; set; }

        /// <summary>
        /// Gets or Sets TargetLearningStandardReference
        /// </summary>
        [DataMember(Name = "targetLearningStandardReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiLearningStandardReference TargetLearningStandardReference { get; set; }

        /// <summary>
        /// The date that the association is considered to be applicable or effective.
        /// </summary>
        /// <value>The date that the association is considered to be applicable or effective.</value>
        [DataMember(Name = "effectiveDate", EmitDefaultValue = true)]
        public DateOnly? EffectiveDate { get; set; }

        /// <summary>
        /// Captures supplemental information on the relationship. Recommended for use only when the match is partial.
        /// </summary>
        /// <value>Captures supplemental information on the relationship. Recommended for use only when the match is partial.</value>
        [DataMember(Name = "learningStandardEquivalenceStrengthDescription", EmitDefaultValue = true)]
        public string LearningStandardEquivalenceStrengthDescription { get; set; }

        /// <summary>
        /// A measure that indicates the strength or quality of the equivalence relationship.
        /// </summary>
        /// <value>A measure that indicates the strength or quality of the equivalence relationship.</value>
        [DataMember(Name = "learningStandardEquivalenceStrengthDescriptor", EmitDefaultValue = true)]
        public string LearningStandardEquivalenceStrengthDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the LearningStandardEquivalenceAssociation entity.
        /// </summary>
        /// <value>Extensions to the LearningStandardEquivalenceAssociation entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLearningStandardEquivalenceAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  SourceLearningStandardReference: ").Append(SourceLearningStandardReference).Append("\n");
            sb.Append("  TargetLearningStandardReference: ").Append(TargetLearningStandardReference).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  LearningStandardEquivalenceStrengthDescription: ").Append(LearningStandardEquivalenceStrengthDescription).Append("\n");
            sb.Append("  LearningStandardEquivalenceStrengthDescriptor: ").Append(LearningStandardEquivalenceStrengthDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // LearningStandardEquivalenceStrengthDescription (string) maxLength
            if (this.LearningStandardEquivalenceStrengthDescription != null && this.LearningStandardEquivalenceStrengthDescription.Length > 255)
            {
                yield return new ValidationResult("Invalid value for LearningStandardEquivalenceStrengthDescription, length must be less than 255.", new [] { "LearningStandardEquivalenceStrengthDescription" });
            }

            // LearningStandardEquivalenceStrengthDescriptor (string) maxLength
            if (this.LearningStandardEquivalenceStrengthDescriptor != null && this.LearningStandardEquivalenceStrengthDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LearningStandardEquivalenceStrengthDescriptor, length must be less than 306.", new [] { "LearningStandardEquivalenceStrengthDescriptor" });
            }

            yield break;
        }
    }

}
