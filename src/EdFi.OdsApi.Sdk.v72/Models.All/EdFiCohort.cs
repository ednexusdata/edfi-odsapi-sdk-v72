/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiCohort
    /// </summary>
    [DataContract(Name = "edFi_cohort")]
    public partial class EdFiCohort : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCohort" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiCohort() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCohort" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="cohortIdentifier">The name or ID for the cohort. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="academicSubjectDescriptor">The academic subject associated with an academic intervention..</param>
        /// <param name="cohortDescription">The description of the cohort and its purpose..</param>
        /// <param name="cohortScopeDescriptor">The scope of cohort (e.g., school, district, classroom)..</param>
        /// <param name="cohortTypeDescriptor">The type of cohort (e.g., academic intervention, classroom breakout). (required).</param>
        /// <param name="programs">An unordered collection of cohortPrograms. The (optional) program associated with this cohort (e.g., special education)..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the Cohort entity..</param>
        public EdFiCohort(string id = default, string cohortIdentifier = default, EdFiEducationOrganizationReference educationOrganizationReference = default, string academicSubjectDescriptor = default, string cohortDescription = default, string cohortScopeDescriptor = default, string cohortTypeDescriptor = default, List<EdFiCohortProgram> programs = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "cohortIdentifier" is required (not null)
            if (cohortIdentifier == null)
            {
                throw new ArgumentNullException("cohortIdentifier is a required property for EdFiCohort and cannot be null");
            }
            this.CohortIdentifier = cohortIdentifier;
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new ArgumentNullException("educationOrganizationReference is a required property for EdFiCohort and cannot be null");
            }
            this.EducationOrganizationReference = educationOrganizationReference;
            // to ensure "cohortTypeDescriptor" is required (not null)
            if (cohortTypeDescriptor == null)
            {
                throw new ArgumentNullException("cohortTypeDescriptor is a required property for EdFiCohort and cannot be null");
            }
            this.CohortTypeDescriptor = cohortTypeDescriptor;
            this.Id = id;
            this.AcademicSubjectDescriptor = academicSubjectDescriptor;
            this.CohortDescription = cohortDescription;
            this.CohortScopeDescriptor = cohortScopeDescriptor;
            this.Programs = programs;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name or ID for the cohort.
        /// </summary>
        /// <value>The name or ID for the cohort.</value>
        [DataMember(Name = "cohortIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string CohortIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// The academic subject associated with an academic intervention.
        /// </summary>
        /// <value>The academic subject associated with an academic intervention.</value>
        [DataMember(Name = "academicSubjectDescriptor", EmitDefaultValue = true)]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// The description of the cohort and its purpose.
        /// </summary>
        /// <value>The description of the cohort and its purpose.</value>
        [DataMember(Name = "cohortDescription", EmitDefaultValue = true)]
        public string CohortDescription { get; set; }

        /// <summary>
        /// The scope of cohort (e.g., school, district, classroom).
        /// </summary>
        /// <value>The scope of cohort (e.g., school, district, classroom).</value>
        [DataMember(Name = "cohortScopeDescriptor", EmitDefaultValue = true)]
        public string CohortScopeDescriptor { get; set; }

        /// <summary>
        /// The type of cohort (e.g., academic intervention, classroom breakout).
        /// </summary>
        /// <value>The type of cohort (e.g., academic intervention, classroom breakout).</value>
        [DataMember(Name = "cohortTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string CohortTypeDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of cohortPrograms. The (optional) program associated with this cohort (e.g., special education).
        /// </summary>
        /// <value>An unordered collection of cohortPrograms. The (optional) program associated with this cohort (e.g., special education).</value>
        [DataMember(Name = "programs", EmitDefaultValue = false)]
        public List<EdFiCohortProgram> Programs { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the Cohort entity.
        /// </summary>
        /// <value>Extensions to the Cohort entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCohort {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CohortIdentifier: ").Append(CohortIdentifier).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  AcademicSubjectDescriptor: ").Append(AcademicSubjectDescriptor).Append("\n");
            sb.Append("  CohortDescription: ").Append(CohortDescription).Append("\n");
            sb.Append("  CohortScopeDescriptor: ").Append(CohortScopeDescriptor).Append("\n");
            sb.Append("  CohortTypeDescriptor: ").Append(CohortTypeDescriptor).Append("\n");
            sb.Append("  Programs: ").Append(Programs).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CohortIdentifier (string) maxLength
            if (this.CohortIdentifier != null && this.CohortIdentifier.Length > 36)
            {
                yield return new ValidationResult("Invalid value for CohortIdentifier, length must be less than 36.", new [] { "CohortIdentifier" });
            }

            // AcademicSubjectDescriptor (string) maxLength
            if (this.AcademicSubjectDescriptor != null && this.AcademicSubjectDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AcademicSubjectDescriptor, length must be less than 306.", new [] { "AcademicSubjectDescriptor" });
            }

            // CohortDescription (string) maxLength
            if (this.CohortDescription != null && this.CohortDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for CohortDescription, length must be less than 1024.", new [] { "CohortDescription" });
            }

            // CohortScopeDescriptor (string) maxLength
            if (this.CohortScopeDescriptor != null && this.CohortScopeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CohortScopeDescriptor, length must be less than 306.", new [] { "CohortScopeDescriptor" });
            }

            // CohortTypeDescriptor (string) maxLength
            if (this.CohortTypeDescriptor != null && this.CohortTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CohortTypeDescriptor, length must be less than 306.", new [] { "CohortTypeDescriptor" });
            }

            yield break;
        }
    }

}
