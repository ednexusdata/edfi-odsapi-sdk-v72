/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiSurveyResponse
    /// </summary>
    [DataContract(Name = "edFi_surveyResponse")]
    public partial class EdFiSurveyResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurveyResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="surveyResponseIdentifier">The identifier of the survey typically from the survey application. (required).</param>
        /// <param name="contactReference">contactReference.</param>
        /// <param name="staffReference">staffReference.</param>
        /// <param name="studentReference">studentReference.</param>
        /// <param name="surveyReference">surveyReference (required).</param>
        /// <param name="electronicMailAddress">Email address of the respondent..</param>
        /// <param name="fullName">Full name of the respondent..</param>
        /// <param name="location">Location of the respondent, often a city, district, or school..</param>
        /// <param name="responseDate">Date of the survey response. (required).</param>
        /// <param name="responseTime">The amount of time (in seconds) it took for the respondent to complete the survey..</param>
        /// <param name="surveyLevels">An unordered collection of surveyResponseSurveyLevels. Provides information about the respondents of a survey and how they can be grouped together..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the SurveyResponse entity..</param>
        public EdFiSurveyResponse(string id = default, string surveyResponseIdentifier = default, EdFiContactReference contactReference = default, EdFiStaffReference staffReference = default, EdFiStudentReference studentReference = default, EdFiSurveyReference surveyReference = default, string electronicMailAddress = default, string fullName = default, string location = default, DateOnly responseDate = default, int? responseTime = default, List<EdFiSurveyResponseSurveyLevel> surveyLevels = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "surveyResponseIdentifier" is required (not null)
            if (surveyResponseIdentifier == null)
            {
                throw new ArgumentNullException("surveyResponseIdentifier is a required property for EdFiSurveyResponse and cannot be null");
            }
            this.SurveyResponseIdentifier = surveyResponseIdentifier;
            // to ensure "surveyReference" is required (not null)
            if (surveyReference == null)
            {
                throw new ArgumentNullException("surveyReference is a required property for EdFiSurveyResponse and cannot be null");
            }
            this.SurveyReference = surveyReference;
            this.ResponseDate = responseDate;
            this.Id = id;
            this.ContactReference = contactReference;
            this.StaffReference = staffReference;
            this.StudentReference = studentReference;
            this.ElectronicMailAddress = electronicMailAddress;
            this.FullName = fullName;
            this.Location = location;
            this.ResponseTime = responseTime;
            this.SurveyLevels = surveyLevels;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The identifier of the survey typically from the survey application.
        /// </summary>
        /// <value>The identifier of the survey typically from the survey application.</value>
        [DataMember(Name = "surveyResponseIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string SurveyResponseIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ContactReference
        /// </summary>
        [DataMember(Name = "contactReference", EmitDefaultValue = false)]
        public EdFiContactReference ContactReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name = "staffReference", EmitDefaultValue = false)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name = "studentReference", EmitDefaultValue = false)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Gets or Sets SurveyReference
        /// </summary>
        [DataMember(Name = "surveyReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSurveyReference SurveyReference { get; set; }

        /// <summary>
        /// Email address of the respondent.
        /// </summary>
        /// <value>Email address of the respondent.</value>
        [DataMember(Name = "electronicMailAddress", EmitDefaultValue = true)]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// Full name of the respondent.
        /// </summary>
        /// <value>Full name of the respondent.</value>
        [DataMember(Name = "fullName", EmitDefaultValue = true)]
        public string FullName { get; set; }

        /// <summary>
        /// Location of the respondent, often a city, district, or school.
        /// </summary>
        /// <value>Location of the respondent, often a city, district, or school.</value>
        [DataMember(Name = "location", EmitDefaultValue = true)]
        public string Location { get; set; }

        /// <summary>
        /// Date of the survey response.
        /// </summary>
        /// <value>Date of the survey response.</value>
        [DataMember(Name = "responseDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly ResponseDate { get; set; }

        /// <summary>
        /// The amount of time (in seconds) it took for the respondent to complete the survey.
        /// </summary>
        /// <value>The amount of time (in seconds) it took for the respondent to complete the survey.</value>
        [DataMember(Name = "responseTime", EmitDefaultValue = true)]
        public int? ResponseTime { get; set; }

        /// <summary>
        /// An unordered collection of surveyResponseSurveyLevels. Provides information about the respondents of a survey and how they can be grouped together.
        /// </summary>
        /// <value>An unordered collection of surveyResponseSurveyLevels. Provides information about the respondents of a survey and how they can be grouped together.</value>
        [DataMember(Name = "surveyLevels", EmitDefaultValue = false)]
        public List<EdFiSurveyResponseSurveyLevel> SurveyLevels { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the SurveyResponse entity.
        /// </summary>
        /// <value>Extensions to the SurveyResponse entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveyResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SurveyResponseIdentifier: ").Append(SurveyResponseIdentifier).Append("\n");
            sb.Append("  ContactReference: ").Append(ContactReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  SurveyReference: ").Append(SurveyReference).Append("\n");
            sb.Append("  ElectronicMailAddress: ").Append(ElectronicMailAddress).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  ResponseDate: ").Append(ResponseDate).Append("\n");
            sb.Append("  ResponseTime: ").Append(ResponseTime).Append("\n");
            sb.Append("  SurveyLevels: ").Append(SurveyLevels).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SurveyResponseIdentifier (string) maxLength
            if (this.SurveyResponseIdentifier != null && this.SurveyResponseIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SurveyResponseIdentifier, length must be less than 60.", new [] { "SurveyResponseIdentifier" });
            }

            // ElectronicMailAddress (string) maxLength
            if (this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length > 128)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailAddress, length must be less than 128.", new [] { "ElectronicMailAddress" });
            }

            // ElectronicMailAddress (string) minLength
            if (this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length < 7)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailAddress, length must be greater than 7.", new [] { "ElectronicMailAddress" });
            }

            // FullName (string) maxLength
            if (this.FullName != null && this.FullName.Length > 80)
            {
                yield return new ValidationResult("Invalid value for FullName, length must be less than 80.", new [] { "FullName" });
            }

            // Location (string) maxLength
            if (this.Location != null && this.Location.Length > 75)
            {
                yield return new ValidationResult("Invalid value for Location, length must be less than 75.", new [] { "Location" });
            }

            yield break;
        }
    }

}
