/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiBellSchedule
    /// </summary>
    [DataContract(Name = "edFi_bellSchedule")]
    public partial class EdFiBellSchedule : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiBellSchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiBellSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiBellSchedule" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="bellScheduleName">Name or title of the bell schedule. (required).</param>
        /// <param name="classPeriods">An unordered collection of bellScheduleClassPeriods. The class periods that compose this bell schedule. (required).</param>
        /// <param name="schoolReference">schoolReference (required).</param>
        /// <param name="alternateDayName">An alternate name for the day (e.g., Red, Blue)..</param>
        /// <param name="dates">An unordered collection of bellScheduleDates. The dates for which the bell schedule applies..</param>
        /// <param name="endTime">An indication of the time of day the bell schedule ends..</param>
        /// <param name="gradeLevels">An unordered collection of bellScheduleGradeLevels. The grade levels the particular bell schedule applies to..</param>
        /// <param name="startTime">An indication of the time of day the bell schedule begins..</param>
        /// <param name="totalInstructionalTime">The total instructional time in minutes per day for the bell schedule..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the BellSchedule entity..</param>
        public EdFiBellSchedule(string id = default, string bellScheduleName = default, List<EdFiBellScheduleClassPeriod> classPeriods = default, EdFiSchoolReference schoolReference = default, string alternateDayName = default, List<EdFiBellScheduleDate> dates = default, string endTime = default, List<EdFiBellScheduleGradeLevel> gradeLevels = default, string startTime = default, int? totalInstructionalTime = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "bellScheduleName" is required (not null)
            if (bellScheduleName == null)
            {
                throw new ArgumentNullException("bellScheduleName is a required property for EdFiBellSchedule and cannot be null");
            }
            this.BellScheduleName = bellScheduleName;
            // to ensure "classPeriods" is required (not null)
            if (classPeriods == null)
            {
                throw new ArgumentNullException("classPeriods is a required property for EdFiBellSchedule and cannot be null");
            }
            this.ClassPeriods = classPeriods;
            // to ensure "schoolReference" is required (not null)
            if (schoolReference == null)
            {
                throw new ArgumentNullException("schoolReference is a required property for EdFiBellSchedule and cannot be null");
            }
            this.SchoolReference = schoolReference;
            this.Id = id;
            this.AlternateDayName = alternateDayName;
            this.Dates = dates;
            this.EndTime = endTime;
            this.GradeLevels = gradeLevels;
            this.StartTime = startTime;
            this.TotalInstructionalTime = totalInstructionalTime;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Name or title of the bell schedule.
        /// </summary>
        /// <value>Name or title of the bell schedule.</value>
        [DataMember(Name = "bellScheduleName", IsRequired = true, EmitDefaultValue = true)]
        public string BellScheduleName { get; set; }

        /// <summary>
        /// An unordered collection of bellScheduleClassPeriods. The class periods that compose this bell schedule.
        /// </summary>
        /// <value>An unordered collection of bellScheduleClassPeriods. The class periods that compose this bell schedule.</value>
        [DataMember(Name = "classPeriods", IsRequired = true, EmitDefaultValue = true)]
        public List<EdFiBellScheduleClassPeriod> ClassPeriods { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [DataMember(Name = "schoolReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// An alternate name for the day (e.g., Red, Blue).
        /// </summary>
        /// <value>An alternate name for the day (e.g., Red, Blue).</value>
        [DataMember(Name = "alternateDayName", EmitDefaultValue = true)]
        public string AlternateDayName { get; set; }

        /// <summary>
        /// An unordered collection of bellScheduleDates. The dates for which the bell schedule applies.
        /// </summary>
        /// <value>An unordered collection of bellScheduleDates. The dates for which the bell schedule applies.</value>
        [DataMember(Name = "dates", EmitDefaultValue = false)]
        public List<EdFiBellScheduleDate> Dates { get; set; }

        /// <summary>
        /// An indication of the time of day the bell schedule ends.
        /// </summary>
        /// <value>An indication of the time of day the bell schedule ends.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = true)]
        public string EndTime { get; set; }

        /// <summary>
        /// An unordered collection of bellScheduleGradeLevels. The grade levels the particular bell schedule applies to.
        /// </summary>
        /// <value>An unordered collection of bellScheduleGradeLevels. The grade levels the particular bell schedule applies to.</value>
        [DataMember(Name = "gradeLevels", EmitDefaultValue = false)]
        public List<EdFiBellScheduleGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// An indication of the time of day the bell schedule begins.
        /// </summary>
        /// <value>An indication of the time of day the bell schedule begins.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = true)]
        public string StartTime { get; set; }

        /// <summary>
        /// The total instructional time in minutes per day for the bell schedule.
        /// </summary>
        /// <value>The total instructional time in minutes per day for the bell schedule.</value>
        [DataMember(Name = "totalInstructionalTime", EmitDefaultValue = true)]
        public int? TotalInstructionalTime { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the BellSchedule entity.
        /// </summary>
        /// <value>Extensions to the BellSchedule entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiBellSchedule {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BellScheduleName: ").Append(BellScheduleName).Append("\n");
            sb.Append("  ClassPeriods: ").Append(ClassPeriods).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  AlternateDayName: ").Append(AlternateDayName).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  TotalInstructionalTime: ").Append(TotalInstructionalTime).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BellScheduleName (string) maxLength
            if (this.BellScheduleName != null && this.BellScheduleName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for BellScheduleName, length must be less than 60.", new [] { "BellScheduleName" });
            }

            // AlternateDayName (string) maxLength
            if (this.AlternateDayName != null && this.AlternateDayName.Length > 20)
            {
                yield return new ValidationResult("Invalid value for AlternateDayName, length must be less than 20.", new [] { "AlternateDayName" });
            }

            yield break;
        }
    }

}
