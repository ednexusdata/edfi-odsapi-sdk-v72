/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiLearningStandardContentStandard
    /// </summary>
    [DataContract(Name = "edFi_learningStandardContentStandard")]
    public partial class EdFiLearningStandardContentStandard : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningStandardContentStandard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiLearningStandardContentStandard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningStandardContentStandard" /> class.
        /// </summary>
        /// <param name="publicationStatusDescriptor">The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown)..</param>
        /// <param name="beginDate">The beginning of the period during which this learning standard document is intended for use..</param>
        /// <param name="endDate">The end of the period during which this learning standard document is intended for use..</param>
        /// <param name="publicationDate">The date on which this content was first published..</param>
        /// <param name="publicationYear">The year at which this content was first published..</param>
        /// <param name="title">The name of the content standard, for example Common Core. (required).</param>
        /// <param name="uri">An unambiguous reference to the standards using a network-resolvable URI..</param>
        /// <param name="varVersion">The version identifier for the content..</param>
        /// <param name="mandatingEducationOrganizationReference">mandatingEducationOrganizationReference.</param>
        /// <param name="authors">An unordered collection of learningStandardContentStandardAuthors. The person or organization chiefly responsible for the intellectual content of the standard..</param>
        /// <param name="ext">Extensions to the LearningStandardContentStandard entity..</param>
        public EdFiLearningStandardContentStandard(string publicationStatusDescriptor = default, DateOnly? beginDate = default, DateOnly? endDate = default, DateOnly? publicationDate = default, int? publicationYear = default, string title = default, string uri = default, string varVersion = default, EdFiEducationOrganizationReference mandatingEducationOrganizationReference = default, List<EdFiLearningStandardContentStandardAuthor> authors = default, Object ext = default)
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for EdFiLearningStandardContentStandard and cannot be null");
            }
            this.Title = title;
            this.PublicationStatusDescriptor = publicationStatusDescriptor;
            this.BeginDate = beginDate;
            this.EndDate = endDate;
            this.PublicationDate = publicationDate;
            this.PublicationYear = publicationYear;
            this.Uri = uri;
            this.VarVersion = varVersion;
            this.MandatingEducationOrganizationReference = mandatingEducationOrganizationReference;
            this.Authors = authors;
            this.Ext = ext;
        }

        /// <summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        /// </summary>
        /// <value>The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).</value>
        [DataMember(Name = "publicationStatusDescriptor", EmitDefaultValue = true)]
        public string PublicationStatusDescriptor { get; set; }

        /// <summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        /// </summary>
        /// <value>The beginning of the period during which this learning standard document is intended for use.</value>
        [DataMember(Name = "beginDate", EmitDefaultValue = true)]
        public DateOnly? BeginDate { get; set; }

        /// <summary>
        /// The end of the period during which this learning standard document is intended for use.
        /// </summary>
        /// <value>The end of the period during which this learning standard document is intended for use.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateOnly? EndDate { get; set; }

        /// <summary>
        /// The date on which this content was first published.
        /// </summary>
        /// <value>The date on which this content was first published.</value>
        [DataMember(Name = "publicationDate", EmitDefaultValue = true)]
        public DateOnly? PublicationDate { get; set; }

        /// <summary>
        /// The year at which this content was first published.
        /// </summary>
        /// <value>The year at which this content was first published.</value>
        [DataMember(Name = "publicationYear", EmitDefaultValue = true)]
        public int? PublicationYear { get; set; }

        /// <summary>
        /// The name of the content standard, for example Common Core.
        /// </summary>
        /// <value>The name of the content standard, for example Common Core.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        /// </summary>
        /// <value>An unambiguous reference to the standards using a network-resolvable URI.</value>
        [DataMember(Name = "uri", EmitDefaultValue = true)]
        public string Uri { get; set; }

        /// <summary>
        /// The version identifier for the content.
        /// </summary>
        /// <value>The version identifier for the content.</value>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets MandatingEducationOrganizationReference
        /// </summary>
        [DataMember(Name = "mandatingEducationOrganizationReference", EmitDefaultValue = false)]
        public EdFiEducationOrganizationReference MandatingEducationOrganizationReference { get; set; }

        /// <summary>
        /// An unordered collection of learningStandardContentStandardAuthors. The person or organization chiefly responsible for the intellectual content of the standard.
        /// </summary>
        /// <value>An unordered collection of learningStandardContentStandardAuthors. The person or organization chiefly responsible for the intellectual content of the standard.</value>
        [DataMember(Name = "authors", EmitDefaultValue = false)]
        public List<EdFiLearningStandardContentStandardAuthor> Authors { get; set; }

        /// <summary>
        /// Extensions to the LearningStandardContentStandard entity.
        /// </summary>
        /// <value>Extensions to the LearningStandardContentStandard entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLearningStandardContentStandard {\n");
            sb.Append("  PublicationStatusDescriptor: ").Append(PublicationStatusDescriptor).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  PublicationDate: ").Append(PublicationDate).Append("\n");
            sb.Append("  PublicationYear: ").Append(PublicationYear).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  MandatingEducationOrganizationReference: ").Append(MandatingEducationOrganizationReference).Append("\n");
            sb.Append("  Authors: ").Append(Authors).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PublicationStatusDescriptor (string) maxLength
            if (this.PublicationStatusDescriptor != null && this.PublicationStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PublicationStatusDescriptor, length must be less than 306.", new [] { "PublicationStatusDescriptor" });
            }

            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 75)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 75.", new [] { "Title" });
            }

            // Uri (string) maxLength
            if (this.Uri != null && this.Uri.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Uri, length must be less than 255.", new [] { "Uri" });
            }

            // Uri (string) minLength
            if (this.Uri != null && this.Uri.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Uri, length must be greater than 5.", new [] { "Uri" });
            }

            // VarVersion (string) maxLength
            if (this.VarVersion != null && this.VarVersion.Length > 50)
            {
                yield return new ValidationResult("Invalid value for VarVersion, length must be less than 50.", new [] { "VarVersion" });
            }

            yield break;
        }
    }

}
