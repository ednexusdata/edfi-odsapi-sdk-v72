/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStaffInternationalAddress
    /// </summary>
    [DataContract(Name = "edFi_staffInternationalAddress")]
    public partial class EdFiStaffInternationalAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffInternationalAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaffInternationalAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffInternationalAddress" /> class.
        /// </summary>
        /// <param name="addressTypeDescriptor">The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.) (required).</param>
        /// <param name="countryDescriptor">The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (required).</param>
        /// <param name="addressLine1">The first line of the address. (required).</param>
        /// <param name="addressLine2">The second line of the address..</param>
        /// <param name="addressLine3">The third line of the address..</param>
        /// <param name="addressLine4">The fourth line of the address..</param>
        /// <param name="beginDate">The first date the address is valid. For physical addresses, the date the individual moved to that address..</param>
        /// <param name="endDate">The last date the address is valid. For physical addresses, the date the individual moved from that address..</param>
        /// <param name="latitude">The geographic latitude of the physical address..</param>
        /// <param name="longitude">The geographic longitude of the physical address..</param>
        /// <param name="ext">Extensions to the StaffInternationalAddress entity..</param>
        public EdFiStaffInternationalAddress(string addressTypeDescriptor = default, string countryDescriptor = default, string addressLine1 = default, string addressLine2 = default, string addressLine3 = default, string addressLine4 = default, DateOnly? beginDate = default, DateOnly? endDate = default, string latitude = default, string longitude = default, Object ext = default)
        {
            // to ensure "addressTypeDescriptor" is required (not null)
            if (addressTypeDescriptor == null)
            {
                throw new ArgumentNullException("addressTypeDescriptor is a required property for EdFiStaffInternationalAddress and cannot be null");
            }
            this.AddressTypeDescriptor = addressTypeDescriptor;
            // to ensure "countryDescriptor" is required (not null)
            if (countryDescriptor == null)
            {
                throw new ArgumentNullException("countryDescriptor is a required property for EdFiStaffInternationalAddress and cannot be null");
            }
            this.CountryDescriptor = countryDescriptor;
            // to ensure "addressLine1" is required (not null)
            if (addressLine1 == null)
            {
                throw new ArgumentNullException("addressLine1 is a required property for EdFiStaffInternationalAddress and cannot be null");
            }
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.AddressLine4 = addressLine4;
            this.BeginDate = beginDate;
            this.EndDate = endDate;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Ext = ext;
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        /// <value>The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)</value>
        [DataMember(Name = "addressTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        /// <value>The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.</value>
        [DataMember(Name = "countryDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The first line of the address.
        /// </summary>
        /// <value>The first line of the address.</value>
        [DataMember(Name = "addressLine1", IsRequired = true, EmitDefaultValue = true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        /// <value>The second line of the address.</value>
        [DataMember(Name = "addressLine2", EmitDefaultValue = true)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        /// <value>The third line of the address.</value>
        [DataMember(Name = "addressLine3", EmitDefaultValue = true)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        /// <value>The fourth line of the address.</value>
        [DataMember(Name = "addressLine4", EmitDefaultValue = true)]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the individual moved to that address.
        /// </summary>
        /// <value>The first date the address is valid. For physical addresses, the date the individual moved to that address.</value>
        [DataMember(Name = "beginDate", EmitDefaultValue = true)]
        public DateOnly? BeginDate { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, the date the individual moved from that address.
        /// </summary>
        /// <value>The last date the address is valid. For physical addresses, the date the individual moved from that address.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateOnly? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        /// <value>The geographic latitude of the physical address.</value>
        [DataMember(Name = "latitude", EmitDefaultValue = true)]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        /// <value>The geographic longitude of the physical address.</value>
        [DataMember(Name = "longitude", EmitDefaultValue = true)]
        public string Longitude { get; set; }

        /// <summary>
        /// Extensions to the StaffInternationalAddress entity.
        /// </summary>
        /// <value>Extensions to the StaffInternationalAddress entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffInternationalAddress {\n");
            sb.Append("  AddressTypeDescriptor: ").Append(AddressTypeDescriptor).Append("\n");
            sb.Append("  CountryDescriptor: ").Append(CountryDescriptor).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  AddressLine4: ").Append(AddressLine4).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AddressTypeDescriptor (string) maxLength
            if (this.AddressTypeDescriptor != null && this.AddressTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AddressTypeDescriptor, length must be less than 306.", new [] { "AddressTypeDescriptor" });
            }

            // CountryDescriptor (string) maxLength
            if (this.CountryDescriptor != null && this.CountryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CountryDescriptor, length must be less than 306.", new [] { "CountryDescriptor" });
            }

            // AddressLine1 (string) maxLength
            if (this.AddressLine1 != null && this.AddressLine1.Length > 150)
            {
                yield return new ValidationResult("Invalid value for AddressLine1, length must be less than 150.", new [] { "AddressLine1" });
            }

            // AddressLine2 (string) maxLength
            if (this.AddressLine2 != null && this.AddressLine2.Length > 150)
            {
                yield return new ValidationResult("Invalid value for AddressLine2, length must be less than 150.", new [] { "AddressLine2" });
            }

            // AddressLine3 (string) maxLength
            if (this.AddressLine3 != null && this.AddressLine3.Length > 150)
            {
                yield return new ValidationResult("Invalid value for AddressLine3, length must be less than 150.", new [] { "AddressLine3" });
            }

            // AddressLine4 (string) maxLength
            if (this.AddressLine4 != null && this.AddressLine4.Length > 150)
            {
                yield return new ValidationResult("Invalid value for AddressLine4, length must be less than 150.", new [] { "AddressLine4" });
            }

            // Latitude (string) maxLength
            if (this.Latitude != null && this.Latitude.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Latitude, length must be less than 20.", new [] { "Latitude" });
            }

            // Longitude (string) maxLength
            if (this.Longitude != null && this.Longitude.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Longitude, length must be less than 20.", new [] { "Longitude" });
            }

            yield break;
        }
    }

}
