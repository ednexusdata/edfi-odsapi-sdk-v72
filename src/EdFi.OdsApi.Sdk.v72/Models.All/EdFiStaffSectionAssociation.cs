/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStaffSectionAssociation
    /// </summary>
    [DataContract(Name = "edFi_staffSectionAssociation")]
    public partial class EdFiStaffSectionAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffSectionAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaffSectionAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffSectionAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="beginDate">Month, day, and year of a teacher&#39;s assignment to the section. (required).</param>
        /// <param name="sectionReference">sectionReference (required).</param>
        /// <param name="staffReference">staffReference (required).</param>
        /// <param name="classroomPositionDescriptor">The type of position the staff member holds in the specific class/section. (required).</param>
        /// <param name="endDate">Month, day, and year of the last day of a staff member&#39;s assignment to the section..</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught..</param>
        /// <param name="percentageContribution">Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage..</param>
        /// <param name="teacherStudentDataLinkExclusion">Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the StaffSectionAssociation entity..</param>
        public EdFiStaffSectionAssociation(string id = default, DateOnly beginDate = default, EdFiSectionReference sectionReference = default, EdFiStaffReference staffReference = default, string classroomPositionDescriptor = default, DateOnly? endDate = default, bool? highlyQualifiedTeacher = default, double? percentageContribution = default, bool? teacherStudentDataLinkExclusion = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            this.BeginDate = beginDate;
            // to ensure "sectionReference" is required (not null)
            if (sectionReference == null)
            {
                throw new ArgumentNullException("sectionReference is a required property for EdFiStaffSectionAssociation and cannot be null");
            }
            this.SectionReference = sectionReference;
            // to ensure "staffReference" is required (not null)
            if (staffReference == null)
            {
                throw new ArgumentNullException("staffReference is a required property for EdFiStaffSectionAssociation and cannot be null");
            }
            this.StaffReference = staffReference;
            // to ensure "classroomPositionDescriptor" is required (not null)
            if (classroomPositionDescriptor == null)
            {
                throw new ArgumentNullException("classroomPositionDescriptor is a required property for EdFiStaffSectionAssociation and cannot be null");
            }
            this.ClassroomPositionDescriptor = classroomPositionDescriptor;
            this.Id = id;
            this.EndDate = endDate;
            this.HighlyQualifiedTeacher = highlyQualifiedTeacher;
            this.PercentageContribution = percentageContribution;
            this.TeacherStudentDataLinkExclusion = teacherStudentDataLinkExclusion;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Month, day, and year of a teacher&#39;s assignment to the section.
        /// </summary>
        /// <value>Month, day, and year of a teacher&#39;s assignment to the section.</value>
        [DataMember(Name = "beginDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets SectionReference
        /// </summary>
        [DataMember(Name = "sectionReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSectionReference SectionReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name = "staffReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// The type of position the staff member holds in the specific class/section.
        /// </summary>
        /// <value>The type of position the staff member holds in the specific class/section.</value>
        [DataMember(Name = "classroomPositionDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string ClassroomPositionDescriptor { get; set; }

        /// <summary>
        /// Month, day, and year of the last day of a staff member&#39;s assignment to the section.
        /// </summary>
        /// <value>Month, day, and year of the last day of a staff member&#39;s assignment to the section.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateOnly? EndDate { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.
        /// </summary>
        /// <value>An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.</value>
        [DataMember(Name = "highlyQualifiedTeacher", EmitDefaultValue = true)]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.
        /// </summary>
        /// <value>Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.</value>
        [DataMember(Name = "percentageContribution", EmitDefaultValue = true)]
        public double? PercentageContribution { get; set; }

        /// <summary>
        /// Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.
        /// </summary>
        /// <value>Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.</value>
        [DataMember(Name = "teacherStudentDataLinkExclusion", EmitDefaultValue = true)]
        public bool? TeacherStudentDataLinkExclusion { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the StaffSectionAssociation entity.
        /// </summary>
        /// <value>Extensions to the StaffSectionAssociation entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffSectionAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  SectionReference: ").Append(SectionReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  ClassroomPositionDescriptor: ").Append(ClassroomPositionDescriptor).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  HighlyQualifiedTeacher: ").Append(HighlyQualifiedTeacher).Append("\n");
            sb.Append("  PercentageContribution: ").Append(PercentageContribution).Append("\n");
            sb.Append("  TeacherStudentDataLinkExclusion: ").Append(TeacherStudentDataLinkExclusion).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClassroomPositionDescriptor (string) maxLength
            if (this.ClassroomPositionDescriptor != null && this.ClassroomPositionDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ClassroomPositionDescriptor, length must be less than 306.", new [] { "ClassroomPositionDescriptor" });
            }

            // PercentageContribution (double?) maximum
            if (this.PercentageContribution > (double?)9.9999)
            {
                yield return new ValidationResult("Invalid value for PercentageContribution, must be a value less than or equal to 9.9999.", new [] { "PercentageContribution" });
            }

            // PercentageContribution (double?) minimum
            if (this.PercentageContribution < (double?)-9.9999)
            {
                yield return new ValidationResult("Invalid value for PercentageContribution, must be a value greater than or equal to -9.9999.", new [] { "PercentageContribution" });
            }

            yield break;
        }
    }

}
