/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiCommunityProviderLicense
    /// </summary>
    [DataContract(Name = "edFi_communityProviderLicense")]
    public partial class EdFiCommunityProviderLicense : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCommunityProviderLicense" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiCommunityProviderLicense() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCommunityProviderLicense" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="licenseIdentifier">The unique identifier issued by the licensing organization. (required).</param>
        /// <param name="licensingOrganization">The organization issuing the license. (required).</param>
        /// <param name="communityProviderReference">communityProviderReference (required).</param>
        /// <param name="authorizedFacilityCapacity">The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve..</param>
        /// <param name="licenseEffectiveDate">The month, day, and year on which a license is active or becomes effective. (required).</param>
        /// <param name="licenseExpirationDate">The month, day, and year on which a license will expire..</param>
        /// <param name="licenseIssueDate">The month, day, and year on which an active license was issued..</param>
        /// <param name="licenseStatusDescriptor">An indication of the status of the license..</param>
        /// <param name="licenseTypeDescriptor">An indication of the category of the license. (required).</param>
        /// <param name="oldestAgeAuthorizedToServe">The oldest age of children a provider is authorized or licensed to serve..</param>
        /// <param name="youngestAgeAuthorizedToServe">The youngest age of children a provider is authorized or licensed to serve..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the CommunityProviderLicense entity..</param>
        public EdFiCommunityProviderLicense(string id = default, string licenseIdentifier = default, string licensingOrganization = default, EdFiCommunityProviderReference communityProviderReference = default, int? authorizedFacilityCapacity = default, DateOnly licenseEffectiveDate = default, DateOnly? licenseExpirationDate = default, DateOnly? licenseIssueDate = default, string licenseStatusDescriptor = default, string licenseTypeDescriptor = default, int? oldestAgeAuthorizedToServe = default, int? youngestAgeAuthorizedToServe = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "licenseIdentifier" is required (not null)
            if (licenseIdentifier == null)
            {
                throw new ArgumentNullException("licenseIdentifier is a required property for EdFiCommunityProviderLicense and cannot be null");
            }
            this.LicenseIdentifier = licenseIdentifier;
            // to ensure "licensingOrganization" is required (not null)
            if (licensingOrganization == null)
            {
                throw new ArgumentNullException("licensingOrganization is a required property for EdFiCommunityProviderLicense and cannot be null");
            }
            this.LicensingOrganization = licensingOrganization;
            // to ensure "communityProviderReference" is required (not null)
            if (communityProviderReference == null)
            {
                throw new ArgumentNullException("communityProviderReference is a required property for EdFiCommunityProviderLicense and cannot be null");
            }
            this.CommunityProviderReference = communityProviderReference;
            this.LicenseEffectiveDate = licenseEffectiveDate;
            // to ensure "licenseTypeDescriptor" is required (not null)
            if (licenseTypeDescriptor == null)
            {
                throw new ArgumentNullException("licenseTypeDescriptor is a required property for EdFiCommunityProviderLicense and cannot be null");
            }
            this.LicenseTypeDescriptor = licenseTypeDescriptor;
            this.Id = id;
            this.AuthorizedFacilityCapacity = authorizedFacilityCapacity;
            this.LicenseExpirationDate = licenseExpirationDate;
            this.LicenseIssueDate = licenseIssueDate;
            this.LicenseStatusDescriptor = licenseStatusDescriptor;
            this.OldestAgeAuthorizedToServe = oldestAgeAuthorizedToServe;
            this.YoungestAgeAuthorizedToServe = youngestAgeAuthorizedToServe;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier issued by the licensing organization.
        /// </summary>
        /// <value>The unique identifier issued by the licensing organization.</value>
        [DataMember(Name = "licenseIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string LicenseIdentifier { get; set; }

        /// <summary>
        /// The organization issuing the license.
        /// </summary>
        /// <value>The organization issuing the license.</value>
        [DataMember(Name = "licensingOrganization", IsRequired = true, EmitDefaultValue = true)]
        public string LicensingOrganization { get; set; }

        /// <summary>
        /// Gets or Sets CommunityProviderReference
        /// </summary>
        [DataMember(Name = "communityProviderReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiCommunityProviderReference CommunityProviderReference { get; set; }

        /// <summary>
        /// The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.
        /// </summary>
        /// <value>The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.</value>
        [DataMember(Name = "authorizedFacilityCapacity", EmitDefaultValue = true)]
        public int? AuthorizedFacilityCapacity { get; set; }

        /// <summary>
        /// The month, day, and year on which a license is active or becomes effective.
        /// </summary>
        /// <value>The month, day, and year on which a license is active or becomes effective.</value>
        [DataMember(Name = "licenseEffectiveDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly LicenseEffectiveDate { get; set; }

        /// <summary>
        /// The month, day, and year on which a license will expire.
        /// </summary>
        /// <value>The month, day, and year on which a license will expire.</value>
        [DataMember(Name = "licenseExpirationDate", EmitDefaultValue = true)]
        public DateOnly? LicenseExpirationDate { get; set; }

        /// <summary>
        /// The month, day, and year on which an active license was issued.
        /// </summary>
        /// <value>The month, day, and year on which an active license was issued.</value>
        [DataMember(Name = "licenseIssueDate", EmitDefaultValue = true)]
        public DateOnly? LicenseIssueDate { get; set; }

        /// <summary>
        /// An indication of the status of the license.
        /// </summary>
        /// <value>An indication of the status of the license.</value>
        [DataMember(Name = "licenseStatusDescriptor", EmitDefaultValue = true)]
        public string LicenseStatusDescriptor { get; set; }

        /// <summary>
        /// An indication of the category of the license.
        /// </summary>
        /// <value>An indication of the category of the license.</value>
        [DataMember(Name = "licenseTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string LicenseTypeDescriptor { get; set; }

        /// <summary>
        /// The oldest age of children a provider is authorized or licensed to serve.
        /// </summary>
        /// <value>The oldest age of children a provider is authorized or licensed to serve.</value>
        [DataMember(Name = "oldestAgeAuthorizedToServe", EmitDefaultValue = true)]
        public int? OldestAgeAuthorizedToServe { get; set; }

        /// <summary>
        /// The youngest age of children a provider is authorized or licensed to serve.
        /// </summary>
        /// <value>The youngest age of children a provider is authorized or licensed to serve.</value>
        [DataMember(Name = "youngestAgeAuthorizedToServe", EmitDefaultValue = true)]
        public int? YoungestAgeAuthorizedToServe { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the CommunityProviderLicense entity.
        /// </summary>
        /// <value>Extensions to the CommunityProviderLicense entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCommunityProviderLicense {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LicenseIdentifier: ").Append(LicenseIdentifier).Append("\n");
            sb.Append("  LicensingOrganization: ").Append(LicensingOrganization).Append("\n");
            sb.Append("  CommunityProviderReference: ").Append(CommunityProviderReference).Append("\n");
            sb.Append("  AuthorizedFacilityCapacity: ").Append(AuthorizedFacilityCapacity).Append("\n");
            sb.Append("  LicenseEffectiveDate: ").Append(LicenseEffectiveDate).Append("\n");
            sb.Append("  LicenseExpirationDate: ").Append(LicenseExpirationDate).Append("\n");
            sb.Append("  LicenseIssueDate: ").Append(LicenseIssueDate).Append("\n");
            sb.Append("  LicenseStatusDescriptor: ").Append(LicenseStatusDescriptor).Append("\n");
            sb.Append("  LicenseTypeDescriptor: ").Append(LicenseTypeDescriptor).Append("\n");
            sb.Append("  OldestAgeAuthorizedToServe: ").Append(OldestAgeAuthorizedToServe).Append("\n");
            sb.Append("  YoungestAgeAuthorizedToServe: ").Append(YoungestAgeAuthorizedToServe).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LicenseIdentifier (string) maxLength
            if (this.LicenseIdentifier != null && this.LicenseIdentifier.Length > 36)
            {
                yield return new ValidationResult("Invalid value for LicenseIdentifier, length must be less than 36.", new [] { "LicenseIdentifier" });
            }

            // LicensingOrganization (string) maxLength
            if (this.LicensingOrganization != null && this.LicensingOrganization.Length > 75)
            {
                yield return new ValidationResult("Invalid value for LicensingOrganization, length must be less than 75.", new [] { "LicensingOrganization" });
            }

            // LicenseStatusDescriptor (string) maxLength
            if (this.LicenseStatusDescriptor != null && this.LicenseStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LicenseStatusDescriptor, length must be less than 306.", new [] { "LicenseStatusDescriptor" });
            }

            // LicenseTypeDescriptor (string) maxLength
            if (this.LicenseTypeDescriptor != null && this.LicenseTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LicenseTypeDescriptor, length must be less than 306.", new [] { "LicenseTypeDescriptor" });
            }

            yield break;
        }
    }

}
