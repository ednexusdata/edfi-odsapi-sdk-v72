/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiIntervention
    /// </summary>
    [DataContract(Name = "edFi_intervention")]
    public partial class EdFiIntervention : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiIntervention" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiIntervention() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiIntervention" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="interventionIdentificationCode">A unique number or alphanumeric code assigned to an intervention. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="appropriateGradeLevels">An unordered collection of interventionAppropriateGradeLevels. Grade levels for the intervention. If omitted, considered generally applicable..</param>
        /// <param name="appropriateSexes">An unordered collection of interventionAppropriateSexes. Sexes for the intervention. If omitted, considered generally applicable..</param>
        /// <param name="beginDate">The start date for the intervention implementation. (required).</param>
        /// <param name="deliveryMethodDescriptor">The way in which an intervention was implemented. (required).</param>
        /// <param name="diagnoses">An unordered collection of interventionDiagnoses. Targeted purpose of the intervention..</param>
        /// <param name="educationContents">An unordered collection of interventionEducationContents. Relates the education content source to the education content..</param>
        /// <param name="endDate">The end date for the intervention implementation..</param>
        /// <param name="interventionClassDescriptor">The way in which an intervention is used: curriculum, supplement, or practice. (required).</param>
        /// <param name="interventionPrescriptions">An unordered collection of interventionInterventionPrescriptions. The reference to the intervention prescription being followed in this intervention implementation..</param>
        /// <param name="learningResourceMetadataURIs">An unordered collection of interventionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item..</param>
        /// <param name="maxDosage">The maximum duration of time in minutes that may be assigned for the intervention..</param>
        /// <param name="meetingTimes">An unordered collection of interventionMeetingTimes. The times at which this intervention is scheduled to meet..</param>
        /// <param name="minDosage">The minimum duration of time in minutes that may be assigned for the intervention..</param>
        /// <param name="varNamespace">Namespace for the intervention..</param>
        /// <param name="populationServeds">An unordered collection of interventionPopulationServeds. A subset of students that are the focus of the intervention..</param>
        /// <param name="staffs">An unordered collection of interventionStaffs. Relates the staff member associated with the Intervention..</param>
        /// <param name="uris">An unordered collection of interventionURIs. The URI (typical a URL) pointing to an education content item..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the Intervention entity..</param>
        public EdFiIntervention(string id = default, string interventionIdentificationCode = default, EdFiEducationOrganizationReference educationOrganizationReference = default, List<EdFiInterventionAppropriateGradeLevel> appropriateGradeLevels = default, List<EdFiInterventionAppropriateSex> appropriateSexes = default, DateOnly beginDate = default, string deliveryMethodDescriptor = default, List<EdFiInterventionDiagnosis> diagnoses = default, List<EdFiInterventionEducationContent> educationContents = default, DateOnly? endDate = default, string interventionClassDescriptor = default, List<EdFiInterventionInterventionPrescription> interventionPrescriptions = default, List<EdFiInterventionLearningResourceMetadataURI> learningResourceMetadataURIs = default, int? maxDosage = default, List<EdFiInterventionMeetingTime> meetingTimes = default, int? minDosage = default, string varNamespace = default, List<EdFiInterventionPopulationServed> populationServeds = default, List<EdFiInterventionStaff> staffs = default, List<EdFiInterventionURI> uris = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "interventionIdentificationCode" is required (not null)
            if (interventionIdentificationCode == null)
            {
                throw new ArgumentNullException("interventionIdentificationCode is a required property for EdFiIntervention and cannot be null");
            }
            this.InterventionIdentificationCode = interventionIdentificationCode;
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new ArgumentNullException("educationOrganizationReference is a required property for EdFiIntervention and cannot be null");
            }
            this.EducationOrganizationReference = educationOrganizationReference;
            this.BeginDate = beginDate;
            // to ensure "deliveryMethodDescriptor" is required (not null)
            if (deliveryMethodDescriptor == null)
            {
                throw new ArgumentNullException("deliveryMethodDescriptor is a required property for EdFiIntervention and cannot be null");
            }
            this.DeliveryMethodDescriptor = deliveryMethodDescriptor;
            // to ensure "interventionClassDescriptor" is required (not null)
            if (interventionClassDescriptor == null)
            {
                throw new ArgumentNullException("interventionClassDescriptor is a required property for EdFiIntervention and cannot be null");
            }
            this.InterventionClassDescriptor = interventionClassDescriptor;
            this.Id = id;
            this.AppropriateGradeLevels = appropriateGradeLevels;
            this.AppropriateSexes = appropriateSexes;
            this.Diagnoses = diagnoses;
            this.EducationContents = educationContents;
            this.EndDate = endDate;
            this.InterventionPrescriptions = interventionPrescriptions;
            this.LearningResourceMetadataURIs = learningResourceMetadataURIs;
            this.MaxDosage = maxDosage;
            this.MeetingTimes = meetingTimes;
            this.MinDosage = minDosage;
            this.Namespace = varNamespace;
            this.PopulationServeds = populationServeds;
            this.Staffs = staffs;
            this.Uris = uris;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an intervention.</value>
        [DataMember(Name = "interventionIdentificationCode", IsRequired = true, EmitDefaultValue = true)]
        public string InterventionIdentificationCode { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// An unordered collection of interventionAppropriateGradeLevels. Grade levels for the intervention. If omitted, considered generally applicable.
        /// </summary>
        /// <value>An unordered collection of interventionAppropriateGradeLevels. Grade levels for the intervention. If omitted, considered generally applicable.</value>
        [DataMember(Name = "appropriateGradeLevels", EmitDefaultValue = false)]
        public List<EdFiInterventionAppropriateGradeLevel> AppropriateGradeLevels { get; set; }

        /// <summary>
        /// An unordered collection of interventionAppropriateSexes. Sexes for the intervention. If omitted, considered generally applicable.
        /// </summary>
        /// <value>An unordered collection of interventionAppropriateSexes. Sexes for the intervention. If omitted, considered generally applicable.</value>
        [DataMember(Name = "appropriateSexes", EmitDefaultValue = false)]
        public List<EdFiInterventionAppropriateSex> AppropriateSexes { get; set; }

        /// <summary>
        /// The start date for the intervention implementation.
        /// </summary>
        /// <value>The start date for the intervention implementation.</value>
        [DataMember(Name = "beginDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// The way in which an intervention was implemented.
        /// </summary>
        /// <value>The way in which an intervention was implemented.</value>
        [DataMember(Name = "deliveryMethodDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string DeliveryMethodDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of interventionDiagnoses. Targeted purpose of the intervention.
        /// </summary>
        /// <value>An unordered collection of interventionDiagnoses. Targeted purpose of the intervention.</value>
        [DataMember(Name = "diagnoses", EmitDefaultValue = false)]
        public List<EdFiInterventionDiagnosis> Diagnoses { get; set; }

        /// <summary>
        /// An unordered collection of interventionEducationContents. Relates the education content source to the education content.
        /// </summary>
        /// <value>An unordered collection of interventionEducationContents. Relates the education content source to the education content.</value>
        [DataMember(Name = "educationContents", EmitDefaultValue = false)]
        public List<EdFiInterventionEducationContent> EducationContents { get; set; }

        /// <summary>
        /// The end date for the intervention implementation.
        /// </summary>
        /// <value>The end date for the intervention implementation.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateOnly? EndDate { get; set; }

        /// <summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        /// </summary>
        /// <value>The way in which an intervention is used: curriculum, supplement, or practice.</value>
        [DataMember(Name = "interventionClassDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string InterventionClassDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of interventionInterventionPrescriptions. The reference to the intervention prescription being followed in this intervention implementation.
        /// </summary>
        /// <value>An unordered collection of interventionInterventionPrescriptions. The reference to the intervention prescription being followed in this intervention implementation.</value>
        [DataMember(Name = "interventionPrescriptions", EmitDefaultValue = false)]
        public List<EdFiInterventionInterventionPrescription> InterventionPrescriptions { get; set; }

        /// <summary>
        /// An unordered collection of interventionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        /// <value>An unordered collection of interventionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</value>
        [DataMember(Name = "learningResourceMetadataURIs", EmitDefaultValue = false)]
        public List<EdFiInterventionLearningResourceMetadataURI> LearningResourceMetadataURIs { get; set; }

        /// <summary>
        /// The maximum duration of time in minutes that may be assigned for the intervention.
        /// </summary>
        /// <value>The maximum duration of time in minutes that may be assigned for the intervention.</value>
        [DataMember(Name = "maxDosage", EmitDefaultValue = true)]
        public int? MaxDosage { get; set; }

        /// <summary>
        /// An unordered collection of interventionMeetingTimes. The times at which this intervention is scheduled to meet.
        /// </summary>
        /// <value>An unordered collection of interventionMeetingTimes. The times at which this intervention is scheduled to meet.</value>
        [DataMember(Name = "meetingTimes", EmitDefaultValue = false)]
        public List<EdFiInterventionMeetingTime> MeetingTimes { get; set; }

        /// <summary>
        /// The minimum duration of time in minutes that may be assigned for the intervention.
        /// </summary>
        /// <value>The minimum duration of time in minutes that may be assigned for the intervention.</value>
        [DataMember(Name = "minDosage", EmitDefaultValue = true)]
        public int? MinDosage { get; set; }

        /// <summary>
        /// Namespace for the intervention.
        /// </summary>
        /// <value>Namespace for the intervention.</value>
        [DataMember(Name = "namespace", EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// An unordered collection of interventionPopulationServeds. A subset of students that are the focus of the intervention.
        /// </summary>
        /// <value>An unordered collection of interventionPopulationServeds. A subset of students that are the focus of the intervention.</value>
        [DataMember(Name = "populationServeds", EmitDefaultValue = false)]
        public List<EdFiInterventionPopulationServed> PopulationServeds { get; set; }

        /// <summary>
        /// An unordered collection of interventionStaffs. Relates the staff member associated with the Intervention.
        /// </summary>
        /// <value>An unordered collection of interventionStaffs. Relates the staff member associated with the Intervention.</value>
        [DataMember(Name = "staffs", EmitDefaultValue = false)]
        public List<EdFiInterventionStaff> Staffs { get; set; }

        /// <summary>
        /// An unordered collection of interventionURIs. The URI (typical a URL) pointing to an education content item.
        /// </summary>
        /// <value>An unordered collection of interventionURIs. The URI (typical a URL) pointing to an education content item.</value>
        [DataMember(Name = "uris", EmitDefaultValue = false)]
        public List<EdFiInterventionURI> Uris { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the Intervention entity.
        /// </summary>
        /// <value>Extensions to the Intervention entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiIntervention {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InterventionIdentificationCode: ").Append(InterventionIdentificationCode).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  AppropriateGradeLevels: ").Append(AppropriateGradeLevels).Append("\n");
            sb.Append("  AppropriateSexes: ").Append(AppropriateSexes).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  DeliveryMethodDescriptor: ").Append(DeliveryMethodDescriptor).Append("\n");
            sb.Append("  Diagnoses: ").Append(Diagnoses).Append("\n");
            sb.Append("  EducationContents: ").Append(EducationContents).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  InterventionClassDescriptor: ").Append(InterventionClassDescriptor).Append("\n");
            sb.Append("  InterventionPrescriptions: ").Append(InterventionPrescriptions).Append("\n");
            sb.Append("  LearningResourceMetadataURIs: ").Append(LearningResourceMetadataURIs).Append("\n");
            sb.Append("  MaxDosage: ").Append(MaxDosage).Append("\n");
            sb.Append("  MeetingTimes: ").Append(MeetingTimes).Append("\n");
            sb.Append("  MinDosage: ").Append(MinDosage).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  PopulationServeds: ").Append(PopulationServeds).Append("\n");
            sb.Append("  Staffs: ").Append(Staffs).Append("\n");
            sb.Append("  Uris: ").Append(Uris).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InterventionIdentificationCode (string) maxLength
            if (this.InterventionIdentificationCode != null && this.InterventionIdentificationCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for InterventionIdentificationCode, length must be less than 60.", new [] { "InterventionIdentificationCode" });
            }

            // DeliveryMethodDescriptor (string) maxLength
            if (this.DeliveryMethodDescriptor != null && this.DeliveryMethodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DeliveryMethodDescriptor, length must be less than 306.", new [] { "DeliveryMethodDescriptor" });
            }

            // InterventionClassDescriptor (string) maxLength
            if (this.InterventionClassDescriptor != null && this.InterventionClassDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for InterventionClassDescriptor, length must be less than 306.", new [] { "InterventionClassDescriptor" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            yield break;
        }
    }

}
