/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiAccountabilityRating
    /// </summary>
    [DataContract(Name = "edFi_accountabilityRating")]
    public partial class EdFiAccountabilityRating : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAccountabilityRating" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiAccountabilityRating() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAccountabilityRating" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="ratingTitle">The title of the rating. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference (required).</param>
        /// <param name="rating">An accountability rating level, designation, or assessment. (required).</param>
        /// <param name="ratingDate">The date the rating was awarded..</param>
        /// <param name="ratingOrganization">The organization that assessed the rating..</param>
        /// <param name="ratingProgram">The program associated with the accountability rating (e.g., NCLB, AEIS)..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the AccountabilityRating entity..</param>
        public EdFiAccountabilityRating(string id = default, string ratingTitle = default, EdFiEducationOrganizationReference educationOrganizationReference = default, EdFiSchoolYearTypeReference schoolYearTypeReference = default, string rating = default, DateOnly? ratingDate = default, string ratingOrganization = default, string ratingProgram = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "ratingTitle" is required (not null)
            if (ratingTitle == null)
            {
                throw new ArgumentNullException("ratingTitle is a required property for EdFiAccountabilityRating and cannot be null");
            }
            this.RatingTitle = ratingTitle;
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new ArgumentNullException("educationOrganizationReference is a required property for EdFiAccountabilityRating and cannot be null");
            }
            this.EducationOrganizationReference = educationOrganizationReference;
            // to ensure "schoolYearTypeReference" is required (not null)
            if (schoolYearTypeReference == null)
            {
                throw new ArgumentNullException("schoolYearTypeReference is a required property for EdFiAccountabilityRating and cannot be null");
            }
            this.SchoolYearTypeReference = schoolYearTypeReference;
            // to ensure "rating" is required (not null)
            if (rating == null)
            {
                throw new ArgumentNullException("rating is a required property for EdFiAccountabilityRating and cannot be null");
            }
            this.Rating = rating;
            this.Id = id;
            this.RatingDate = ratingDate;
            this.RatingOrganization = ratingOrganization;
            this.RatingProgram = ratingProgram;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The title of the rating.
        /// </summary>
        /// <value>The title of the rating.</value>
        [DataMember(Name = "ratingTitle", IsRequired = true, EmitDefaultValue = true)]
        public string RatingTitle { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name = "schoolYearTypeReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// An accountability rating level, designation, or assessment.
        /// </summary>
        /// <value>An accountability rating level, designation, or assessment.</value>
        [DataMember(Name = "rating", IsRequired = true, EmitDefaultValue = true)]
        public string Rating { get; set; }

        /// <summary>
        /// The date the rating was awarded.
        /// </summary>
        /// <value>The date the rating was awarded.</value>
        [DataMember(Name = "ratingDate", EmitDefaultValue = true)]
        public DateOnly? RatingDate { get; set; }

        /// <summary>
        /// The organization that assessed the rating.
        /// </summary>
        /// <value>The organization that assessed the rating.</value>
        [DataMember(Name = "ratingOrganization", EmitDefaultValue = true)]
        public string RatingOrganization { get; set; }

        /// <summary>
        /// The program associated with the accountability rating (e.g., NCLB, AEIS).
        /// </summary>
        /// <value>The program associated with the accountability rating (e.g., NCLB, AEIS).</value>
        [DataMember(Name = "ratingProgram", EmitDefaultValue = true)]
        public string RatingProgram { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the AccountabilityRating entity.
        /// </summary>
        /// <value>Extensions to the AccountabilityRating entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAccountabilityRating {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RatingTitle: ").Append(RatingTitle).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  RatingDate: ").Append(RatingDate).Append("\n");
            sb.Append("  RatingOrganization: ").Append(RatingOrganization).Append("\n");
            sb.Append("  RatingProgram: ").Append(RatingProgram).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RatingTitle (string) maxLength
            if (this.RatingTitle != null && this.RatingTitle.Length > 60)
            {
                yield return new ValidationResult("Invalid value for RatingTitle, length must be less than 60.", new [] { "RatingTitle" });
            }

            // Rating (string) maxLength
            if (this.Rating != null && this.Rating.Length > 35)
            {
                yield return new ValidationResult("Invalid value for Rating, length must be less than 35.", new [] { "Rating" });
            }

            // RatingOrganization (string) maxLength
            if (this.RatingOrganization != null && this.RatingOrganization.Length > 35)
            {
                yield return new ValidationResult("Invalid value for RatingOrganization, length must be less than 35.", new [] { "RatingOrganization" });
            }

            // RatingProgram (string) maxLength
            if (this.RatingProgram != null && this.RatingProgram.Length > 30)
            {
                yield return new ValidationResult("Invalid value for RatingProgram, length must be less than 30.", new [] { "RatingProgram" });
            }

            yield break;
        }
    }

}
