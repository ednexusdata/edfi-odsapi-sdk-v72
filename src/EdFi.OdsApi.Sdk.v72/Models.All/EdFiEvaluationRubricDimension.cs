/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiEvaluationRubricDimension
    /// </summary>
    [DataContract(Name = "edFi_evaluationRubricDimension")]
    public partial class EdFiEvaluationRubricDimension : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiEvaluationRubricDimension" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiEvaluationRubricDimension() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiEvaluationRubricDimension" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="evaluationRubricRating">The numeric rating associated with the evaluation rubric dimension. (required).</param>
        /// <param name="programEvaluationElementReference">programEvaluationElementReference (required).</param>
        /// <param name="evaluationCriterionDescription">The evaluation criterion description for the evaluation rubric dimension. (required).</param>
        /// <param name="evaluationRubricRatingLevelDescriptor">The rating level achieved for the evaluation rubric dimension..</param>
        /// <param name="rubricDimensionSortOrder">The sort order of the rubric dimension..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the EvaluationRubricDimension entity..</param>
        public EdFiEvaluationRubricDimension(string id = default, int evaluationRubricRating = default, EdFiProgramEvaluationElementReference programEvaluationElementReference = default, string evaluationCriterionDescription = default, string evaluationRubricRatingLevelDescriptor = default, int? rubricDimensionSortOrder = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            this.EvaluationRubricRating = evaluationRubricRating;
            // to ensure "programEvaluationElementReference" is required (not null)
            if (programEvaluationElementReference == null)
            {
                throw new ArgumentNullException("programEvaluationElementReference is a required property for EdFiEvaluationRubricDimension and cannot be null");
            }
            this.ProgramEvaluationElementReference = programEvaluationElementReference;
            // to ensure "evaluationCriterionDescription" is required (not null)
            if (evaluationCriterionDescription == null)
            {
                throw new ArgumentNullException("evaluationCriterionDescription is a required property for EdFiEvaluationRubricDimension and cannot be null");
            }
            this.EvaluationCriterionDescription = evaluationCriterionDescription;
            this.Id = id;
            this.EvaluationRubricRatingLevelDescriptor = evaluationRubricRatingLevelDescriptor;
            this.RubricDimensionSortOrder = rubricDimensionSortOrder;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The numeric rating associated with the evaluation rubric dimension.
        /// </summary>
        /// <value>The numeric rating associated with the evaluation rubric dimension.</value>
        [DataMember(Name = "evaluationRubricRating", IsRequired = true, EmitDefaultValue = true)]
        public int EvaluationRubricRating { get; set; }

        /// <summary>
        /// Gets or Sets ProgramEvaluationElementReference
        /// </summary>
        [DataMember(Name = "programEvaluationElementReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiProgramEvaluationElementReference ProgramEvaluationElementReference { get; set; }

        /// <summary>
        /// The evaluation criterion description for the evaluation rubric dimension.
        /// </summary>
        /// <value>The evaluation criterion description for the evaluation rubric dimension.</value>
        [DataMember(Name = "evaluationCriterionDescription", IsRequired = true, EmitDefaultValue = true)]
        public string EvaluationCriterionDescription { get; set; }

        /// <summary>
        /// The rating level achieved for the evaluation rubric dimension.
        /// </summary>
        /// <value>The rating level achieved for the evaluation rubric dimension.</value>
        [DataMember(Name = "evaluationRubricRatingLevelDescriptor", EmitDefaultValue = true)]
        public string EvaluationRubricRatingLevelDescriptor { get; set; }

        /// <summary>
        /// The sort order of the rubric dimension.
        /// </summary>
        /// <value>The sort order of the rubric dimension.</value>
        [DataMember(Name = "rubricDimensionSortOrder", EmitDefaultValue = true)]
        public int? RubricDimensionSortOrder { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the EvaluationRubricDimension entity.
        /// </summary>
        /// <value>Extensions to the EvaluationRubricDimension entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiEvaluationRubricDimension {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EvaluationRubricRating: ").Append(EvaluationRubricRating).Append("\n");
            sb.Append("  ProgramEvaluationElementReference: ").Append(ProgramEvaluationElementReference).Append("\n");
            sb.Append("  EvaluationCriterionDescription: ").Append(EvaluationCriterionDescription).Append("\n");
            sb.Append("  EvaluationRubricRatingLevelDescriptor: ").Append(EvaluationRubricRatingLevelDescriptor).Append("\n");
            sb.Append("  RubricDimensionSortOrder: ").Append(RubricDimensionSortOrder).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EvaluationCriterionDescription (string) maxLength
            if (this.EvaluationCriterionDescription != null && this.EvaluationCriterionDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for EvaluationCriterionDescription, length must be less than 1024.", new [] { "EvaluationCriterionDescription" });
            }

            // EvaluationRubricRatingLevelDescriptor (string) maxLength
            if (this.EvaluationRubricRatingLevelDescriptor != null && this.EvaluationRubricRatingLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EvaluationRubricRatingLevelDescriptor, length must be less than 306.", new [] { "EvaluationRubricRatingLevelDescriptor" });
            }

            yield break;
        }
    }

}
