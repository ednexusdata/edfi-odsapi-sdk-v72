/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiDisciplineIncident
    /// </summary>
    [DataContract(Name = "edFi_disciplineIncident")]
    public partial class EdFiDisciplineIncident : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiDisciplineIncident" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiDisciplineIncident() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiDisciplineIncident" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="incidentIdentifier">A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire discipline incident even if it included multiple offenses and multiple offenders. (required).</param>
        /// <param name="schoolReference">schoolReference (required).</param>
        /// <param name="behaviors">An unordered collection of disciplineIncidentBehaviors. Describes behavior by category and provides a detailed description..</param>
        /// <param name="caseNumber">The case number assigned to the DisciplineIncident by law enforcement or other organization..</param>
        /// <param name="externalParticipants">An unordered collection of disciplineIncidentExternalParticipants. Information on an individual involved in the discipline incident..</param>
        /// <param name="incidentCost">The value of any quantifiable monetary loss directly resulting from the discipline incident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident..</param>
        /// <param name="incidentDate">The month, day, and year on which the discipline incident occurred. (required).</param>
        /// <param name="incidentDescription">The description for an incident..</param>
        /// <param name="incidentLocationDescriptor">Identifies where the discipline incident occurred and whether or not it occurred on school..</param>
        /// <param name="incidentTime">An indication of the time of day the incident took place..</param>
        /// <param name="reportedToLawEnforcement">Indicator of whether the incident was reported to law enforcement..</param>
        /// <param name="reporterDescriptionDescriptor">Information on the type of individual who reported the discipline incident. When known and/or if useful, use a more specific option code (e.g., \&quot;Counselor\&quot; rather than \&quot;Professional Staff\&quot;)..</param>
        /// <param name="reporterName">Identifies the reporter of the discipline incident by name..</param>
        /// <param name="weapons">An unordered collection of disciplineIncidentWeapons. Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the DisciplineIncident entity..</param>
        public EdFiDisciplineIncident(string id = default, string incidentIdentifier = default, EdFiSchoolReference schoolReference = default, List<EdFiDisciplineIncidentBehavior> behaviors = default, string caseNumber = default, List<EdFiDisciplineIncidentExternalParticipant> externalParticipants = default, double? incidentCost = default, DateOnly incidentDate = default, string incidentDescription = default, string incidentLocationDescriptor = default, string incidentTime = default, bool? reportedToLawEnforcement = default, string reporterDescriptionDescriptor = default, string reporterName = default, List<EdFiDisciplineIncidentWeapon> weapons = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "incidentIdentifier" is required (not null)
            if (incidentIdentifier == null)
            {
                throw new ArgumentNullException("incidentIdentifier is a required property for EdFiDisciplineIncident and cannot be null");
            }
            this.IncidentIdentifier = incidentIdentifier;
            // to ensure "schoolReference" is required (not null)
            if (schoolReference == null)
            {
                throw new ArgumentNullException("schoolReference is a required property for EdFiDisciplineIncident and cannot be null");
            }
            this.SchoolReference = schoolReference;
            this.IncidentDate = incidentDate;
            this.Id = id;
            this.Behaviors = behaviors;
            this.CaseNumber = caseNumber;
            this.ExternalParticipants = externalParticipants;
            this.IncidentCost = incidentCost;
            this.IncidentDescription = incidentDescription;
            this.IncidentLocationDescriptor = incidentLocationDescriptor;
            this.IncidentTime = incidentTime;
            this.ReportedToLawEnforcement = reportedToLawEnforcement;
            this.ReporterDescriptionDescriptor = reporterDescriptionDescriptor;
            this.ReporterName = reporterName;
            this.Weapons = weapons;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire discipline incident even if it included multiple offenses and multiple offenders.
        /// </summary>
        /// <value>A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire discipline incident even if it included multiple offenses and multiple offenders.</value>
        [DataMember(Name = "incidentIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string IncidentIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [DataMember(Name = "schoolReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// An unordered collection of disciplineIncidentBehaviors. Describes behavior by category and provides a detailed description.
        /// </summary>
        /// <value>An unordered collection of disciplineIncidentBehaviors. Describes behavior by category and provides a detailed description.</value>
        [DataMember(Name = "behaviors", EmitDefaultValue = false)]
        public List<EdFiDisciplineIncidentBehavior> Behaviors { get; set; }

        /// <summary>
        /// The case number assigned to the DisciplineIncident by law enforcement or other organization.
        /// </summary>
        /// <value>The case number assigned to the DisciplineIncident by law enforcement or other organization.</value>
        [DataMember(Name = "caseNumber", EmitDefaultValue = true)]
        public string CaseNumber { get; set; }

        /// <summary>
        /// An unordered collection of disciplineIncidentExternalParticipants. Information on an individual involved in the discipline incident.
        /// </summary>
        /// <value>An unordered collection of disciplineIncidentExternalParticipants. Information on an individual involved in the discipline incident.</value>
        [DataMember(Name = "externalParticipants", EmitDefaultValue = false)]
        public List<EdFiDisciplineIncidentExternalParticipant> ExternalParticipants { get; set; }

        /// <summary>
        /// The value of any quantifiable monetary loss directly resulting from the discipline incident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.
        /// </summary>
        /// <value>The value of any quantifiable monetary loss directly resulting from the discipline incident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.</value>
        [DataMember(Name = "incidentCost", EmitDefaultValue = true)]
        public double? IncidentCost { get; set; }

        /// <summary>
        /// The month, day, and year on which the discipline incident occurred.
        /// </summary>
        /// <value>The month, day, and year on which the discipline incident occurred.</value>
        [DataMember(Name = "incidentDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly IncidentDate { get; set; }

        /// <summary>
        /// The description for an incident.
        /// </summary>
        /// <value>The description for an incident.</value>
        [DataMember(Name = "incidentDescription", EmitDefaultValue = true)]
        public string IncidentDescription { get; set; }

        /// <summary>
        /// Identifies where the discipline incident occurred and whether or not it occurred on school.
        /// </summary>
        /// <value>Identifies where the discipline incident occurred and whether or not it occurred on school.</value>
        [DataMember(Name = "incidentLocationDescriptor", EmitDefaultValue = true)]
        public string IncidentLocationDescriptor { get; set; }

        /// <summary>
        /// An indication of the time of day the incident took place.
        /// </summary>
        /// <value>An indication of the time of day the incident took place.</value>
        [DataMember(Name = "incidentTime", EmitDefaultValue = true)]
        public string IncidentTime { get; set; }

        /// <summary>
        /// Indicator of whether the incident was reported to law enforcement.
        /// </summary>
        /// <value>Indicator of whether the incident was reported to law enforcement.</value>
        [DataMember(Name = "reportedToLawEnforcement", EmitDefaultValue = true)]
        public bool? ReportedToLawEnforcement { get; set; }

        /// <summary>
        /// Information on the type of individual who reported the discipline incident. When known and/or if useful, use a more specific option code (e.g., \&quot;Counselor\&quot; rather than \&quot;Professional Staff\&quot;).
        /// </summary>
        /// <value>Information on the type of individual who reported the discipline incident. When known and/or if useful, use a more specific option code (e.g., \&quot;Counselor\&quot; rather than \&quot;Professional Staff\&quot;).</value>
        [DataMember(Name = "reporterDescriptionDescriptor", EmitDefaultValue = true)]
        public string ReporterDescriptionDescriptor { get; set; }

        /// <summary>
        /// Identifies the reporter of the discipline incident by name.
        /// </summary>
        /// <value>Identifies the reporter of the discipline incident by name.</value>
        [DataMember(Name = "reporterName", EmitDefaultValue = true)]
        public string ReporterName { get; set; }

        /// <summary>
        /// An unordered collection of disciplineIncidentWeapons. Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.
        /// </summary>
        /// <value>An unordered collection of disciplineIncidentWeapons. Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.</value>
        [DataMember(Name = "weapons", EmitDefaultValue = false)]
        public List<EdFiDisciplineIncidentWeapon> Weapons { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the DisciplineIncident entity.
        /// </summary>
        /// <value>Extensions to the DisciplineIncident entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiDisciplineIncident {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IncidentIdentifier: ").Append(IncidentIdentifier).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  Behaviors: ").Append(Behaviors).Append("\n");
            sb.Append("  CaseNumber: ").Append(CaseNumber).Append("\n");
            sb.Append("  ExternalParticipants: ").Append(ExternalParticipants).Append("\n");
            sb.Append("  IncidentCost: ").Append(IncidentCost).Append("\n");
            sb.Append("  IncidentDate: ").Append(IncidentDate).Append("\n");
            sb.Append("  IncidentDescription: ").Append(IncidentDescription).Append("\n");
            sb.Append("  IncidentLocationDescriptor: ").Append(IncidentLocationDescriptor).Append("\n");
            sb.Append("  IncidentTime: ").Append(IncidentTime).Append("\n");
            sb.Append("  ReportedToLawEnforcement: ").Append(ReportedToLawEnforcement).Append("\n");
            sb.Append("  ReporterDescriptionDescriptor: ").Append(ReporterDescriptionDescriptor).Append("\n");
            sb.Append("  ReporterName: ").Append(ReporterName).Append("\n");
            sb.Append("  Weapons: ").Append(Weapons).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IncidentIdentifier (string) maxLength
            if (this.IncidentIdentifier != null && this.IncidentIdentifier.Length > 36)
            {
                yield return new ValidationResult("Invalid value for IncidentIdentifier, length must be less than 36.", new [] { "IncidentIdentifier" });
            }

            // CaseNumber (string) maxLength
            if (this.CaseNumber != null && this.CaseNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for CaseNumber, length must be less than 20.", new [] { "CaseNumber" });
            }

            // IncidentCost (double?) maximum
            if (this.IncidentCost > (double?)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for IncidentCost, must be a value less than or equal to 922337203685477.6.", new [] { "IncidentCost" });
            }

            // IncidentCost (double?) minimum
            if (this.IncidentCost < (double?)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for IncidentCost, must be a value greater than or equal to -922337203685477.6.", new [] { "IncidentCost" });
            }

            // IncidentDescription (string) maxLength
            if (this.IncidentDescription != null && this.IncidentDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for IncidentDescription, length must be less than 1024.", new [] { "IncidentDescription" });
            }

            // IncidentLocationDescriptor (string) maxLength
            if (this.IncidentLocationDescriptor != null && this.IncidentLocationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for IncidentLocationDescriptor, length must be less than 306.", new [] { "IncidentLocationDescriptor" });
            }

            // ReporterDescriptionDescriptor (string) maxLength
            if (this.ReporterDescriptionDescriptor != null && this.ReporterDescriptionDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ReporterDescriptionDescriptor, length must be less than 306.", new [] { "ReporterDescriptionDescriptor" });
            }

            // ReporterName (string) maxLength
            if (this.ReporterName != null && this.ReporterName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for ReporterName, length must be less than 75.", new [] { "ReporterName" });
            }

            yield break;
        }
    }

}
