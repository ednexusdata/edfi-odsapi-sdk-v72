/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentEducationOrganizationAssociationDisplacedStudent
    /// </summary>
    [DataContract(Name = "edFi_studentEducationOrganizationAssociationDisplacedStudent")]
    public partial class EdFiStudentEducationOrganizationAssociationDisplacedStudent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociationDisplacedStudent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentEducationOrganizationAssociationDisplacedStudent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociationDisplacedStudent" /> class.
        /// </summary>
        /// <param name="displacedStudentStatusDescriptor">Indicates whether a student has been displaced as a result of a crisis event. (required).</param>
        /// <param name="crisisHomelessnessIndicator">Any student considered homeless (defined by the McKinney-Vento Homeless Education Assistance Act as lacking a fixed, regular, and adequate nighttime residence) as a result of the crisis event..</param>
        /// <param name="displacedStudentEndDate">The date marking the end of the period during which a student is considered displaced due to a crisis event..</param>
        /// <param name="displacedStudentStartDate">The date on which a student is officially identified as displaced due to a crisis event..</param>
        /// <param name="crisisEventReference">crisisEventReference (required).</param>
        /// <param name="ext">Extensions to the StudentEducationOrganizationAssociationDisplacedStudent entity..</param>
        public EdFiStudentEducationOrganizationAssociationDisplacedStudent(string displacedStudentStatusDescriptor = default, bool? crisisHomelessnessIndicator = default, DateOnly? displacedStudentEndDate = default, DateOnly? displacedStudentStartDate = default, EdFiCrisisEventReference crisisEventReference = default, Object ext = default)
        {
            // to ensure "displacedStudentStatusDescriptor" is required (not null)
            if (displacedStudentStatusDescriptor == null)
            {
                throw new ArgumentNullException("displacedStudentStatusDescriptor is a required property for EdFiStudentEducationOrganizationAssociationDisplacedStudent and cannot be null");
            }
            this.DisplacedStudentStatusDescriptor = displacedStudentStatusDescriptor;
            // to ensure "crisisEventReference" is required (not null)
            if (crisisEventReference == null)
            {
                throw new ArgumentNullException("crisisEventReference is a required property for EdFiStudentEducationOrganizationAssociationDisplacedStudent and cannot be null");
            }
            this.CrisisEventReference = crisisEventReference;
            this.CrisisHomelessnessIndicator = crisisHomelessnessIndicator;
            this.DisplacedStudentEndDate = displacedStudentEndDate;
            this.DisplacedStudentStartDate = displacedStudentStartDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Indicates whether a student has been displaced as a result of a crisis event.
        /// </summary>
        /// <value>Indicates whether a student has been displaced as a result of a crisis event.</value>
        [DataMember(Name = "displacedStudentStatusDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string DisplacedStudentStatusDescriptor { get; set; }

        /// <summary>
        /// Any student considered homeless (defined by the McKinney-Vento Homeless Education Assistance Act as lacking a fixed, regular, and adequate nighttime residence) as a result of the crisis event.
        /// </summary>
        /// <value>Any student considered homeless (defined by the McKinney-Vento Homeless Education Assistance Act as lacking a fixed, regular, and adequate nighttime residence) as a result of the crisis event.</value>
        [DataMember(Name = "crisisHomelessnessIndicator", EmitDefaultValue = true)]
        public bool? CrisisHomelessnessIndicator { get; set; }

        /// <summary>
        /// The date marking the end of the period during which a student is considered displaced due to a crisis event.
        /// </summary>
        /// <value>The date marking the end of the period during which a student is considered displaced due to a crisis event.</value>
        [DataMember(Name = "displacedStudentEndDate", EmitDefaultValue = true)]
        public DateOnly? DisplacedStudentEndDate { get; set; }

        /// <summary>
        /// The date on which a student is officially identified as displaced due to a crisis event.
        /// </summary>
        /// <value>The date on which a student is officially identified as displaced due to a crisis event.</value>
        [DataMember(Name = "displacedStudentStartDate", EmitDefaultValue = true)]
        public DateOnly? DisplacedStudentStartDate { get; set; }

        /// <summary>
        /// Gets or Sets CrisisEventReference
        /// </summary>
        [DataMember(Name = "crisisEventReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiCrisisEventReference CrisisEventReference { get; set; }

        /// <summary>
        /// Extensions to the StudentEducationOrganizationAssociationDisplacedStudent entity.
        /// </summary>
        /// <value>Extensions to the StudentEducationOrganizationAssociationDisplacedStudent entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentEducationOrganizationAssociationDisplacedStudent {\n");
            sb.Append("  DisplacedStudentStatusDescriptor: ").Append(DisplacedStudentStatusDescriptor).Append("\n");
            sb.Append("  CrisisHomelessnessIndicator: ").Append(CrisisHomelessnessIndicator).Append("\n");
            sb.Append("  DisplacedStudentEndDate: ").Append(DisplacedStudentEndDate).Append("\n");
            sb.Append("  DisplacedStudentStartDate: ").Append(DisplacedStudentStartDate).Append("\n");
            sb.Append("  CrisisEventReference: ").Append(CrisisEventReference).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplacedStudentStatusDescriptor (string) maxLength
            if (this.DisplacedStudentStatusDescriptor != null && this.DisplacedStudentStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DisplacedStudentStatusDescriptor, length must be less than 306.", new [] { "DisplacedStudentStatusDescriptor" });
            }

            yield break;
        }
    }

}
