/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiSurvey
    /// </summary>
    [DataContract(Name = "edFi_survey")]
    public partial class EdFiSurvey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurvey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurvey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurvey" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="varNamespace">Namespace for the survey. (required).</param>
        /// <param name="surveyIdentifier">The unique survey identifier from the survey tool. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference.</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference (required).</param>
        /// <param name="sessionReference">sessionReference.</param>
        /// <param name="numberAdministered">Number of persons to whom this survey was administered..</param>
        /// <param name="surveyCategoryDescriptor">The category or type of survey..</param>
        /// <param name="surveyTitle">The title of the survey. (required).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the Survey entity..</param>
        public EdFiSurvey(string id = default, string varNamespace = default, string surveyIdentifier = default, EdFiEducationOrganizationReference educationOrganizationReference = default, EdFiSchoolYearTypeReference schoolYearTypeReference = default, EdFiSessionReference sessionReference = default, int? numberAdministered = default, string surveyCategoryDescriptor = default, string surveyTitle = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "varNamespace" is required (not null)
            if (varNamespace == null)
            {
                throw new ArgumentNullException("varNamespace is a required property for EdFiSurvey and cannot be null");
            }
            this.Namespace = varNamespace;
            // to ensure "surveyIdentifier" is required (not null)
            if (surveyIdentifier == null)
            {
                throw new ArgumentNullException("surveyIdentifier is a required property for EdFiSurvey and cannot be null");
            }
            this.SurveyIdentifier = surveyIdentifier;
            // to ensure "schoolYearTypeReference" is required (not null)
            if (schoolYearTypeReference == null)
            {
                throw new ArgumentNullException("schoolYearTypeReference is a required property for EdFiSurvey and cannot be null");
            }
            this.SchoolYearTypeReference = schoolYearTypeReference;
            // to ensure "surveyTitle" is required (not null)
            if (surveyTitle == null)
            {
                throw new ArgumentNullException("surveyTitle is a required property for EdFiSurvey and cannot be null");
            }
            this.SurveyTitle = surveyTitle;
            this.Id = id;
            this.EducationOrganizationReference = educationOrganizationReference;
            this.SessionReference = sessionReference;
            this.NumberAdministered = numberAdministered;
            this.SurveyCategoryDescriptor = surveyCategoryDescriptor;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Namespace for the survey.
        /// </summary>
        /// <value>Namespace for the survey.</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// The unique survey identifier from the survey tool.
        /// </summary>
        /// <value>The unique survey identifier from the survey tool.</value>
        [DataMember(Name = "surveyIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string SurveyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", EmitDefaultValue = false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name = "schoolYearTypeReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets SessionReference
        /// </summary>
        [DataMember(Name = "sessionReference", EmitDefaultValue = false)]
        public EdFiSessionReference SessionReference { get; set; }

        /// <summary>
        /// Number of persons to whom this survey was administered.
        /// </summary>
        /// <value>Number of persons to whom this survey was administered.</value>
        [DataMember(Name = "numberAdministered", EmitDefaultValue = true)]
        public int? NumberAdministered { get; set; }

        /// <summary>
        /// The category or type of survey.
        /// </summary>
        /// <value>The category or type of survey.</value>
        [DataMember(Name = "surveyCategoryDescriptor", EmitDefaultValue = true)]
        public string SurveyCategoryDescriptor { get; set; }

        /// <summary>
        /// The title of the survey.
        /// </summary>
        /// <value>The title of the survey.</value>
        [DataMember(Name = "surveyTitle", IsRequired = true, EmitDefaultValue = true)]
        public string SurveyTitle { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the Survey entity.
        /// </summary>
        /// <value>Extensions to the Survey entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurvey {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  SurveyIdentifier: ").Append(SurveyIdentifier).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  SessionReference: ").Append(SessionReference).Append("\n");
            sb.Append("  NumberAdministered: ").Append(NumberAdministered).Append("\n");
            sb.Append("  SurveyCategoryDescriptor: ").Append(SurveyCategoryDescriptor).Append("\n");
            sb.Append("  SurveyTitle: ").Append(SurveyTitle).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // SurveyIdentifier (string) maxLength
            if (this.SurveyIdentifier != null && this.SurveyIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SurveyIdentifier, length must be less than 60.", new [] { "SurveyIdentifier" });
            }

            // SurveyCategoryDescriptor (string) maxLength
            if (this.SurveyCategoryDescriptor != null && this.SurveyCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SurveyCategoryDescriptor, length must be less than 306.", new [] { "SurveyCategoryDescriptor" });
            }

            // SurveyTitle (string) maxLength
            if (this.SurveyTitle != null && this.SurveyTitle.Length > 255)
            {
                yield return new ValidationResult("Invalid value for SurveyTitle, length must be less than 255.", new [] { "SurveyTitle" });
            }

            yield break;
        }
    }

}
