/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiCalendar
    /// </summary>
    [DataContract(Name = "edFi_calendar")]
    public partial class EdFiCalendar : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCalendar" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiCalendar() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCalendar" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="calendarCode">The identifier for the calendar. (required).</param>
        /// <param name="schoolReference">schoolReference (required).</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference (required).</param>
        /// <param name="calendarTypeDescriptor">Indicates the type of calendar. (required).</param>
        /// <param name="gradeLevels">An unordered collection of calendarGradeLevels. Indicates the grade level associated with the calendar..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified..</param>
        /// <param name="ext">Extensions to the Calendar entity..</param>
        public EdFiCalendar(string id = default, string calendarCode = default, EdFiSchoolReference schoolReference = default, EdFiSchoolYearTypeReference schoolYearTypeReference = default, string calendarTypeDescriptor = default, List<EdFiCalendarGradeLevel> gradeLevels = default, string etag = default, DateTime lastModifiedDate = default, Object ext = default)
        {
            // to ensure "calendarCode" is required (not null)
            if (calendarCode == null)
            {
                throw new ArgumentNullException("calendarCode is a required property for EdFiCalendar and cannot be null");
            }
            this.CalendarCode = calendarCode;
            // to ensure "schoolReference" is required (not null)
            if (schoolReference == null)
            {
                throw new ArgumentNullException("schoolReference is a required property for EdFiCalendar and cannot be null");
            }
            this.SchoolReference = schoolReference;
            // to ensure "schoolYearTypeReference" is required (not null)
            if (schoolYearTypeReference == null)
            {
                throw new ArgumentNullException("schoolYearTypeReference is a required property for EdFiCalendar and cannot be null");
            }
            this.SchoolYearTypeReference = schoolYearTypeReference;
            // to ensure "calendarTypeDescriptor" is required (not null)
            if (calendarTypeDescriptor == null)
            {
                throw new ArgumentNullException("calendarTypeDescriptor is a required property for EdFiCalendar and cannot be null");
            }
            this.CalendarTypeDescriptor = calendarTypeDescriptor;
            this.Id = id;
            this.GradeLevels = gradeLevels;
            this.Etag = etag;
            this.LastModifiedDate = lastModifiedDate;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The identifier for the calendar.
        /// </summary>
        /// <value>The identifier for the calendar.</value>
        [DataMember(Name = "calendarCode", IsRequired = true, EmitDefaultValue = true)]
        public string CalendarCode { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [DataMember(Name = "schoolReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name = "schoolYearTypeReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Indicates the type of calendar.
        /// </summary>
        /// <value>Indicates the type of calendar.</value>
        [DataMember(Name = "calendarTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string CalendarTypeDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of calendarGradeLevels. Indicates the grade level associated with the calendar.
        /// </summary>
        /// <value>An unordered collection of calendarGradeLevels. Indicates the grade level associated with the calendar.</value>
        [DataMember(Name = "gradeLevels", EmitDefaultValue = false)]
        public List<EdFiCalendarGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [DataMember(Name = "_lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Extensions to the Calendar entity.
        /// </summary>
        /// <value>Extensions to the Calendar entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCalendar {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CalendarCode: ").Append(CalendarCode).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  CalendarTypeDescriptor: ").Append(CalendarTypeDescriptor).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CalendarCode (string) maxLength
            if (this.CalendarCode != null && this.CalendarCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CalendarCode, length must be less than 60.", new [] { "CalendarCode" });
            }

            // CalendarTypeDescriptor (string) maxLength
            if (this.CalendarTypeDescriptor != null && this.CalendarTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CalendarTypeDescriptor, length must be less than 306.", new [] { "CalendarTypeDescriptor" });
            }

            yield break;
        }
    }

}
