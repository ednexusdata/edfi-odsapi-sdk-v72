/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiEducationOrganizationInstitutionTelephone
    /// </summary>
    [DataContract(Name = "edFi_educationOrganizationInstitutionTelephone")]
    public partial class EdFiEducationOrganizationInstitutionTelephone : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiEducationOrganizationInstitutionTelephone" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiEducationOrganizationInstitutionTelephone() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiEducationOrganizationInstitutionTelephone" /> class.
        /// </summary>
        /// <param name="institutionTelephoneNumberTypeDescriptor">The type of communication number listed for an individual or organization. (required).</param>
        /// <param name="telephoneNumber">The telephone number including the area code, and extension, if applicable. (required).</param>
        /// <param name="ext">Extensions to the EducationOrganizationInstitutionTelephone entity..</param>
        public EdFiEducationOrganizationInstitutionTelephone(string institutionTelephoneNumberTypeDescriptor = default, string telephoneNumber = default, Object ext = default)
        {
            // to ensure "institutionTelephoneNumberTypeDescriptor" is required (not null)
            if (institutionTelephoneNumberTypeDescriptor == null)
            {
                throw new ArgumentNullException("institutionTelephoneNumberTypeDescriptor is a required property for EdFiEducationOrganizationInstitutionTelephone and cannot be null");
            }
            this.InstitutionTelephoneNumberTypeDescriptor = institutionTelephoneNumberTypeDescriptor;
            // to ensure "telephoneNumber" is required (not null)
            if (telephoneNumber == null)
            {
                throw new ArgumentNullException("telephoneNumber is a required property for EdFiEducationOrganizationInstitutionTelephone and cannot be null");
            }
            this.TelephoneNumber = telephoneNumber;
            this.Ext = ext;
        }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        /// <value>The type of communication number listed for an individual or organization.</value>
        [DataMember(Name = "institutionTelephoneNumberTypeDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string InstitutionTelephoneNumberTypeDescriptor { get; set; }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        /// <value>The telephone number including the area code, and extension, if applicable.</value>
        [DataMember(Name = "telephoneNumber", IsRequired = true, EmitDefaultValue = true)]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// Extensions to the EducationOrganizationInstitutionTelephone entity.
        /// </summary>
        /// <value>Extensions to the EducationOrganizationInstitutionTelephone entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiEducationOrganizationInstitutionTelephone {\n");
            sb.Append("  InstitutionTelephoneNumberTypeDescriptor: ").Append(InstitutionTelephoneNumberTypeDescriptor).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InstitutionTelephoneNumberTypeDescriptor (string) maxLength
            if (this.InstitutionTelephoneNumberTypeDescriptor != null && this.InstitutionTelephoneNumberTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for InstitutionTelephoneNumberTypeDescriptor, length must be less than 306.", new [] { "InstitutionTelephoneNumberTypeDescriptor" });
            }

            // TelephoneNumber (string) maxLength
            if (this.TelephoneNumber != null && this.TelephoneNumber.Length > 24)
            {
                yield return new ValidationResult("Invalid value for TelephoneNumber, length must be less than 24.", new [] { "TelephoneNumber" });
            }

            yield break;
        }
    }

}
