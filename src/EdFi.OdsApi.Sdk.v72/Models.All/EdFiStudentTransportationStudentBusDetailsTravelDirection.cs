/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v72.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v72.Models.All
{
    /// <summary>
    /// EdFiStudentTransportationStudentBusDetailsTravelDirection
    /// </summary>
    [DataContract(Name = "edFi_studentTransportationStudentBusDetailsTravelDirection")]
    public partial class EdFiStudentTransportationStudentBusDetailsTravelDirection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentTransportationStudentBusDetailsTravelDirection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentTransportationStudentBusDetailsTravelDirection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentTransportationStudentBusDetailsTravelDirection" /> class.
        /// </summary>
        /// <param name="travelDirectionDescriptor">Indicates the direction of travel for the student transportation route (e.g., to school, from school). (required).</param>
        /// <param name="ext">Extensions to the StudentTransportationStudentBusDetailsTravelDirection entity..</param>
        public EdFiStudentTransportationStudentBusDetailsTravelDirection(string travelDirectionDescriptor = default, Object ext = default)
        {
            // to ensure "travelDirectionDescriptor" is required (not null)
            if (travelDirectionDescriptor == null)
            {
                throw new ArgumentNullException("travelDirectionDescriptor is a required property for EdFiStudentTransportationStudentBusDetailsTravelDirection and cannot be null");
            }
            this.TravelDirectionDescriptor = travelDirectionDescriptor;
            this.Ext = ext;
        }

        /// <summary>
        /// Indicates the direction of travel for the student transportation route (e.g., to school, from school).
        /// </summary>
        /// <value>Indicates the direction of travel for the student transportation route (e.g., to school, from school).</value>
        [DataMember(Name = "travelDirectionDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string TravelDirectionDescriptor { get; set; }

        /// <summary>
        /// Extensions to the StudentTransportationStudentBusDetailsTravelDirection entity.
        /// </summary>
        /// <value>Extensions to the StudentTransportationStudentBusDetailsTravelDirection entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentTransportationStudentBusDetailsTravelDirection {\n");
            sb.Append("  TravelDirectionDescriptor: ").Append(TravelDirectionDescriptor).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TravelDirectionDescriptor (string) maxLength
            if (this.TravelDirectionDescriptor != null && this.TravelDirectionDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for TravelDirectionDescriptor, length must be less than 306.", new [] { "TravelDirectionDescriptor" });
            }

            yield break;
        }
    }

}
